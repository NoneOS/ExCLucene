/**
 * This code is released under the
 * Apache License Version 2.0 http://www.apache.org/licenses/.
 *
 */

#ifndef VERTICALSCALARUNPACKERIMP_H_
#define VERTICALSCALARUNPACKERIMP_H_


// 0-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c0(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	memset(out, 0, 128 * sizeof(uint32_t));
}


// 1-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c1(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x01 ;
	out[1] = ( in[1] >> 0 ) & 0x01 ;
	out[2] = ( in[2] >> 0 ) & 0x01 ;
	out[3] = ( in[3] >> 0 ) & 0x01 ;

	out[4] = ( in[0] >> 1 ) & 0x01 ;
	out[5] = ( in[1] >> 1 ) & 0x01 ;
	out[6] = ( in[2] >> 1 ) & 0x01 ;
	out[7] = ( in[3] >> 1 ) & 0x01 ;

	out[8] = ( in[0] >> 2 ) & 0x01 ;
	out[9] = ( in[1] >> 2 ) & 0x01 ;
	out[10] = ( in[2] >> 2 ) & 0x01 ;
	out[11] = ( in[3] >> 2 ) & 0x01 ;

	out[12] = ( in[0] >> 3 ) & 0x01 ;
	out[13] = ( in[1] >> 3 ) & 0x01 ;
	out[14] = ( in[2] >> 3 ) & 0x01 ;
	out[15] = ( in[3] >> 3 ) & 0x01 ;

	out[16] = ( in[0] >> 4 ) & 0x01 ;
	out[17] = ( in[1] >> 4 ) & 0x01 ;
	out[18] = ( in[2] >> 4 ) & 0x01 ;
	out[19] = ( in[3] >> 4 ) & 0x01 ;

	out[20] = ( in[0] >> 5 ) & 0x01 ;
	out[21] = ( in[1] >> 5 ) & 0x01 ;
	out[22] = ( in[2] >> 5 ) & 0x01 ;
	out[23] = ( in[3] >> 5 ) & 0x01 ;

	out[24] = ( in[0] >> 6 ) & 0x01 ;
	out[25] = ( in[1] >> 6 ) & 0x01 ;
	out[26] = ( in[2] >> 6 ) & 0x01 ;
	out[27] = ( in[3] >> 6 ) & 0x01 ;

	out[28] = ( in[0] >> 7 ) & 0x01 ;
	out[29] = ( in[1] >> 7 ) & 0x01 ;
	out[30] = ( in[2] >> 7 ) & 0x01 ;
	out[31] = ( in[3] >> 7 ) & 0x01 ;

	out[32] = ( in[0] >> 8 ) & 0x01 ;
	out[33] = ( in[1] >> 8 ) & 0x01 ;
	out[34] = ( in[2] >> 8 ) & 0x01 ;
	out[35] = ( in[3] >> 8 ) & 0x01 ;

	out[36] = ( in[0] >> 9 ) & 0x01 ;
	out[37] = ( in[1] >> 9 ) & 0x01 ;
	out[38] = ( in[2] >> 9 ) & 0x01 ;
	out[39] = ( in[3] >> 9 ) & 0x01 ;

	out[40] = ( in[0] >> 10 ) & 0x01 ;
	out[41] = ( in[1] >> 10 ) & 0x01 ;
	out[42] = ( in[2] >> 10 ) & 0x01 ;
	out[43] = ( in[3] >> 10 ) & 0x01 ;

	out[44] = ( in[0] >> 11 ) & 0x01 ;
	out[45] = ( in[1] >> 11 ) & 0x01 ;
	out[46] = ( in[2] >> 11 ) & 0x01 ;
	out[47] = ( in[3] >> 11 ) & 0x01 ;

	out[48] = ( in[0] >> 12 ) & 0x01 ;
	out[49] = ( in[1] >> 12 ) & 0x01 ;
	out[50] = ( in[2] >> 12 ) & 0x01 ;
	out[51] = ( in[3] >> 12 ) & 0x01 ;

	out[52] = ( in[0] >> 13 ) & 0x01 ;
	out[53] = ( in[1] >> 13 ) & 0x01 ;
	out[54] = ( in[2] >> 13 ) & 0x01 ;
	out[55] = ( in[3] >> 13 ) & 0x01 ;

	out[56] = ( in[0] >> 14 ) & 0x01 ;
	out[57] = ( in[1] >> 14 ) & 0x01 ;
	out[58] = ( in[2] >> 14 ) & 0x01 ;
	out[59] = ( in[3] >> 14 ) & 0x01 ;

	out[60] = ( in[0] >> 15 ) & 0x01 ;
	out[61] = ( in[1] >> 15 ) & 0x01 ;
	out[62] = ( in[2] >> 15 ) & 0x01 ;
	out[63] = ( in[3] >> 15 ) & 0x01 ;

	out[64] = ( in[0] >> 16 ) & 0x01 ;
	out[65] = ( in[1] >> 16 ) & 0x01 ;
	out[66] = ( in[2] >> 16 ) & 0x01 ;
	out[67] = ( in[3] >> 16 ) & 0x01 ;

	out[68] = ( in[0] >> 17 ) & 0x01 ;
	out[69] = ( in[1] >> 17 ) & 0x01 ;
	out[70] = ( in[2] >> 17 ) & 0x01 ;
	out[71] = ( in[3] >> 17 ) & 0x01 ;

	out[72] = ( in[0] >> 18 ) & 0x01 ;
	out[73] = ( in[1] >> 18 ) & 0x01 ;
	out[74] = ( in[2] >> 18 ) & 0x01 ;
	out[75] = ( in[3] >> 18 ) & 0x01 ;

	out[76] = ( in[0] >> 19 ) & 0x01 ;
	out[77] = ( in[1] >> 19 ) & 0x01 ;
	out[78] = ( in[2] >> 19 ) & 0x01 ;
	out[79] = ( in[3] >> 19 ) & 0x01 ;

	out[80] = ( in[0] >> 20 ) & 0x01 ;
	out[81] = ( in[1] >> 20 ) & 0x01 ;
	out[82] = ( in[2] >> 20 ) & 0x01 ;
	out[83] = ( in[3] >> 20 ) & 0x01 ;

	out[84] = ( in[0] >> 21 ) & 0x01 ;
	out[85] = ( in[1] >> 21 ) & 0x01 ;
	out[86] = ( in[2] >> 21 ) & 0x01 ;
	out[87] = ( in[3] >> 21 ) & 0x01 ;

	out[88] = ( in[0] >> 22 ) & 0x01 ;
	out[89] = ( in[1] >> 22 ) & 0x01 ;
	out[90] = ( in[2] >> 22 ) & 0x01 ;
	out[91] = ( in[3] >> 22 ) & 0x01 ;

	out[92] = ( in[0] >> 23 ) & 0x01 ;
	out[93] = ( in[1] >> 23 ) & 0x01 ;
	out[94] = ( in[2] >> 23 ) & 0x01 ;
	out[95] = ( in[3] >> 23 ) & 0x01 ;

	out[96] = ( in[0] >> 24 ) & 0x01 ;
	out[97] = ( in[1] >> 24 ) & 0x01 ;
	out[98] = ( in[2] >> 24 ) & 0x01 ;
	out[99] = ( in[3] >> 24 ) & 0x01 ;

	out[100] = ( in[0] >> 25 ) & 0x01 ;
	out[101] = ( in[1] >> 25 ) & 0x01 ;
	out[102] = ( in[2] >> 25 ) & 0x01 ;
	out[103] = ( in[3] >> 25 ) & 0x01 ;

	out[104] = ( in[0] >> 26 ) & 0x01 ;
	out[105] = ( in[1] >> 26 ) & 0x01 ;
	out[106] = ( in[2] >> 26 ) & 0x01 ;
	out[107] = ( in[3] >> 26 ) & 0x01 ;

	out[108] = ( in[0] >> 27 ) & 0x01 ;
	out[109] = ( in[1] >> 27 ) & 0x01 ;
	out[110] = ( in[2] >> 27 ) & 0x01 ;
	out[111] = ( in[3] >> 27 ) & 0x01 ;

	out[112] = ( in[0] >> 28 ) & 0x01 ;
	out[113] = ( in[1] >> 28 ) & 0x01 ;
	out[114] = ( in[2] >> 28 ) & 0x01 ;
	out[115] = ( in[3] >> 28 ) & 0x01 ;

	out[116] = ( in[0] >> 29 ) & 0x01 ;
	out[117] = ( in[1] >> 29 ) & 0x01 ;
	out[118] = ( in[2] >> 29 ) & 0x01 ;
	out[119] = ( in[3] >> 29 ) & 0x01 ;

	out[120] = ( in[0] >> 30 ) & 0x01 ;
	out[121] = ( in[1] >> 30 ) & 0x01 ;
	out[122] = ( in[2] >> 30 ) & 0x01 ;
	out[123] = ( in[3] >> 30 ) & 0x01 ;

	out[124] = ( in[0] >> 31 ) ;
	out[125] = ( in[1] >> 31 ) ;
	out[126] = ( in[2] >> 31 ) ;
	out[127] = ( in[3] >> 31 ) ;
}


// 2-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c2(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x03 ;
	out[1] = ( in[1] >> 0 ) & 0x03 ;
	out[2] = ( in[2] >> 0 ) & 0x03 ;
	out[3] = ( in[3] >> 0 ) & 0x03 ;

	out[4] = ( in[0] >> 2 ) & 0x03 ;
	out[5] = ( in[1] >> 2 ) & 0x03 ;
	out[6] = ( in[2] >> 2 ) & 0x03 ;
	out[7] = ( in[3] >> 2 ) & 0x03 ;

	out[8] = ( in[0] >> 4 ) & 0x03 ;
	out[9] = ( in[1] >> 4 ) & 0x03 ;
	out[10] = ( in[2] >> 4 ) & 0x03 ;
	out[11] = ( in[3] >> 4 ) & 0x03 ;

	out[12] = ( in[0] >> 6 ) & 0x03 ;
	out[13] = ( in[1] >> 6 ) & 0x03 ;
	out[14] = ( in[2] >> 6 ) & 0x03 ;
	out[15] = ( in[3] >> 6 ) & 0x03 ;

	out[16] = ( in[0] >> 8 ) & 0x03 ;
	out[17] = ( in[1] >> 8 ) & 0x03 ;
	out[18] = ( in[2] >> 8 ) & 0x03 ;
	out[19] = ( in[3] >> 8 ) & 0x03 ;

	out[20] = ( in[0] >> 10 ) & 0x03 ;
	out[21] = ( in[1] >> 10 ) & 0x03 ;
	out[22] = ( in[2] >> 10 ) & 0x03 ;
	out[23] = ( in[3] >> 10 ) & 0x03 ;

	out[24] = ( in[0] >> 12 ) & 0x03 ;
	out[25] = ( in[1] >> 12 ) & 0x03 ;
	out[26] = ( in[2] >> 12 ) & 0x03 ;
	out[27] = ( in[3] >> 12 ) & 0x03 ;

	out[28] = ( in[0] >> 14 ) & 0x03 ;
	out[29] = ( in[1] >> 14 ) & 0x03 ;
	out[30] = ( in[2] >> 14 ) & 0x03 ;
	out[31] = ( in[3] >> 14 ) & 0x03 ;

	out[32] = ( in[0] >> 16 ) & 0x03 ;
	out[33] = ( in[1] >> 16 ) & 0x03 ;
	out[34] = ( in[2] >> 16 ) & 0x03 ;
	out[35] = ( in[3] >> 16 ) & 0x03 ;

	out[36] = ( in[0] >> 18 ) & 0x03 ;
	out[37] = ( in[1] >> 18 ) & 0x03 ;
	out[38] = ( in[2] >> 18 ) & 0x03 ;
	out[39] = ( in[3] >> 18 ) & 0x03 ;

	out[40] = ( in[0] >> 20 ) & 0x03 ;
	out[41] = ( in[1] >> 20 ) & 0x03 ;
	out[42] = ( in[2] >> 20 ) & 0x03 ;
	out[43] = ( in[3] >> 20 ) & 0x03 ;

	out[44] = ( in[0] >> 22 ) & 0x03 ;
	out[45] = ( in[1] >> 22 ) & 0x03 ;
	out[46] = ( in[2] >> 22 ) & 0x03 ;
	out[47] = ( in[3] >> 22 ) & 0x03 ;

	out[48] = ( in[0] >> 24 ) & 0x03 ;
	out[49] = ( in[1] >> 24 ) & 0x03 ;
	out[50] = ( in[2] >> 24 ) & 0x03 ;
	out[51] = ( in[3] >> 24 ) & 0x03 ;

	out[52] = ( in[0] >> 26 ) & 0x03 ;
	out[53] = ( in[1] >> 26 ) & 0x03 ;
	out[54] = ( in[2] >> 26 ) & 0x03 ;
	out[55] = ( in[3] >> 26 ) & 0x03 ;

	out[56] = ( in[0] >> 28 ) & 0x03 ;
	out[57] = ( in[1] >> 28 ) & 0x03 ;
	out[58] = ( in[2] >> 28 ) & 0x03 ;
	out[59] = ( in[3] >> 28 ) & 0x03 ;

	out[60] = ( in[0] >> 30 ) ;
	out[61] = ( in[1] >> 30 ) ;
	out[62] = ( in[2] >> 30 ) ;
	out[63] = ( in[3] >> 30 ) ;

	out[64] = ( in[4] >> 0 ) & 0x03 ;
	out[65] = ( in[5] >> 0 ) & 0x03 ;
	out[66] = ( in[6] >> 0 ) & 0x03 ;
	out[67] = ( in[7] >> 0 ) & 0x03 ;

	out[68] = ( in[4] >> 2 ) & 0x03 ;
	out[69] = ( in[5] >> 2 ) & 0x03 ;
	out[70] = ( in[6] >> 2 ) & 0x03 ;
	out[71] = ( in[7] >> 2 ) & 0x03 ;

	out[72] = ( in[4] >> 4 ) & 0x03 ;
	out[73] = ( in[5] >> 4 ) & 0x03 ;
	out[74] = ( in[6] >> 4 ) & 0x03 ;
	out[75] = ( in[7] >> 4 ) & 0x03 ;

	out[76] = ( in[4] >> 6 ) & 0x03 ;
	out[77] = ( in[5] >> 6 ) & 0x03 ;
	out[78] = ( in[6] >> 6 ) & 0x03 ;
	out[79] = ( in[7] >> 6 ) & 0x03 ;

	out[80] = ( in[4] >> 8 ) & 0x03 ;
	out[81] = ( in[5] >> 8 ) & 0x03 ;
	out[82] = ( in[6] >> 8 ) & 0x03 ;
	out[83] = ( in[7] >> 8 ) & 0x03 ;

	out[84] = ( in[4] >> 10 ) & 0x03 ;
	out[85] = ( in[5] >> 10 ) & 0x03 ;
	out[86] = ( in[6] >> 10 ) & 0x03 ;
	out[87] = ( in[7] >> 10 ) & 0x03 ;

	out[88] = ( in[4] >> 12 ) & 0x03 ;
	out[89] = ( in[5] >> 12 ) & 0x03 ;
	out[90] = ( in[6] >> 12 ) & 0x03 ;
	out[91] = ( in[7] >> 12 ) & 0x03 ;

	out[92] = ( in[4] >> 14 ) & 0x03 ;
	out[93] = ( in[5] >> 14 ) & 0x03 ;
	out[94] = ( in[6] >> 14 ) & 0x03 ;
	out[95] = ( in[7] >> 14 ) & 0x03 ;

	out[96] = ( in[4] >> 16 ) & 0x03 ;
	out[97] = ( in[5] >> 16 ) & 0x03 ;
	out[98] = ( in[6] >> 16 ) & 0x03 ;
	out[99] = ( in[7] >> 16 ) & 0x03 ;

	out[100] = ( in[4] >> 18 ) & 0x03 ;
	out[101] = ( in[5] >> 18 ) & 0x03 ;
	out[102] = ( in[6] >> 18 ) & 0x03 ;
	out[103] = ( in[7] >> 18 ) & 0x03 ;

	out[104] = ( in[4] >> 20 ) & 0x03 ;
	out[105] = ( in[5] >> 20 ) & 0x03 ;
	out[106] = ( in[6] >> 20 ) & 0x03 ;
	out[107] = ( in[7] >> 20 ) & 0x03 ;

	out[108] = ( in[4] >> 22 ) & 0x03 ;
	out[109] = ( in[5] >> 22 ) & 0x03 ;
	out[110] = ( in[6] >> 22 ) & 0x03 ;
	out[111] = ( in[7] >> 22 ) & 0x03 ;

	out[112] = ( in[4] >> 24 ) & 0x03 ;
	out[113] = ( in[5] >> 24 ) & 0x03 ;
	out[114] = ( in[6] >> 24 ) & 0x03 ;
	out[115] = ( in[7] >> 24 ) & 0x03 ;

	out[116] = ( in[4] >> 26 ) & 0x03 ;
	out[117] = ( in[5] >> 26 ) & 0x03 ;
	out[118] = ( in[6] >> 26 ) & 0x03 ;
	out[119] = ( in[7] >> 26 ) & 0x03 ;

	out[120] = ( in[4] >> 28 ) & 0x03 ;
	out[121] = ( in[5] >> 28 ) & 0x03 ;
	out[122] = ( in[6] >> 28 ) & 0x03 ;
	out[123] = ( in[7] >> 28 ) & 0x03 ;

	out[124] = ( in[4] >> 30 ) ;
	out[125] = ( in[5] >> 30 ) ;
	out[126] = ( in[6] >> 30 ) ;
	out[127] = ( in[7] >> 30 ) ;
}


// 3-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c3(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x07 ;
	out[1] = ( in[1] >> 0 ) & 0x07 ;
	out[2] = ( in[2] >> 0 ) & 0x07 ;
	out[3] = ( in[3] >> 0 ) & 0x07 ;

	out[4] = ( in[0] >> 3 ) & 0x07 ;
	out[5] = ( in[1] >> 3 ) & 0x07 ;
	out[6] = ( in[2] >> 3 ) & 0x07 ;
	out[7] = ( in[3] >> 3 ) & 0x07 ;

	out[8] = ( in[0] >> 6 ) & 0x07 ;
	out[9] = ( in[1] >> 6 ) & 0x07 ;
	out[10] = ( in[2] >> 6 ) & 0x07 ;
	out[11] = ( in[3] >> 6 ) & 0x07 ;

	out[12] = ( in[0] >> 9 ) & 0x07 ;
	out[13] = ( in[1] >> 9 ) & 0x07 ;
	out[14] = ( in[2] >> 9 ) & 0x07 ;
	out[15] = ( in[3] >> 9 ) & 0x07 ;

	out[16] = ( in[0] >> 12 ) & 0x07 ;
	out[17] = ( in[1] >> 12 ) & 0x07 ;
	out[18] = ( in[2] >> 12 ) & 0x07 ;
	out[19] = ( in[3] >> 12 ) & 0x07 ;

	out[20] = ( in[0] >> 15 ) & 0x07 ;
	out[21] = ( in[1] >> 15 ) & 0x07 ;
	out[22] = ( in[2] >> 15 ) & 0x07 ;
	out[23] = ( in[3] >> 15 ) & 0x07 ;

	out[24] = ( in[0] >> 18 ) & 0x07 ;
	out[25] = ( in[1] >> 18 ) & 0x07 ;
	out[26] = ( in[2] >> 18 ) & 0x07 ;
	out[27] = ( in[3] >> 18 ) & 0x07 ;

	out[28] = ( in[0] >> 21 ) & 0x07 ;
	out[29] = ( in[1] >> 21 ) & 0x07 ;
	out[30] = ( in[2] >> 21 ) & 0x07 ;
	out[31] = ( in[3] >> 21 ) & 0x07 ;

	out[32] = ( in[0] >> 24 ) & 0x07 ;
	out[33] = ( in[1] >> 24 ) & 0x07 ;
	out[34] = ( in[2] >> 24 ) & 0x07 ;
	out[35] = ( in[3] >> 24 ) & 0x07 ;

	out[36] = ( in[0] >> 27 ) & 0x07 ;
	out[37] = ( in[1] >> 27 ) & 0x07 ;
	out[38] = ( in[2] >> 27 ) & 0x07 ;
	out[39] = ( in[3] >> 27 ) & 0x07 ;

	out[40] = ( in[0] >> 30 ) ;
	out[41] = ( in[1] >> 30 ) ;
	out[42] = ( in[2] >> 30 ) ;
	out[43] = ( in[3] >> 30 ) ;

	out[40] |= ( in[4] << ( 32 - 30 ) ) & 0x07 ;
	out[41] |= ( in[5] << ( 32 - 30 ) ) & 0x07 ;
	out[42] |= ( in[6] << ( 32 - 30 ) ) & 0x07 ;
	out[43] |= ( in[7] << ( 32 - 30 ) ) & 0x07 ;

	out[44] = ( in[4] >> 1 ) & 0x07 ;
	out[45] = ( in[5] >> 1 ) & 0x07 ;
	out[46] = ( in[6] >> 1 ) & 0x07 ;
	out[47] = ( in[7] >> 1 ) & 0x07 ;

	out[48] = ( in[4] >> 4 ) & 0x07 ;
	out[49] = ( in[5] >> 4 ) & 0x07 ;
	out[50] = ( in[6] >> 4 ) & 0x07 ;
	out[51] = ( in[7] >> 4 ) & 0x07 ;

	out[52] = ( in[4] >> 7 ) & 0x07 ;
	out[53] = ( in[5] >> 7 ) & 0x07 ;
	out[54] = ( in[6] >> 7 ) & 0x07 ;
	out[55] = ( in[7] >> 7 ) & 0x07 ;

	out[56] = ( in[4] >> 10 ) & 0x07 ;
	out[57] = ( in[5] >> 10 ) & 0x07 ;
	out[58] = ( in[6] >> 10 ) & 0x07 ;
	out[59] = ( in[7] >> 10 ) & 0x07 ;

	out[60] = ( in[4] >> 13 ) & 0x07 ;
	out[61] = ( in[5] >> 13 ) & 0x07 ;
	out[62] = ( in[6] >> 13 ) & 0x07 ;
	out[63] = ( in[7] >> 13 ) & 0x07 ;

	out[64] = ( in[4] >> 16 ) & 0x07 ;
	out[65] = ( in[5] >> 16 ) & 0x07 ;
	out[66] = ( in[6] >> 16 ) & 0x07 ;
	out[67] = ( in[7] >> 16 ) & 0x07 ;

	out[68] = ( in[4] >> 19 ) & 0x07 ;
	out[69] = ( in[5] >> 19 ) & 0x07 ;
	out[70] = ( in[6] >> 19 ) & 0x07 ;
	out[71] = ( in[7] >> 19 ) & 0x07 ;

	out[72] = ( in[4] >> 22 ) & 0x07 ;
	out[73] = ( in[5] >> 22 ) & 0x07 ;
	out[74] = ( in[6] >> 22 ) & 0x07 ;
	out[75] = ( in[7] >> 22 ) & 0x07 ;

	out[76] = ( in[4] >> 25 ) & 0x07 ;
	out[77] = ( in[5] >> 25 ) & 0x07 ;
	out[78] = ( in[6] >> 25 ) & 0x07 ;
	out[79] = ( in[7] >> 25 ) & 0x07 ;

	out[80] = ( in[4] >> 28 ) & 0x07 ;
	out[81] = ( in[5] >> 28 ) & 0x07 ;
	out[82] = ( in[6] >> 28 ) & 0x07 ;
	out[83] = ( in[7] >> 28 ) & 0x07 ;

	out[84] = ( in[4] >> 31 ) ;
	out[85] = ( in[5] >> 31 ) ;
	out[86] = ( in[6] >> 31 ) ;
	out[87] = ( in[7] >> 31 ) ;

	out[84] |= ( in[8] << ( 32 - 31 ) ) & 0x07 ;
	out[85] |= ( in[9] << ( 32 - 31 ) ) & 0x07 ;
	out[86] |= ( in[10] << ( 32 - 31 ) ) & 0x07 ;
	out[87] |= ( in[11] << ( 32 - 31 ) ) & 0x07 ;

	out[88] = ( in[8] >> 2 ) & 0x07 ;
	out[89] = ( in[9] >> 2 ) & 0x07 ;
	out[90] = ( in[10] >> 2 ) & 0x07 ;
	out[91] = ( in[11] >> 2 ) & 0x07 ;

	out[92] = ( in[8] >> 5 ) & 0x07 ;
	out[93] = ( in[9] >> 5 ) & 0x07 ;
	out[94] = ( in[10] >> 5 ) & 0x07 ;
	out[95] = ( in[11] >> 5 ) & 0x07 ;

	out[96] = ( in[8] >> 8 ) & 0x07 ;
	out[97] = ( in[9] >> 8 ) & 0x07 ;
	out[98] = ( in[10] >> 8 ) & 0x07 ;
	out[99] = ( in[11] >> 8 ) & 0x07 ;

	out[100] = ( in[8] >> 11 ) & 0x07 ;
	out[101] = ( in[9] >> 11 ) & 0x07 ;
	out[102] = ( in[10] >> 11 ) & 0x07 ;
	out[103] = ( in[11] >> 11 ) & 0x07 ;

	out[104] = ( in[8] >> 14 ) & 0x07 ;
	out[105] = ( in[9] >> 14 ) & 0x07 ;
	out[106] = ( in[10] >> 14 ) & 0x07 ;
	out[107] = ( in[11] >> 14 ) & 0x07 ;

	out[108] = ( in[8] >> 17 ) & 0x07 ;
	out[109] = ( in[9] >> 17 ) & 0x07 ;
	out[110] = ( in[10] >> 17 ) & 0x07 ;
	out[111] = ( in[11] >> 17 ) & 0x07 ;

	out[112] = ( in[8] >> 20 ) & 0x07 ;
	out[113] = ( in[9] >> 20 ) & 0x07 ;
	out[114] = ( in[10] >> 20 ) & 0x07 ;
	out[115] = ( in[11] >> 20 ) & 0x07 ;

	out[116] = ( in[8] >> 23 ) & 0x07 ;
	out[117] = ( in[9] >> 23 ) & 0x07 ;
	out[118] = ( in[10] >> 23 ) & 0x07 ;
	out[119] = ( in[11] >> 23 ) & 0x07 ;

	out[120] = ( in[8] >> 26 ) & 0x07 ;
	out[121] = ( in[9] >> 26 ) & 0x07 ;
	out[122] = ( in[10] >> 26 ) & 0x07 ;
	out[123] = ( in[11] >> 26 ) & 0x07 ;

	out[124] = ( in[8] >> 29 ) ;
	out[125] = ( in[9] >> 29 ) ;
	out[126] = ( in[10] >> 29 ) ;
	out[127] = ( in[11] >> 29 ) ;
}


// 4-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c4(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x0f ;
	out[1] = ( in[1] >> 0 ) & 0x0f ;
	out[2] = ( in[2] >> 0 ) & 0x0f ;
	out[3] = ( in[3] >> 0 ) & 0x0f ;

	out[4] = ( in[0] >> 4 ) & 0x0f ;
	out[5] = ( in[1] >> 4 ) & 0x0f ;
	out[6] = ( in[2] >> 4 ) & 0x0f ;
	out[7] = ( in[3] >> 4 ) & 0x0f ;

	out[8] = ( in[0] >> 8 ) & 0x0f ;
	out[9] = ( in[1] >> 8 ) & 0x0f ;
	out[10] = ( in[2] >> 8 ) & 0x0f ;
	out[11] = ( in[3] >> 8 ) & 0x0f ;

	out[12] = ( in[0] >> 12 ) & 0x0f ;
	out[13] = ( in[1] >> 12 ) & 0x0f ;
	out[14] = ( in[2] >> 12 ) & 0x0f ;
	out[15] = ( in[3] >> 12 ) & 0x0f ;

	out[16] = ( in[0] >> 16 ) & 0x0f ;
	out[17] = ( in[1] >> 16 ) & 0x0f ;
	out[18] = ( in[2] >> 16 ) & 0x0f ;
	out[19] = ( in[3] >> 16 ) & 0x0f ;

	out[20] = ( in[0] >> 20 ) & 0x0f ;
	out[21] = ( in[1] >> 20 ) & 0x0f ;
	out[22] = ( in[2] >> 20 ) & 0x0f ;
	out[23] = ( in[3] >> 20 ) & 0x0f ;

	out[24] = ( in[0] >> 24 ) & 0x0f ;
	out[25] = ( in[1] >> 24 ) & 0x0f ;
	out[26] = ( in[2] >> 24 ) & 0x0f ;
	out[27] = ( in[3] >> 24 ) & 0x0f ;

	out[28] = ( in[0] >> 28 ) ;
	out[29] = ( in[1] >> 28 ) ;
	out[30] = ( in[2] >> 28 ) ;
	out[31] = ( in[3] >> 28 ) ;

	out[32] = ( in[4] >> 0 ) & 0x0f ;
	out[33] = ( in[5] >> 0 ) & 0x0f ;
	out[34] = ( in[6] >> 0 ) & 0x0f ;
	out[35] = ( in[7] >> 0 ) & 0x0f ;

	out[36] = ( in[4] >> 4 ) & 0x0f ;
	out[37] = ( in[5] >> 4 ) & 0x0f ;
	out[38] = ( in[6] >> 4 ) & 0x0f ;
	out[39] = ( in[7] >> 4 ) & 0x0f ;

	out[40] = ( in[4] >> 8 ) & 0x0f ;
	out[41] = ( in[5] >> 8 ) & 0x0f ;
	out[42] = ( in[6] >> 8 ) & 0x0f ;
	out[43] = ( in[7] >> 8 ) & 0x0f ;

	out[44] = ( in[4] >> 12 ) & 0x0f ;
	out[45] = ( in[5] >> 12 ) & 0x0f ;
	out[46] = ( in[6] >> 12 ) & 0x0f ;
	out[47] = ( in[7] >> 12 ) & 0x0f ;

	out[48] = ( in[4] >> 16 ) & 0x0f ;
	out[49] = ( in[5] >> 16 ) & 0x0f ;
	out[50] = ( in[6] >> 16 ) & 0x0f ;
	out[51] = ( in[7] >> 16 ) & 0x0f ;

	out[52] = ( in[4] >> 20 ) & 0x0f ;
	out[53] = ( in[5] >> 20 ) & 0x0f ;
	out[54] = ( in[6] >> 20 ) & 0x0f ;
	out[55] = ( in[7] >> 20 ) & 0x0f ;

	out[56] = ( in[4] >> 24 ) & 0x0f ;
	out[57] = ( in[5] >> 24 ) & 0x0f ;
	out[58] = ( in[6] >> 24 ) & 0x0f ;
	out[59] = ( in[7] >> 24 ) & 0x0f ;

	out[60] = ( in[4] >> 28 ) ;
	out[61] = ( in[5] >> 28 ) ;
	out[62] = ( in[6] >> 28 ) ;
	out[63] = ( in[7] >> 28 ) ;

	out[64] = ( in[8] >> 0 ) & 0x0f ;
	out[65] = ( in[9] >> 0 ) & 0x0f ;
	out[66] = ( in[10] >> 0 ) & 0x0f ;
	out[67] = ( in[11] >> 0 ) & 0x0f ;

	out[68] = ( in[8] >> 4 ) & 0x0f ;
	out[69] = ( in[9] >> 4 ) & 0x0f ;
	out[70] = ( in[10] >> 4 ) & 0x0f ;
	out[71] = ( in[11] >> 4 ) & 0x0f ;

	out[72] = ( in[8] >> 8 ) & 0x0f ;
	out[73] = ( in[9] >> 8 ) & 0x0f ;
	out[74] = ( in[10] >> 8 ) & 0x0f ;
	out[75] = ( in[11] >> 8 ) & 0x0f ;

	out[76] = ( in[8] >> 12 ) & 0x0f ;
	out[77] = ( in[9] >> 12 ) & 0x0f ;
	out[78] = ( in[10] >> 12 ) & 0x0f ;
	out[79] = ( in[11] >> 12 ) & 0x0f ;

	out[80] = ( in[8] >> 16 ) & 0x0f ;
	out[81] = ( in[9] >> 16 ) & 0x0f ;
	out[82] = ( in[10] >> 16 ) & 0x0f ;
	out[83] = ( in[11] >> 16 ) & 0x0f ;

	out[84] = ( in[8] >> 20 ) & 0x0f ;
	out[85] = ( in[9] >> 20 ) & 0x0f ;
	out[86] = ( in[10] >> 20 ) & 0x0f ;
	out[87] = ( in[11] >> 20 ) & 0x0f ;

	out[88] = ( in[8] >> 24 ) & 0x0f ;
	out[89] = ( in[9] >> 24 ) & 0x0f ;
	out[90] = ( in[10] >> 24 ) & 0x0f ;
	out[91] = ( in[11] >> 24 ) & 0x0f ;

	out[92] = ( in[8] >> 28 ) ;
	out[93] = ( in[9] >> 28 ) ;
	out[94] = ( in[10] >> 28 ) ;
	out[95] = ( in[11] >> 28 ) ;

	out[96] = ( in[12] >> 0 ) & 0x0f ;
	out[97] = ( in[13] >> 0 ) & 0x0f ;
	out[98] = ( in[14] >> 0 ) & 0x0f ;
	out[99] = ( in[15] >> 0 ) & 0x0f ;

	out[100] = ( in[12] >> 4 ) & 0x0f ;
	out[101] = ( in[13] >> 4 ) & 0x0f ;
	out[102] = ( in[14] >> 4 ) & 0x0f ;
	out[103] = ( in[15] >> 4 ) & 0x0f ;

	out[104] = ( in[12] >> 8 ) & 0x0f ;
	out[105] = ( in[13] >> 8 ) & 0x0f ;
	out[106] = ( in[14] >> 8 ) & 0x0f ;
	out[107] = ( in[15] >> 8 ) & 0x0f ;

	out[108] = ( in[12] >> 12 ) & 0x0f ;
	out[109] = ( in[13] >> 12 ) & 0x0f ;
	out[110] = ( in[14] >> 12 ) & 0x0f ;
	out[111] = ( in[15] >> 12 ) & 0x0f ;

	out[112] = ( in[12] >> 16 ) & 0x0f ;
	out[113] = ( in[13] >> 16 ) & 0x0f ;
	out[114] = ( in[14] >> 16 ) & 0x0f ;
	out[115] = ( in[15] >> 16 ) & 0x0f ;

	out[116] = ( in[12] >> 20 ) & 0x0f ;
	out[117] = ( in[13] >> 20 ) & 0x0f ;
	out[118] = ( in[14] >> 20 ) & 0x0f ;
	out[119] = ( in[15] >> 20 ) & 0x0f ;

	out[120] = ( in[12] >> 24 ) & 0x0f ;
	out[121] = ( in[13] >> 24 ) & 0x0f ;
	out[122] = ( in[14] >> 24 ) & 0x0f ;
	out[123] = ( in[15] >> 24 ) & 0x0f ;

	out[124] = ( in[12] >> 28 ) ;
	out[125] = ( in[13] >> 28 ) ;
	out[126] = ( in[14] >> 28 ) ;
	out[127] = ( in[15] >> 28 ) ;
}


// 5-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c5(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x1f ;
	out[1] = ( in[1] >> 0 ) & 0x1f ;
	out[2] = ( in[2] >> 0 ) & 0x1f ;
	out[3] = ( in[3] >> 0 ) & 0x1f ;

	out[4] = ( in[0] >> 5 ) & 0x1f ;
	out[5] = ( in[1] >> 5 ) & 0x1f ;
	out[6] = ( in[2] >> 5 ) & 0x1f ;
	out[7] = ( in[3] >> 5 ) & 0x1f ;

	out[8] = ( in[0] >> 10 ) & 0x1f ;
	out[9] = ( in[1] >> 10 ) & 0x1f ;
	out[10] = ( in[2] >> 10 ) & 0x1f ;
	out[11] = ( in[3] >> 10 ) & 0x1f ;

	out[12] = ( in[0] >> 15 ) & 0x1f ;
	out[13] = ( in[1] >> 15 ) & 0x1f ;
	out[14] = ( in[2] >> 15 ) & 0x1f ;
	out[15] = ( in[3] >> 15 ) & 0x1f ;

	out[16] = ( in[0] >> 20 ) & 0x1f ;
	out[17] = ( in[1] >> 20 ) & 0x1f ;
	out[18] = ( in[2] >> 20 ) & 0x1f ;
	out[19] = ( in[3] >> 20 ) & 0x1f ;

	out[20] = ( in[0] >> 25 ) & 0x1f ;
	out[21] = ( in[1] >> 25 ) & 0x1f ;
	out[22] = ( in[2] >> 25 ) & 0x1f ;
	out[23] = ( in[3] >> 25 ) & 0x1f ;

	out[24] = ( in[0] >> 30 ) ;
	out[25] = ( in[1] >> 30 ) ;
	out[26] = ( in[2] >> 30 ) ;
	out[27] = ( in[3] >> 30 ) ;

	out[24] |= ( in[4] << ( 32 - 30 ) ) & 0x1f ;
	out[25] |= ( in[5] << ( 32 - 30 ) ) & 0x1f ;
	out[26] |= ( in[6] << ( 32 - 30 ) ) & 0x1f ;
	out[27] |= ( in[7] << ( 32 - 30 ) ) & 0x1f ;

	out[28] = ( in[4] >> 3 ) & 0x1f ;
	out[29] = ( in[5] >> 3 ) & 0x1f ;
	out[30] = ( in[6] >> 3 ) & 0x1f ;
	out[31] = ( in[7] >> 3 ) & 0x1f ;

	out[32] = ( in[4] >> 8 ) & 0x1f ;
	out[33] = ( in[5] >> 8 ) & 0x1f ;
	out[34] = ( in[6] >> 8 ) & 0x1f ;
	out[35] = ( in[7] >> 8 ) & 0x1f ;

	out[36] = ( in[4] >> 13 ) & 0x1f ;
	out[37] = ( in[5] >> 13 ) & 0x1f ;
	out[38] = ( in[6] >> 13 ) & 0x1f ;
	out[39] = ( in[7] >> 13 ) & 0x1f ;

	out[40] = ( in[4] >> 18 ) & 0x1f ;
	out[41] = ( in[5] >> 18 ) & 0x1f ;
	out[42] = ( in[6] >> 18 ) & 0x1f ;
	out[43] = ( in[7] >> 18 ) & 0x1f ;

	out[44] = ( in[4] >> 23 ) & 0x1f ;
	out[45] = ( in[5] >> 23 ) & 0x1f ;
	out[46] = ( in[6] >> 23 ) & 0x1f ;
	out[47] = ( in[7] >> 23 ) & 0x1f ;

	out[48] = ( in[4] >> 28 ) ;
	out[49] = ( in[5] >> 28 ) ;
	out[50] = ( in[6] >> 28 ) ;
	out[51] = ( in[7] >> 28 ) ;

	out[48] |= ( in[8] << ( 32 - 28 ) ) & 0x1f ;
	out[49] |= ( in[9] << ( 32 - 28 ) ) & 0x1f ;
	out[50] |= ( in[10] << ( 32 - 28 ) ) & 0x1f ;
	out[51] |= ( in[11] << ( 32 - 28 ) ) & 0x1f ;

	out[52] = ( in[8] >> 1 ) & 0x1f ;
	out[53] = ( in[9] >> 1 ) & 0x1f ;
	out[54] = ( in[10] >> 1 ) & 0x1f ;
	out[55] = ( in[11] >> 1 ) & 0x1f ;

	out[56] = ( in[8] >> 6 ) & 0x1f ;
	out[57] = ( in[9] >> 6 ) & 0x1f ;
	out[58] = ( in[10] >> 6 ) & 0x1f ;
	out[59] = ( in[11] >> 6 ) & 0x1f ;

	out[60] = ( in[8] >> 11 ) & 0x1f ;
	out[61] = ( in[9] >> 11 ) & 0x1f ;
	out[62] = ( in[10] >> 11 ) & 0x1f ;
	out[63] = ( in[11] >> 11 ) & 0x1f ;

	out[64] = ( in[8] >> 16 ) & 0x1f ;
	out[65] = ( in[9] >> 16 ) & 0x1f ;
	out[66] = ( in[10] >> 16 ) & 0x1f ;
	out[67] = ( in[11] >> 16 ) & 0x1f ;

	out[68] = ( in[8] >> 21 ) & 0x1f ;
	out[69] = ( in[9] >> 21 ) & 0x1f ;
	out[70] = ( in[10] >> 21 ) & 0x1f ;
	out[71] = ( in[11] >> 21 ) & 0x1f ;

	out[72] = ( in[8] >> 26 ) & 0x1f ;
	out[73] = ( in[9] >> 26 ) & 0x1f ;
	out[74] = ( in[10] >> 26 ) & 0x1f ;
	out[75] = ( in[11] >> 26 ) & 0x1f ;

	out[76] = ( in[8] >> 31 ) ;
	out[77] = ( in[9] >> 31 ) ;
	out[78] = ( in[10] >> 31 ) ;
	out[79] = ( in[11] >> 31 ) ;

	out[76] |= ( in[12] << ( 32 - 31 ) ) & 0x1f ;
	out[77] |= ( in[13] << ( 32 - 31 ) ) & 0x1f ;
	out[78] |= ( in[14] << ( 32 - 31 ) ) & 0x1f ;
	out[79] |= ( in[15] << ( 32 - 31 ) ) & 0x1f ;

	out[80] = ( in[12] >> 4 ) & 0x1f ;
	out[81] = ( in[13] >> 4 ) & 0x1f ;
	out[82] = ( in[14] >> 4 ) & 0x1f ;
	out[83] = ( in[15] >> 4 ) & 0x1f ;

	out[84] = ( in[12] >> 9 ) & 0x1f ;
	out[85] = ( in[13] >> 9 ) & 0x1f ;
	out[86] = ( in[14] >> 9 ) & 0x1f ;
	out[87] = ( in[15] >> 9 ) & 0x1f ;

	out[88] = ( in[12] >> 14 ) & 0x1f ;
	out[89] = ( in[13] >> 14 ) & 0x1f ;
	out[90] = ( in[14] >> 14 ) & 0x1f ;
	out[91] = ( in[15] >> 14 ) & 0x1f ;

	out[92] = ( in[12] >> 19 ) & 0x1f ;
	out[93] = ( in[13] >> 19 ) & 0x1f ;
	out[94] = ( in[14] >> 19 ) & 0x1f ;
	out[95] = ( in[15] >> 19 ) & 0x1f ;

	out[96] = ( in[12] >> 24 ) & 0x1f ;
	out[97] = ( in[13] >> 24 ) & 0x1f ;
	out[98] = ( in[14] >> 24 ) & 0x1f ;
	out[99] = ( in[15] >> 24 ) & 0x1f ;

	out[100] = ( in[12] >> 29 ) ;
	out[101] = ( in[13] >> 29 ) ;
	out[102] = ( in[14] >> 29 ) ;
	out[103] = ( in[15] >> 29 ) ;

	out[100] |= ( in[16] << ( 32 - 29 ) ) & 0x1f ;
	out[101] |= ( in[17] << ( 32 - 29 ) ) & 0x1f ;
	out[102] |= ( in[18] << ( 32 - 29 ) ) & 0x1f ;
	out[103] |= ( in[19] << ( 32 - 29 ) ) & 0x1f ;

	out[104] = ( in[16] >> 2 ) & 0x1f ;
	out[105] = ( in[17] >> 2 ) & 0x1f ;
	out[106] = ( in[18] >> 2 ) & 0x1f ;
	out[107] = ( in[19] >> 2 ) & 0x1f ;

	out[108] = ( in[16] >> 7 ) & 0x1f ;
	out[109] = ( in[17] >> 7 ) & 0x1f ;
	out[110] = ( in[18] >> 7 ) & 0x1f ;
	out[111] = ( in[19] >> 7 ) & 0x1f ;

	out[112] = ( in[16] >> 12 ) & 0x1f ;
	out[113] = ( in[17] >> 12 ) & 0x1f ;
	out[114] = ( in[18] >> 12 ) & 0x1f ;
	out[115] = ( in[19] >> 12 ) & 0x1f ;

	out[116] = ( in[16] >> 17 ) & 0x1f ;
	out[117] = ( in[17] >> 17 ) & 0x1f ;
	out[118] = ( in[18] >> 17 ) & 0x1f ;
	out[119] = ( in[19] >> 17 ) & 0x1f ;

	out[120] = ( in[16] >> 22 ) & 0x1f ;
	out[121] = ( in[17] >> 22 ) & 0x1f ;
	out[122] = ( in[18] >> 22 ) & 0x1f ;
	out[123] = ( in[19] >> 22 ) & 0x1f ;

	out[124] = ( in[16] >> 27 ) ;
	out[125] = ( in[17] >> 27 ) ;
	out[126] = ( in[18] >> 27 ) ;
	out[127] = ( in[19] >> 27 ) ;
}


// 6-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c6(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x3f ;
	out[1] = ( in[1] >> 0 ) & 0x3f ;
	out[2] = ( in[2] >> 0 ) & 0x3f ;
	out[3] = ( in[3] >> 0 ) & 0x3f ;

	out[4] = ( in[0] >> 6 ) & 0x3f ;
	out[5] = ( in[1] >> 6 ) & 0x3f ;
	out[6] = ( in[2] >> 6 ) & 0x3f ;
	out[7] = ( in[3] >> 6 ) & 0x3f ;

	out[8] = ( in[0] >> 12 ) & 0x3f ;
	out[9] = ( in[1] >> 12 ) & 0x3f ;
	out[10] = ( in[2] >> 12 ) & 0x3f ;
	out[11] = ( in[3] >> 12 ) & 0x3f ;

	out[12] = ( in[0] >> 18 ) & 0x3f ;
	out[13] = ( in[1] >> 18 ) & 0x3f ;
	out[14] = ( in[2] >> 18 ) & 0x3f ;
	out[15] = ( in[3] >> 18 ) & 0x3f ;

	out[16] = ( in[0] >> 24 ) & 0x3f ;
	out[17] = ( in[1] >> 24 ) & 0x3f ;
	out[18] = ( in[2] >> 24 ) & 0x3f ;
	out[19] = ( in[3] >> 24 ) & 0x3f ;

	out[20] = ( in[0] >> 30 ) ;
	out[21] = ( in[1] >> 30 ) ;
	out[22] = ( in[2] >> 30 ) ;
	out[23] = ( in[3] >> 30 ) ;

	out[20] |= ( in[4] << ( 32 - 30 ) ) & 0x3f ;
	out[21] |= ( in[5] << ( 32 - 30 ) ) & 0x3f ;
	out[22] |= ( in[6] << ( 32 - 30 ) ) & 0x3f ;
	out[23] |= ( in[7] << ( 32 - 30 ) ) & 0x3f ;

	out[24] = ( in[4] >> 4 ) & 0x3f ;
	out[25] = ( in[5] >> 4 ) & 0x3f ;
	out[26] = ( in[6] >> 4 ) & 0x3f ;
	out[27] = ( in[7] >> 4 ) & 0x3f ;

	out[28] = ( in[4] >> 10 ) & 0x3f ;
	out[29] = ( in[5] >> 10 ) & 0x3f ;
	out[30] = ( in[6] >> 10 ) & 0x3f ;
	out[31] = ( in[7] >> 10 ) & 0x3f ;

	out[32] = ( in[4] >> 16 ) & 0x3f ;
	out[33] = ( in[5] >> 16 ) & 0x3f ;
	out[34] = ( in[6] >> 16 ) & 0x3f ;
	out[35] = ( in[7] >> 16 ) & 0x3f ;

	out[36] = ( in[4] >> 22 ) & 0x3f ;
	out[37] = ( in[5] >> 22 ) & 0x3f ;
	out[38] = ( in[6] >> 22 ) & 0x3f ;
	out[39] = ( in[7] >> 22 ) & 0x3f ;

	out[40] = ( in[4] >> 28 ) ;
	out[41] = ( in[5] >> 28 ) ;
	out[42] = ( in[6] >> 28 ) ;
	out[43] = ( in[7] >> 28 ) ;

	out[40] |= ( in[8] << ( 32 - 28 ) ) & 0x3f ;
	out[41] |= ( in[9] << ( 32 - 28 ) ) & 0x3f ;
	out[42] |= ( in[10] << ( 32 - 28 ) ) & 0x3f ;
	out[43] |= ( in[11] << ( 32 - 28 ) ) & 0x3f ;

	out[44] = ( in[8] >> 2 ) & 0x3f ;
	out[45] = ( in[9] >> 2 ) & 0x3f ;
	out[46] = ( in[10] >> 2 ) & 0x3f ;
	out[47] = ( in[11] >> 2 ) & 0x3f ;

	out[48] = ( in[8] >> 8 ) & 0x3f ;
	out[49] = ( in[9] >> 8 ) & 0x3f ;
	out[50] = ( in[10] >> 8 ) & 0x3f ;
	out[51] = ( in[11] >> 8 ) & 0x3f ;

	out[52] = ( in[8] >> 14 ) & 0x3f ;
	out[53] = ( in[9] >> 14 ) & 0x3f ;
	out[54] = ( in[10] >> 14 ) & 0x3f ;
	out[55] = ( in[11] >> 14 ) & 0x3f ;

	out[56] = ( in[8] >> 20 ) & 0x3f ;
	out[57] = ( in[9] >> 20 ) & 0x3f ;
	out[58] = ( in[10] >> 20 ) & 0x3f ;
	out[59] = ( in[11] >> 20 ) & 0x3f ;

	out[60] = ( in[8] >> 26 ) ;
	out[61] = ( in[9] >> 26 ) ;
	out[62] = ( in[10] >> 26 ) ;
	out[63] = ( in[11] >> 26 ) ;

	out[64] = ( in[12] >> 0 ) & 0x3f ;
	out[65] = ( in[13] >> 0 ) & 0x3f ;
	out[66] = ( in[14] >> 0 ) & 0x3f ;
	out[67] = ( in[15] >> 0 ) & 0x3f ;

	out[68] = ( in[12] >> 6 ) & 0x3f ;
	out[69] = ( in[13] >> 6 ) & 0x3f ;
	out[70] = ( in[14] >> 6 ) & 0x3f ;
	out[71] = ( in[15] >> 6 ) & 0x3f ;

	out[72] = ( in[12] >> 12 ) & 0x3f ;
	out[73] = ( in[13] >> 12 ) & 0x3f ;
	out[74] = ( in[14] >> 12 ) & 0x3f ;
	out[75] = ( in[15] >> 12 ) & 0x3f ;

	out[76] = ( in[12] >> 18 ) & 0x3f ;
	out[77] = ( in[13] >> 18 ) & 0x3f ;
	out[78] = ( in[14] >> 18 ) & 0x3f ;
	out[79] = ( in[15] >> 18 ) & 0x3f ;

	out[80] = ( in[12] >> 24 ) & 0x3f ;
	out[81] = ( in[13] >> 24 ) & 0x3f ;
	out[82] = ( in[14] >> 24 ) & 0x3f ;
	out[83] = ( in[15] >> 24 ) & 0x3f ;

	out[84] = ( in[12] >> 30 ) ;
	out[85] = ( in[13] >> 30 ) ;
	out[86] = ( in[14] >> 30 ) ;
	out[87] = ( in[15] >> 30 ) ;

	out[84] |= ( in[16] << ( 32 - 30 ) ) & 0x3f ;
	out[85] |= ( in[17] << ( 32 - 30 ) ) & 0x3f ;
	out[86] |= ( in[18] << ( 32 - 30 ) ) & 0x3f ;
	out[87] |= ( in[19] << ( 32 - 30 ) ) & 0x3f ;

	out[88] = ( in[16] >> 4 ) & 0x3f ;
	out[89] = ( in[17] >> 4 ) & 0x3f ;
	out[90] = ( in[18] >> 4 ) & 0x3f ;
	out[91] = ( in[19] >> 4 ) & 0x3f ;

	out[92] = ( in[16] >> 10 ) & 0x3f ;
	out[93] = ( in[17] >> 10 ) & 0x3f ;
	out[94] = ( in[18] >> 10 ) & 0x3f ;
	out[95] = ( in[19] >> 10 ) & 0x3f ;

	out[96] = ( in[16] >> 16 ) & 0x3f ;
	out[97] = ( in[17] >> 16 ) & 0x3f ;
	out[98] = ( in[18] >> 16 ) & 0x3f ;
	out[99] = ( in[19] >> 16 ) & 0x3f ;

	out[100] = ( in[16] >> 22 ) & 0x3f ;
	out[101] = ( in[17] >> 22 ) & 0x3f ;
	out[102] = ( in[18] >> 22 ) & 0x3f ;
	out[103] = ( in[19] >> 22 ) & 0x3f ;

	out[104] = ( in[16] >> 28 ) ;
	out[105] = ( in[17] >> 28 ) ;
	out[106] = ( in[18] >> 28 ) ;
	out[107] = ( in[19] >> 28 ) ;

	out[104] |= ( in[20] << ( 32 - 28 ) ) & 0x3f ;
	out[105] |= ( in[21] << ( 32 - 28 ) ) & 0x3f ;
	out[106] |= ( in[22] << ( 32 - 28 ) ) & 0x3f ;
	out[107] |= ( in[23] << ( 32 - 28 ) ) & 0x3f ;

	out[108] = ( in[20] >> 2 ) & 0x3f ;
	out[109] = ( in[21] >> 2 ) & 0x3f ;
	out[110] = ( in[22] >> 2 ) & 0x3f ;
	out[111] = ( in[23] >> 2 ) & 0x3f ;

	out[112] = ( in[20] >> 8 ) & 0x3f ;
	out[113] = ( in[21] >> 8 ) & 0x3f ;
	out[114] = ( in[22] >> 8 ) & 0x3f ;
	out[115] = ( in[23] >> 8 ) & 0x3f ;

	out[116] = ( in[20] >> 14 ) & 0x3f ;
	out[117] = ( in[21] >> 14 ) & 0x3f ;
	out[118] = ( in[22] >> 14 ) & 0x3f ;
	out[119] = ( in[23] >> 14 ) & 0x3f ;

	out[120] = ( in[20] >> 20 ) & 0x3f ;
	out[121] = ( in[21] >> 20 ) & 0x3f ;
	out[122] = ( in[22] >> 20 ) & 0x3f ;
	out[123] = ( in[23] >> 20 ) & 0x3f ;

	out[124] = ( in[20] >> 26 ) ;
	out[125] = ( in[21] >> 26 ) ;
	out[126] = ( in[22] >> 26 ) ;
	out[127] = ( in[23] >> 26 ) ;
}


// 7-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c7(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x7f ;
	out[1] = ( in[1] >> 0 ) & 0x7f ;
	out[2] = ( in[2] >> 0 ) & 0x7f ;
	out[3] = ( in[3] >> 0 ) & 0x7f ;

	out[4] = ( in[0] >> 7 ) & 0x7f ;
	out[5] = ( in[1] >> 7 ) & 0x7f ;
	out[6] = ( in[2] >> 7 ) & 0x7f ;
	out[7] = ( in[3] >> 7 ) & 0x7f ;

	out[8] = ( in[0] >> 14 ) & 0x7f ;
	out[9] = ( in[1] >> 14 ) & 0x7f ;
	out[10] = ( in[2] >> 14 ) & 0x7f ;
	out[11] = ( in[3] >> 14 ) & 0x7f ;

	out[12] = ( in[0] >> 21 ) & 0x7f ;
	out[13] = ( in[1] >> 21 ) & 0x7f ;
	out[14] = ( in[2] >> 21 ) & 0x7f ;
	out[15] = ( in[3] >> 21 ) & 0x7f ;

	out[16] = ( in[0] >> 28 ) ;
	out[17] = ( in[1] >> 28 ) ;
	out[18] = ( in[2] >> 28 ) ;
	out[19] = ( in[3] >> 28 ) ;

	out[16] |= ( in[4] << ( 32 - 28 ) ) & 0x7f ;
	out[17] |= ( in[5] << ( 32 - 28 ) ) & 0x7f ;
	out[18] |= ( in[6] << ( 32 - 28 ) ) & 0x7f ;
	out[19] |= ( in[7] << ( 32 - 28 ) ) & 0x7f ;

	out[20] = ( in[4] >> 3 ) & 0x7f ;
	out[21] = ( in[5] >> 3 ) & 0x7f ;
	out[22] = ( in[6] >> 3 ) & 0x7f ;
	out[23] = ( in[7] >> 3 ) & 0x7f ;

	out[24] = ( in[4] >> 10 ) & 0x7f ;
	out[25] = ( in[5] >> 10 ) & 0x7f ;
	out[26] = ( in[6] >> 10 ) & 0x7f ;
	out[27] = ( in[7] >> 10 ) & 0x7f ;

	out[28] = ( in[4] >> 17 ) & 0x7f ;
	out[29] = ( in[5] >> 17 ) & 0x7f ;
	out[30] = ( in[6] >> 17 ) & 0x7f ;
	out[31] = ( in[7] >> 17 ) & 0x7f ;

	out[32] = ( in[4] >> 24 ) & 0x7f ;
	out[33] = ( in[5] >> 24 ) & 0x7f ;
	out[34] = ( in[6] >> 24 ) & 0x7f ;
	out[35] = ( in[7] >> 24 ) & 0x7f ;

	out[36] = ( in[4] >> 31 ) ;
	out[37] = ( in[5] >> 31 ) ;
	out[38] = ( in[6] >> 31 ) ;
	out[39] = ( in[7] >> 31 ) ;

	out[36] |= ( in[8] << ( 32 - 31 ) ) & 0x7f ;
	out[37] |= ( in[9] << ( 32 - 31 ) ) & 0x7f ;
	out[38] |= ( in[10] << ( 32 - 31 ) ) & 0x7f ;
	out[39] |= ( in[11] << ( 32 - 31 ) ) & 0x7f ;

	out[40] = ( in[8] >> 6 ) & 0x7f ;
	out[41] = ( in[9] >> 6 ) & 0x7f ;
	out[42] = ( in[10] >> 6 ) & 0x7f ;
	out[43] = ( in[11] >> 6 ) & 0x7f ;

	out[44] = ( in[8] >> 13 ) & 0x7f ;
	out[45] = ( in[9] >> 13 ) & 0x7f ;
	out[46] = ( in[10] >> 13 ) & 0x7f ;
	out[47] = ( in[11] >> 13 ) & 0x7f ;

	out[48] = ( in[8] >> 20 ) & 0x7f ;
	out[49] = ( in[9] >> 20 ) & 0x7f ;
	out[50] = ( in[10] >> 20 ) & 0x7f ;
	out[51] = ( in[11] >> 20 ) & 0x7f ;

	out[52] = ( in[8] >> 27 ) ;
	out[53] = ( in[9] >> 27 ) ;
	out[54] = ( in[10] >> 27 ) ;
	out[55] = ( in[11] >> 27 ) ;

	out[52] |= ( in[12] << ( 32 - 27 ) ) & 0x7f ;
	out[53] |= ( in[13] << ( 32 - 27 ) ) & 0x7f ;
	out[54] |= ( in[14] << ( 32 - 27 ) ) & 0x7f ;
	out[55] |= ( in[15] << ( 32 - 27 ) ) & 0x7f ;

	out[56] = ( in[12] >> 2 ) & 0x7f ;
	out[57] = ( in[13] >> 2 ) & 0x7f ;
	out[58] = ( in[14] >> 2 ) & 0x7f ;
	out[59] = ( in[15] >> 2 ) & 0x7f ;

	out[60] = ( in[12] >> 9 ) & 0x7f ;
	out[61] = ( in[13] >> 9 ) & 0x7f ;
	out[62] = ( in[14] >> 9 ) & 0x7f ;
	out[63] = ( in[15] >> 9 ) & 0x7f ;

	out[64] = ( in[12] >> 16 ) & 0x7f ;
	out[65] = ( in[13] >> 16 ) & 0x7f ;
	out[66] = ( in[14] >> 16 ) & 0x7f ;
	out[67] = ( in[15] >> 16 ) & 0x7f ;

	out[68] = ( in[12] >> 23 ) & 0x7f ;
	out[69] = ( in[13] >> 23 ) & 0x7f ;
	out[70] = ( in[14] >> 23 ) & 0x7f ;
	out[71] = ( in[15] >> 23 ) & 0x7f ;

	out[72] = ( in[12] >> 30 ) ;
	out[73] = ( in[13] >> 30 ) ;
	out[74] = ( in[14] >> 30 ) ;
	out[75] = ( in[15] >> 30 ) ;

	out[72] |= ( in[16] << ( 32 - 30 ) ) & 0x7f ;
	out[73] |= ( in[17] << ( 32 - 30 ) ) & 0x7f ;
	out[74] |= ( in[18] << ( 32 - 30 ) ) & 0x7f ;
	out[75] |= ( in[19] << ( 32 - 30 ) ) & 0x7f ;

	out[76] = ( in[16] >> 5 ) & 0x7f ;
	out[77] = ( in[17] >> 5 ) & 0x7f ;
	out[78] = ( in[18] >> 5 ) & 0x7f ;
	out[79] = ( in[19] >> 5 ) & 0x7f ;

	out[80] = ( in[16] >> 12 ) & 0x7f ;
	out[81] = ( in[17] >> 12 ) & 0x7f ;
	out[82] = ( in[18] >> 12 ) & 0x7f ;
	out[83] = ( in[19] >> 12 ) & 0x7f ;

	out[84] = ( in[16] >> 19 ) & 0x7f ;
	out[85] = ( in[17] >> 19 ) & 0x7f ;
	out[86] = ( in[18] >> 19 ) & 0x7f ;
	out[87] = ( in[19] >> 19 ) & 0x7f ;

	out[88] = ( in[16] >> 26 ) ;
	out[89] = ( in[17] >> 26 ) ;
	out[90] = ( in[18] >> 26 ) ;
	out[91] = ( in[19] >> 26 ) ;

	out[88] |= ( in[20] << ( 32 - 26 ) ) & 0x7f ;
	out[89] |= ( in[21] << ( 32 - 26 ) ) & 0x7f ;
	out[90] |= ( in[22] << ( 32 - 26 ) ) & 0x7f ;
	out[91] |= ( in[23] << ( 32 - 26 ) ) & 0x7f ;

	out[92] = ( in[20] >> 1 ) & 0x7f ;
	out[93] = ( in[21] >> 1 ) & 0x7f ;
	out[94] = ( in[22] >> 1 ) & 0x7f ;
	out[95] = ( in[23] >> 1 ) & 0x7f ;

	out[96] = ( in[20] >> 8 ) & 0x7f ;
	out[97] = ( in[21] >> 8 ) & 0x7f ;
	out[98] = ( in[22] >> 8 ) & 0x7f ;
	out[99] = ( in[23] >> 8 ) & 0x7f ;

	out[100] = ( in[20] >> 15 ) & 0x7f ;
	out[101] = ( in[21] >> 15 ) & 0x7f ;
	out[102] = ( in[22] >> 15 ) & 0x7f ;
	out[103] = ( in[23] >> 15 ) & 0x7f ;

	out[104] = ( in[20] >> 22 ) & 0x7f ;
	out[105] = ( in[21] >> 22 ) & 0x7f ;
	out[106] = ( in[22] >> 22 ) & 0x7f ;
	out[107] = ( in[23] >> 22 ) & 0x7f ;

	out[108] = ( in[20] >> 29 ) ;
	out[109] = ( in[21] >> 29 ) ;
	out[110] = ( in[22] >> 29 ) ;
	out[111] = ( in[23] >> 29 ) ;

	out[108] |= ( in[24] << ( 32 - 29 ) ) & 0x7f ;
	out[109] |= ( in[25] << ( 32 - 29 ) ) & 0x7f ;
	out[110] |= ( in[26] << ( 32 - 29 ) ) & 0x7f ;
	out[111] |= ( in[27] << ( 32 - 29 ) ) & 0x7f ;

	out[112] = ( in[24] >> 4 ) & 0x7f ;
	out[113] = ( in[25] >> 4 ) & 0x7f ;
	out[114] = ( in[26] >> 4 ) & 0x7f ;
	out[115] = ( in[27] >> 4 ) & 0x7f ;

	out[116] = ( in[24] >> 11 ) & 0x7f ;
	out[117] = ( in[25] >> 11 ) & 0x7f ;
	out[118] = ( in[26] >> 11 ) & 0x7f ;
	out[119] = ( in[27] >> 11 ) & 0x7f ;

	out[120] = ( in[24] >> 18 ) & 0x7f ;
	out[121] = ( in[25] >> 18 ) & 0x7f ;
	out[122] = ( in[26] >> 18 ) & 0x7f ;
	out[123] = ( in[27] >> 18 ) & 0x7f ;

	out[124] = ( in[24] >> 25 ) ;
	out[125] = ( in[25] >> 25 ) ;
	out[126] = ( in[26] >> 25 ) ;
	out[127] = ( in[27] >> 25 ) ;
}


// 8-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c8(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0xff ;
	out[1] = ( in[1] >> 0 ) & 0xff ;
	out[2] = ( in[2] >> 0 ) & 0xff ;
	out[3] = ( in[3] >> 0 ) & 0xff ;

	out[4] = ( in[0] >> 8 ) & 0xff ;
	out[5] = ( in[1] >> 8 ) & 0xff ;
	out[6] = ( in[2] >> 8 ) & 0xff ;
	out[7] = ( in[3] >> 8 ) & 0xff ;

	out[8] = ( in[0] >> 16 ) & 0xff ;
	out[9] = ( in[1] >> 16 ) & 0xff ;
	out[10] = ( in[2] >> 16 ) & 0xff ;
	out[11] = ( in[3] >> 16 ) & 0xff ;

	out[12] = ( in[0] >> 24 ) ;
	out[13] = ( in[1] >> 24 ) ;
	out[14] = ( in[2] >> 24 ) ;
	out[15] = ( in[3] >> 24 ) ;

	out[16] = ( in[4] >> 0 ) & 0xff ;
	out[17] = ( in[5] >> 0 ) & 0xff ;
	out[18] = ( in[6] >> 0 ) & 0xff ;
	out[19] = ( in[7] >> 0 ) & 0xff ;

	out[20] = ( in[4] >> 8 ) & 0xff ;
	out[21] = ( in[5] >> 8 ) & 0xff ;
	out[22] = ( in[6] >> 8 ) & 0xff ;
	out[23] = ( in[7] >> 8 ) & 0xff ;

	out[24] = ( in[4] >> 16 ) & 0xff ;
	out[25] = ( in[5] >> 16 ) & 0xff ;
	out[26] = ( in[6] >> 16 ) & 0xff ;
	out[27] = ( in[7] >> 16 ) & 0xff ;

	out[28] = ( in[4] >> 24 ) ;
	out[29] = ( in[5] >> 24 ) ;
	out[30] = ( in[6] >> 24 ) ;
	out[31] = ( in[7] >> 24 ) ;

	out[32] = ( in[8] >> 0 ) & 0xff ;
	out[33] = ( in[9] >> 0 ) & 0xff ;
	out[34] = ( in[10] >> 0 ) & 0xff ;
	out[35] = ( in[11] >> 0 ) & 0xff ;

	out[36] = ( in[8] >> 8 ) & 0xff ;
	out[37] = ( in[9] >> 8 ) & 0xff ;
	out[38] = ( in[10] >> 8 ) & 0xff ;
	out[39] = ( in[11] >> 8 ) & 0xff ;

	out[40] = ( in[8] >> 16 ) & 0xff ;
	out[41] = ( in[9] >> 16 ) & 0xff ;
	out[42] = ( in[10] >> 16 ) & 0xff ;
	out[43] = ( in[11] >> 16 ) & 0xff ;

	out[44] = ( in[8] >> 24 ) ;
	out[45] = ( in[9] >> 24 ) ;
	out[46] = ( in[10] >> 24 ) ;
	out[47] = ( in[11] >> 24 ) ;

	out[48] = ( in[12] >> 0 ) & 0xff ;
	out[49] = ( in[13] >> 0 ) & 0xff ;
	out[50] = ( in[14] >> 0 ) & 0xff ;
	out[51] = ( in[15] >> 0 ) & 0xff ;

	out[52] = ( in[12] >> 8 ) & 0xff ;
	out[53] = ( in[13] >> 8 ) & 0xff ;
	out[54] = ( in[14] >> 8 ) & 0xff ;
	out[55] = ( in[15] >> 8 ) & 0xff ;

	out[56] = ( in[12] >> 16 ) & 0xff ;
	out[57] = ( in[13] >> 16 ) & 0xff ;
	out[58] = ( in[14] >> 16 ) & 0xff ;
	out[59] = ( in[15] >> 16 ) & 0xff ;

	out[60] = ( in[12] >> 24 ) ;
	out[61] = ( in[13] >> 24 ) ;
	out[62] = ( in[14] >> 24 ) ;
	out[63] = ( in[15] >> 24 ) ;

	out[64] = ( in[16] >> 0 ) & 0xff ;
	out[65] = ( in[17] >> 0 ) & 0xff ;
	out[66] = ( in[18] >> 0 ) & 0xff ;
	out[67] = ( in[19] >> 0 ) & 0xff ;

	out[68] = ( in[16] >> 8 ) & 0xff ;
	out[69] = ( in[17] >> 8 ) & 0xff ;
	out[70] = ( in[18] >> 8 ) & 0xff ;
	out[71] = ( in[19] >> 8 ) & 0xff ;

	out[72] = ( in[16] >> 16 ) & 0xff ;
	out[73] = ( in[17] >> 16 ) & 0xff ;
	out[74] = ( in[18] >> 16 ) & 0xff ;
	out[75] = ( in[19] >> 16 ) & 0xff ;

	out[76] = ( in[16] >> 24 ) ;
	out[77] = ( in[17] >> 24 ) ;
	out[78] = ( in[18] >> 24 ) ;
	out[79] = ( in[19] >> 24 ) ;

	out[80] = ( in[20] >> 0 ) & 0xff ;
	out[81] = ( in[21] >> 0 ) & 0xff ;
	out[82] = ( in[22] >> 0 ) & 0xff ;
	out[83] = ( in[23] >> 0 ) & 0xff ;

	out[84] = ( in[20] >> 8 ) & 0xff ;
	out[85] = ( in[21] >> 8 ) & 0xff ;
	out[86] = ( in[22] >> 8 ) & 0xff ;
	out[87] = ( in[23] >> 8 ) & 0xff ;

	out[88] = ( in[20] >> 16 ) & 0xff ;
	out[89] = ( in[21] >> 16 ) & 0xff ;
	out[90] = ( in[22] >> 16 ) & 0xff ;
	out[91] = ( in[23] >> 16 ) & 0xff ;

	out[92] = ( in[20] >> 24 ) ;
	out[93] = ( in[21] >> 24 ) ;
	out[94] = ( in[22] >> 24 ) ;
	out[95] = ( in[23] >> 24 ) ;

	out[96] = ( in[24] >> 0 ) & 0xff ;
	out[97] = ( in[25] >> 0 ) & 0xff ;
	out[98] = ( in[26] >> 0 ) & 0xff ;
	out[99] = ( in[27] >> 0 ) & 0xff ;

	out[100] = ( in[24] >> 8 ) & 0xff ;
	out[101] = ( in[25] >> 8 ) & 0xff ;
	out[102] = ( in[26] >> 8 ) & 0xff ;
	out[103] = ( in[27] >> 8 ) & 0xff ;

	out[104] = ( in[24] >> 16 ) & 0xff ;
	out[105] = ( in[25] >> 16 ) & 0xff ;
	out[106] = ( in[26] >> 16 ) & 0xff ;
	out[107] = ( in[27] >> 16 ) & 0xff ;

	out[108] = ( in[24] >> 24 ) ;
	out[109] = ( in[25] >> 24 ) ;
	out[110] = ( in[26] >> 24 ) ;
	out[111] = ( in[27] >> 24 ) ;

	out[112] = ( in[28] >> 0 ) & 0xff ;
	out[113] = ( in[29] >> 0 ) & 0xff ;
	out[114] = ( in[30] >> 0 ) & 0xff ;
	out[115] = ( in[31] >> 0 ) & 0xff ;

	out[116] = ( in[28] >> 8 ) & 0xff ;
	out[117] = ( in[29] >> 8 ) & 0xff ;
	out[118] = ( in[30] >> 8 ) & 0xff ;
	out[119] = ( in[31] >> 8 ) & 0xff ;

	out[120] = ( in[28] >> 16 ) & 0xff ;
	out[121] = ( in[29] >> 16 ) & 0xff ;
	out[122] = ( in[30] >> 16 ) & 0xff ;
	out[123] = ( in[31] >> 16 ) & 0xff ;

	out[124] = ( in[28] >> 24 ) ;
	out[125] = ( in[29] >> 24 ) ;
	out[126] = ( in[30] >> 24 ) ;
	out[127] = ( in[31] >> 24 ) ;
}


// 9-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c9(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x01ff ;
	out[1] = ( in[1] >> 0 ) & 0x01ff ;
	out[2] = ( in[2] >> 0 ) & 0x01ff ;
	out[3] = ( in[3] >> 0 ) & 0x01ff ;

	out[4] = ( in[0] >> 9 ) & 0x01ff ;
	out[5] = ( in[1] >> 9 ) & 0x01ff ;
	out[6] = ( in[2] >> 9 ) & 0x01ff ;
	out[7] = ( in[3] >> 9 ) & 0x01ff ;

	out[8] = ( in[0] >> 18 ) & 0x01ff ;
	out[9] = ( in[1] >> 18 ) & 0x01ff ;
	out[10] = ( in[2] >> 18 ) & 0x01ff ;
	out[11] = ( in[3] >> 18 ) & 0x01ff ;

	out[12] = ( in[0] >> 27 ) ;
	out[13] = ( in[1] >> 27 ) ;
	out[14] = ( in[2] >> 27 ) ;
	out[15] = ( in[3] >> 27 ) ;

	out[12] |= ( in[4] << ( 32 - 27 ) ) & 0x01ff ;
	out[13] |= ( in[5] << ( 32 - 27 ) ) & 0x01ff ;
	out[14] |= ( in[6] << ( 32 - 27 ) ) & 0x01ff ;
	out[15] |= ( in[7] << ( 32 - 27 ) ) & 0x01ff ;

	out[16] = ( in[4] >> 4 ) & 0x01ff ;
	out[17] = ( in[5] >> 4 ) & 0x01ff ;
	out[18] = ( in[6] >> 4 ) & 0x01ff ;
	out[19] = ( in[7] >> 4 ) & 0x01ff ;

	out[20] = ( in[4] >> 13 ) & 0x01ff ;
	out[21] = ( in[5] >> 13 ) & 0x01ff ;
	out[22] = ( in[6] >> 13 ) & 0x01ff ;
	out[23] = ( in[7] >> 13 ) & 0x01ff ;

	out[24] = ( in[4] >> 22 ) & 0x01ff ;
	out[25] = ( in[5] >> 22 ) & 0x01ff ;
	out[26] = ( in[6] >> 22 ) & 0x01ff ;
	out[27] = ( in[7] >> 22 ) & 0x01ff ;

	out[28] = ( in[4] >> 31 ) ;
	out[29] = ( in[5] >> 31 ) ;
	out[30] = ( in[6] >> 31 ) ;
	out[31] = ( in[7] >> 31 ) ;

	out[28] |= ( in[8] << ( 32 - 31 ) ) & 0x01ff ;
	out[29] |= ( in[9] << ( 32 - 31 ) ) & 0x01ff ;
	out[30] |= ( in[10] << ( 32 - 31 ) ) & 0x01ff ;
	out[31] |= ( in[11] << ( 32 - 31 ) ) & 0x01ff ;

	out[32] = ( in[8] >> 8 ) & 0x01ff ;
	out[33] = ( in[9] >> 8 ) & 0x01ff ;
	out[34] = ( in[10] >> 8 ) & 0x01ff ;
	out[35] = ( in[11] >> 8 ) & 0x01ff ;

	out[36] = ( in[8] >> 17 ) & 0x01ff ;
	out[37] = ( in[9] >> 17 ) & 0x01ff ;
	out[38] = ( in[10] >> 17 ) & 0x01ff ;
	out[39] = ( in[11] >> 17 ) & 0x01ff ;

	out[40] = ( in[8] >> 26 ) ;
	out[41] = ( in[9] >> 26 ) ;
	out[42] = ( in[10] >> 26 ) ;
	out[43] = ( in[11] >> 26 ) ;

	out[40] |= ( in[12] << ( 32 - 26 ) ) & 0x01ff ;
	out[41] |= ( in[13] << ( 32 - 26 ) ) & 0x01ff ;
	out[42] |= ( in[14] << ( 32 - 26 ) ) & 0x01ff ;
	out[43] |= ( in[15] << ( 32 - 26 ) ) & 0x01ff ;

	out[44] = ( in[12] >> 3 ) & 0x01ff ;
	out[45] = ( in[13] >> 3 ) & 0x01ff ;
	out[46] = ( in[14] >> 3 ) & 0x01ff ;
	out[47] = ( in[15] >> 3 ) & 0x01ff ;

	out[48] = ( in[12] >> 12 ) & 0x01ff ;
	out[49] = ( in[13] >> 12 ) & 0x01ff ;
	out[50] = ( in[14] >> 12 ) & 0x01ff ;
	out[51] = ( in[15] >> 12 ) & 0x01ff ;

	out[52] = ( in[12] >> 21 ) & 0x01ff ;
	out[53] = ( in[13] >> 21 ) & 0x01ff ;
	out[54] = ( in[14] >> 21 ) & 0x01ff ;
	out[55] = ( in[15] >> 21 ) & 0x01ff ;

	out[56] = ( in[12] >> 30 ) ;
	out[57] = ( in[13] >> 30 ) ;
	out[58] = ( in[14] >> 30 ) ;
	out[59] = ( in[15] >> 30 ) ;

	out[56] |= ( in[16] << ( 32 - 30 ) ) & 0x01ff ;
	out[57] |= ( in[17] << ( 32 - 30 ) ) & 0x01ff ;
	out[58] |= ( in[18] << ( 32 - 30 ) ) & 0x01ff ;
	out[59] |= ( in[19] << ( 32 - 30 ) ) & 0x01ff ;

	out[60] = ( in[16] >> 7 ) & 0x01ff ;
	out[61] = ( in[17] >> 7 ) & 0x01ff ;
	out[62] = ( in[18] >> 7 ) & 0x01ff ;
	out[63] = ( in[19] >> 7 ) & 0x01ff ;

	out[64] = ( in[16] >> 16 ) & 0x01ff ;
	out[65] = ( in[17] >> 16 ) & 0x01ff ;
	out[66] = ( in[18] >> 16 ) & 0x01ff ;
	out[67] = ( in[19] >> 16 ) & 0x01ff ;

	out[68] = ( in[16] >> 25 ) ;
	out[69] = ( in[17] >> 25 ) ;
	out[70] = ( in[18] >> 25 ) ;
	out[71] = ( in[19] >> 25 ) ;

	out[68] |= ( in[20] << ( 32 - 25 ) ) & 0x01ff ;
	out[69] |= ( in[21] << ( 32 - 25 ) ) & 0x01ff ;
	out[70] |= ( in[22] << ( 32 - 25 ) ) & 0x01ff ;
	out[71] |= ( in[23] << ( 32 - 25 ) ) & 0x01ff ;

	out[72] = ( in[20] >> 2 ) & 0x01ff ;
	out[73] = ( in[21] >> 2 ) & 0x01ff ;
	out[74] = ( in[22] >> 2 ) & 0x01ff ;
	out[75] = ( in[23] >> 2 ) & 0x01ff ;

	out[76] = ( in[20] >> 11 ) & 0x01ff ;
	out[77] = ( in[21] >> 11 ) & 0x01ff ;
	out[78] = ( in[22] >> 11 ) & 0x01ff ;
	out[79] = ( in[23] >> 11 ) & 0x01ff ;

	out[80] = ( in[20] >> 20 ) & 0x01ff ;
	out[81] = ( in[21] >> 20 ) & 0x01ff ;
	out[82] = ( in[22] >> 20 ) & 0x01ff ;
	out[83] = ( in[23] >> 20 ) & 0x01ff ;

	out[84] = ( in[20] >> 29 ) ;
	out[85] = ( in[21] >> 29 ) ;
	out[86] = ( in[22] >> 29 ) ;
	out[87] = ( in[23] >> 29 ) ;

	out[84] |= ( in[24] << ( 32 - 29 ) ) & 0x01ff ;
	out[85] |= ( in[25] << ( 32 - 29 ) ) & 0x01ff ;
	out[86] |= ( in[26] << ( 32 - 29 ) ) & 0x01ff ;
	out[87] |= ( in[27] << ( 32 - 29 ) ) & 0x01ff ;

	out[88] = ( in[24] >> 6 ) & 0x01ff ;
	out[89] = ( in[25] >> 6 ) & 0x01ff ;
	out[90] = ( in[26] >> 6 ) & 0x01ff ;
	out[91] = ( in[27] >> 6 ) & 0x01ff ;

	out[92] = ( in[24] >> 15 ) & 0x01ff ;
	out[93] = ( in[25] >> 15 ) & 0x01ff ;
	out[94] = ( in[26] >> 15 ) & 0x01ff ;
	out[95] = ( in[27] >> 15 ) & 0x01ff ;

	out[96] = ( in[24] >> 24 ) ;
	out[97] = ( in[25] >> 24 ) ;
	out[98] = ( in[26] >> 24 ) ;
	out[99] = ( in[27] >> 24 ) ;

	out[96] |= ( in[28] << ( 32 - 24 ) ) & 0x01ff ;
	out[97] |= ( in[29] << ( 32 - 24 ) ) & 0x01ff ;
	out[98] |= ( in[30] << ( 32 - 24 ) ) & 0x01ff ;
	out[99] |= ( in[31] << ( 32 - 24 ) ) & 0x01ff ;

	out[100] = ( in[28] >> 1 ) & 0x01ff ;
	out[101] = ( in[29] >> 1 ) & 0x01ff ;
	out[102] = ( in[30] >> 1 ) & 0x01ff ;
	out[103] = ( in[31] >> 1 ) & 0x01ff ;

	out[104] = ( in[28] >> 10 ) & 0x01ff ;
	out[105] = ( in[29] >> 10 ) & 0x01ff ;
	out[106] = ( in[30] >> 10 ) & 0x01ff ;
	out[107] = ( in[31] >> 10 ) & 0x01ff ;

	out[108] = ( in[28] >> 19 ) & 0x01ff ;
	out[109] = ( in[29] >> 19 ) & 0x01ff ;
	out[110] = ( in[30] >> 19 ) & 0x01ff ;
	out[111] = ( in[31] >> 19 ) & 0x01ff ;

	out[112] = ( in[28] >> 28 ) ;
	out[113] = ( in[29] >> 28 ) ;
	out[114] = ( in[30] >> 28 ) ;
	out[115] = ( in[31] >> 28 ) ;

	out[112] |= ( in[32] << ( 32 - 28 ) ) & 0x01ff ;
	out[113] |= ( in[33] << ( 32 - 28 ) ) & 0x01ff ;
	out[114] |= ( in[34] << ( 32 - 28 ) ) & 0x01ff ;
	out[115] |= ( in[35] << ( 32 - 28 ) ) & 0x01ff ;

	out[116] = ( in[32] >> 5 ) & 0x01ff ;
	out[117] = ( in[33] >> 5 ) & 0x01ff ;
	out[118] = ( in[34] >> 5 ) & 0x01ff ;
	out[119] = ( in[35] >> 5 ) & 0x01ff ;

	out[120] = ( in[32] >> 14 ) & 0x01ff ;
	out[121] = ( in[33] >> 14 ) & 0x01ff ;
	out[122] = ( in[34] >> 14 ) & 0x01ff ;
	out[123] = ( in[35] >> 14 ) & 0x01ff ;

	out[124] = ( in[32] >> 23 ) ;
	out[125] = ( in[33] >> 23 ) ;
	out[126] = ( in[34] >> 23 ) ;
	out[127] = ( in[35] >> 23 ) ;
}


// 10-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c10(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x03ff ;
	out[1] = ( in[1] >> 0 ) & 0x03ff ;
	out[2] = ( in[2] >> 0 ) & 0x03ff ;
	out[3] = ( in[3] >> 0 ) & 0x03ff ;

	out[4] = ( in[0] >> 10 ) & 0x03ff ;
	out[5] = ( in[1] >> 10 ) & 0x03ff ;
	out[6] = ( in[2] >> 10 ) & 0x03ff ;
	out[7] = ( in[3] >> 10 ) & 0x03ff ;

	out[8] = ( in[0] >> 20 ) & 0x03ff ;
	out[9] = ( in[1] >> 20 ) & 0x03ff ;
	out[10] = ( in[2] >> 20 ) & 0x03ff ;
	out[11] = ( in[3] >> 20 ) & 0x03ff ;

	out[12] = ( in[0] >> 30 ) ;
	out[13] = ( in[1] >> 30 ) ;
	out[14] = ( in[2] >> 30 ) ;
	out[15] = ( in[3] >> 30 ) ;

	out[12] |= ( in[4] << ( 32 - 30 ) ) & 0x03ff ;
	out[13] |= ( in[5] << ( 32 - 30 ) ) & 0x03ff ;
	out[14] |= ( in[6] << ( 32 - 30 ) ) & 0x03ff ;
	out[15] |= ( in[7] << ( 32 - 30 ) ) & 0x03ff ;

	out[16] = ( in[4] >> 8 ) & 0x03ff ;
	out[17] = ( in[5] >> 8 ) & 0x03ff ;
	out[18] = ( in[6] >> 8 ) & 0x03ff ;
	out[19] = ( in[7] >> 8 ) & 0x03ff ;

	out[20] = ( in[4] >> 18 ) & 0x03ff ;
	out[21] = ( in[5] >> 18 ) & 0x03ff ;
	out[22] = ( in[6] >> 18 ) & 0x03ff ;
	out[23] = ( in[7] >> 18 ) & 0x03ff ;

	out[24] = ( in[4] >> 28 ) ;
	out[25] = ( in[5] >> 28 ) ;
	out[26] = ( in[6] >> 28 ) ;
	out[27] = ( in[7] >> 28 ) ;

	out[24] |= ( in[8] << ( 32 - 28 ) ) & 0x03ff ;
	out[25] |= ( in[9] << ( 32 - 28 ) ) & 0x03ff ;
	out[26] |= ( in[10] << ( 32 - 28 ) ) & 0x03ff ;
	out[27] |= ( in[11] << ( 32 - 28 ) ) & 0x03ff ;

	out[28] = ( in[8] >> 6 ) & 0x03ff ;
	out[29] = ( in[9] >> 6 ) & 0x03ff ;
	out[30] = ( in[10] >> 6 ) & 0x03ff ;
	out[31] = ( in[11] >> 6 ) & 0x03ff ;

	out[32] = ( in[8] >> 16 ) & 0x03ff ;
	out[33] = ( in[9] >> 16 ) & 0x03ff ;
	out[34] = ( in[10] >> 16 ) & 0x03ff ;
	out[35] = ( in[11] >> 16 ) & 0x03ff ;

	out[36] = ( in[8] >> 26 ) ;
	out[37] = ( in[9] >> 26 ) ;
	out[38] = ( in[10] >> 26 ) ;
	out[39] = ( in[11] >> 26 ) ;

	out[36] |= ( in[12] << ( 32 - 26 ) ) & 0x03ff ;
	out[37] |= ( in[13] << ( 32 - 26 ) ) & 0x03ff ;
	out[38] |= ( in[14] << ( 32 - 26 ) ) & 0x03ff ;
	out[39] |= ( in[15] << ( 32 - 26 ) ) & 0x03ff ;

	out[40] = ( in[12] >> 4 ) & 0x03ff ;
	out[41] = ( in[13] >> 4 ) & 0x03ff ;
	out[42] = ( in[14] >> 4 ) & 0x03ff ;
	out[43] = ( in[15] >> 4 ) & 0x03ff ;

	out[44] = ( in[12] >> 14 ) & 0x03ff ;
	out[45] = ( in[13] >> 14 ) & 0x03ff ;
	out[46] = ( in[14] >> 14 ) & 0x03ff ;
	out[47] = ( in[15] >> 14 ) & 0x03ff ;

	out[48] = ( in[12] >> 24 ) ;
	out[49] = ( in[13] >> 24 ) ;
	out[50] = ( in[14] >> 24 ) ;
	out[51] = ( in[15] >> 24 ) ;

	out[48] |= ( in[16] << ( 32 - 24 ) ) & 0x03ff ;
	out[49] |= ( in[17] << ( 32 - 24 ) ) & 0x03ff ;
	out[50] |= ( in[18] << ( 32 - 24 ) ) & 0x03ff ;
	out[51] |= ( in[19] << ( 32 - 24 ) ) & 0x03ff ;

	out[52] = ( in[16] >> 2 ) & 0x03ff ;
	out[53] = ( in[17] >> 2 ) & 0x03ff ;
	out[54] = ( in[18] >> 2 ) & 0x03ff ;
	out[55] = ( in[19] >> 2 ) & 0x03ff ;

	out[56] = ( in[16] >> 12 ) & 0x03ff ;
	out[57] = ( in[17] >> 12 ) & 0x03ff ;
	out[58] = ( in[18] >> 12 ) & 0x03ff ;
	out[59] = ( in[19] >> 12 ) & 0x03ff ;

	out[60] = ( in[16] >> 22 ) ;
	out[61] = ( in[17] >> 22 ) ;
	out[62] = ( in[18] >> 22 ) ;
	out[63] = ( in[19] >> 22 ) ;

	out[64] = ( in[20] >> 0 ) & 0x03ff ;
	out[65] = ( in[21] >> 0 ) & 0x03ff ;
	out[66] = ( in[22] >> 0 ) & 0x03ff ;
	out[67] = ( in[23] >> 0 ) & 0x03ff ;

	out[68] = ( in[20] >> 10 ) & 0x03ff ;
	out[69] = ( in[21] >> 10 ) & 0x03ff ;
	out[70] = ( in[22] >> 10 ) & 0x03ff ;
	out[71] = ( in[23] >> 10 ) & 0x03ff ;

	out[72] = ( in[20] >> 20 ) & 0x03ff ;
	out[73] = ( in[21] >> 20 ) & 0x03ff ;
	out[74] = ( in[22] >> 20 ) & 0x03ff ;
	out[75] = ( in[23] >> 20 ) & 0x03ff ;

	out[76] = ( in[20] >> 30 ) ;
	out[77] = ( in[21] >> 30 ) ;
	out[78] = ( in[22] >> 30 ) ;
	out[79] = ( in[23] >> 30 ) ;

	out[76] |= ( in[24] << ( 32 - 30 ) ) & 0x03ff ;
	out[77] |= ( in[25] << ( 32 - 30 ) ) & 0x03ff ;
	out[78] |= ( in[26] << ( 32 - 30 ) ) & 0x03ff ;
	out[79] |= ( in[27] << ( 32 - 30 ) ) & 0x03ff ;

	out[80] = ( in[24] >> 8 ) & 0x03ff ;
	out[81] = ( in[25] >> 8 ) & 0x03ff ;
	out[82] = ( in[26] >> 8 ) & 0x03ff ;
	out[83] = ( in[27] >> 8 ) & 0x03ff ;

	out[84] = ( in[24] >> 18 ) & 0x03ff ;
	out[85] = ( in[25] >> 18 ) & 0x03ff ;
	out[86] = ( in[26] >> 18 ) & 0x03ff ;
	out[87] = ( in[27] >> 18 ) & 0x03ff ;

	out[88] = ( in[24] >> 28 ) ;
	out[89] = ( in[25] >> 28 ) ;
	out[90] = ( in[26] >> 28 ) ;
	out[91] = ( in[27] >> 28 ) ;

	out[88] |= ( in[28] << ( 32 - 28 ) ) & 0x03ff ;
	out[89] |= ( in[29] << ( 32 - 28 ) ) & 0x03ff ;
	out[90] |= ( in[30] << ( 32 - 28 ) ) & 0x03ff ;
	out[91] |= ( in[31] << ( 32 - 28 ) ) & 0x03ff ;

	out[92] = ( in[28] >> 6 ) & 0x03ff ;
	out[93] = ( in[29] >> 6 ) & 0x03ff ;
	out[94] = ( in[30] >> 6 ) & 0x03ff ;
	out[95] = ( in[31] >> 6 ) & 0x03ff ;

	out[96] = ( in[28] >> 16 ) & 0x03ff ;
	out[97] = ( in[29] >> 16 ) & 0x03ff ;
	out[98] = ( in[30] >> 16 ) & 0x03ff ;
	out[99] = ( in[31] >> 16 ) & 0x03ff ;

	out[100] = ( in[28] >> 26 ) ;
	out[101] = ( in[29] >> 26 ) ;
	out[102] = ( in[30] >> 26 ) ;
	out[103] = ( in[31] >> 26 ) ;

	out[100] |= ( in[32] << ( 32 - 26 ) ) & 0x03ff ;
	out[101] |= ( in[33] << ( 32 - 26 ) ) & 0x03ff ;
	out[102] |= ( in[34] << ( 32 - 26 ) ) & 0x03ff ;
	out[103] |= ( in[35] << ( 32 - 26 ) ) & 0x03ff ;

	out[104] = ( in[32] >> 4 ) & 0x03ff ;
	out[105] = ( in[33] >> 4 ) & 0x03ff ;
	out[106] = ( in[34] >> 4 ) & 0x03ff ;
	out[107] = ( in[35] >> 4 ) & 0x03ff ;

	out[108] = ( in[32] >> 14 ) & 0x03ff ;
	out[109] = ( in[33] >> 14 ) & 0x03ff ;
	out[110] = ( in[34] >> 14 ) & 0x03ff ;
	out[111] = ( in[35] >> 14 ) & 0x03ff ;

	out[112] = ( in[32] >> 24 ) ;
	out[113] = ( in[33] >> 24 ) ;
	out[114] = ( in[34] >> 24 ) ;
	out[115] = ( in[35] >> 24 ) ;

	out[112] |= ( in[36] << ( 32 - 24 ) ) & 0x03ff ;
	out[113] |= ( in[37] << ( 32 - 24 ) ) & 0x03ff ;
	out[114] |= ( in[38] << ( 32 - 24 ) ) & 0x03ff ;
	out[115] |= ( in[39] << ( 32 - 24 ) ) & 0x03ff ;

	out[116] = ( in[36] >> 2 ) & 0x03ff ;
	out[117] = ( in[37] >> 2 ) & 0x03ff ;
	out[118] = ( in[38] >> 2 ) & 0x03ff ;
	out[119] = ( in[39] >> 2 ) & 0x03ff ;

	out[120] = ( in[36] >> 12 ) & 0x03ff ;
	out[121] = ( in[37] >> 12 ) & 0x03ff ;
	out[122] = ( in[38] >> 12 ) & 0x03ff ;
	out[123] = ( in[39] >> 12 ) & 0x03ff ;

	out[124] = ( in[36] >> 22 ) ;
	out[125] = ( in[37] >> 22 ) ;
	out[126] = ( in[38] >> 22 ) ;
	out[127] = ( in[39] >> 22 ) ;
}


// 11-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c11(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x07ff ;
	out[1] = ( in[1] >> 0 ) & 0x07ff ;
	out[2] = ( in[2] >> 0 ) & 0x07ff ;
	out[3] = ( in[3] >> 0 ) & 0x07ff ;

	out[4] = ( in[0] >> 11 ) & 0x07ff ;
	out[5] = ( in[1] >> 11 ) & 0x07ff ;
	out[6] = ( in[2] >> 11 ) & 0x07ff ;
	out[7] = ( in[3] >> 11 ) & 0x07ff ;

	out[8] = ( in[0] >> 22 ) ;
	out[9] = ( in[1] >> 22 ) ;
	out[10] = ( in[2] >> 22 ) ;
	out[11] = ( in[3] >> 22 ) ;

	out[8] |= ( in[4] << ( 32 - 22 ) ) & 0x07ff ;
	out[9] |= ( in[5] << ( 32 - 22 ) ) & 0x07ff ;
	out[10] |= ( in[6] << ( 32 - 22 ) ) & 0x07ff ;
	out[11] |= ( in[7] << ( 32 - 22 ) ) & 0x07ff ;

	out[12] = ( in[4] >> 1 ) & 0x07ff ;
	out[13] = ( in[5] >> 1 ) & 0x07ff ;
	out[14] = ( in[6] >> 1 ) & 0x07ff ;
	out[15] = ( in[7] >> 1 ) & 0x07ff ;

	out[16] = ( in[4] >> 12 ) & 0x07ff ;
	out[17] = ( in[5] >> 12 ) & 0x07ff ;
	out[18] = ( in[6] >> 12 ) & 0x07ff ;
	out[19] = ( in[7] >> 12 ) & 0x07ff ;

	out[20] = ( in[4] >> 23 ) ;
	out[21] = ( in[5] >> 23 ) ;
	out[22] = ( in[6] >> 23 ) ;
	out[23] = ( in[7] >> 23 ) ;

	out[20] |= ( in[8] << ( 32 - 23 ) ) & 0x07ff ;
	out[21] |= ( in[9] << ( 32 - 23 ) ) & 0x07ff ;
	out[22] |= ( in[10] << ( 32 - 23 ) ) & 0x07ff ;
	out[23] |= ( in[11] << ( 32 - 23 ) ) & 0x07ff ;

	out[24] = ( in[8] >> 2 ) & 0x07ff ;
	out[25] = ( in[9] >> 2 ) & 0x07ff ;
	out[26] = ( in[10] >> 2 ) & 0x07ff ;
	out[27] = ( in[11] >> 2 ) & 0x07ff ;

	out[28] = ( in[8] >> 13 ) & 0x07ff ;
	out[29] = ( in[9] >> 13 ) & 0x07ff ;
	out[30] = ( in[10] >> 13 ) & 0x07ff ;
	out[31] = ( in[11] >> 13 ) & 0x07ff ;

	out[32] = ( in[8] >> 24 ) ;
	out[33] = ( in[9] >> 24 ) ;
	out[34] = ( in[10] >> 24 ) ;
	out[35] = ( in[11] >> 24 ) ;

	out[32] |= ( in[12] << ( 32 - 24 ) ) & 0x07ff ;
	out[33] |= ( in[13] << ( 32 - 24 ) ) & 0x07ff ;
	out[34] |= ( in[14] << ( 32 - 24 ) ) & 0x07ff ;
	out[35] |= ( in[15] << ( 32 - 24 ) ) & 0x07ff ;

	out[36] = ( in[12] >> 3 ) & 0x07ff ;
	out[37] = ( in[13] >> 3 ) & 0x07ff ;
	out[38] = ( in[14] >> 3 ) & 0x07ff ;
	out[39] = ( in[15] >> 3 ) & 0x07ff ;

	out[40] = ( in[12] >> 14 ) & 0x07ff ;
	out[41] = ( in[13] >> 14 ) & 0x07ff ;
	out[42] = ( in[14] >> 14 ) & 0x07ff ;
	out[43] = ( in[15] >> 14 ) & 0x07ff ;

	out[44] = ( in[12] >> 25 ) ;
	out[45] = ( in[13] >> 25 ) ;
	out[46] = ( in[14] >> 25 ) ;
	out[47] = ( in[15] >> 25 ) ;

	out[44] |= ( in[16] << ( 32 - 25 ) ) & 0x07ff ;
	out[45] |= ( in[17] << ( 32 - 25 ) ) & 0x07ff ;
	out[46] |= ( in[18] << ( 32 - 25 ) ) & 0x07ff ;
	out[47] |= ( in[19] << ( 32 - 25 ) ) & 0x07ff ;

	out[48] = ( in[16] >> 4 ) & 0x07ff ;
	out[49] = ( in[17] >> 4 ) & 0x07ff ;
	out[50] = ( in[18] >> 4 ) & 0x07ff ;
	out[51] = ( in[19] >> 4 ) & 0x07ff ;

	out[52] = ( in[16] >> 15 ) & 0x07ff ;
	out[53] = ( in[17] >> 15 ) & 0x07ff ;
	out[54] = ( in[18] >> 15 ) & 0x07ff ;
	out[55] = ( in[19] >> 15 ) & 0x07ff ;

	out[56] = ( in[16] >> 26 ) ;
	out[57] = ( in[17] >> 26 ) ;
	out[58] = ( in[18] >> 26 ) ;
	out[59] = ( in[19] >> 26 ) ;

	out[56] |= ( in[20] << ( 32 - 26 ) ) & 0x07ff ;
	out[57] |= ( in[21] << ( 32 - 26 ) ) & 0x07ff ;
	out[58] |= ( in[22] << ( 32 - 26 ) ) & 0x07ff ;
	out[59] |= ( in[23] << ( 32 - 26 ) ) & 0x07ff ;

	out[60] = ( in[20] >> 5 ) & 0x07ff ;
	out[61] = ( in[21] >> 5 ) & 0x07ff ;
	out[62] = ( in[22] >> 5 ) & 0x07ff ;
	out[63] = ( in[23] >> 5 ) & 0x07ff ;

	out[64] = ( in[20] >> 16 ) & 0x07ff ;
	out[65] = ( in[21] >> 16 ) & 0x07ff ;
	out[66] = ( in[22] >> 16 ) & 0x07ff ;
	out[67] = ( in[23] >> 16 ) & 0x07ff ;

	out[68] = ( in[20] >> 27 ) ;
	out[69] = ( in[21] >> 27 ) ;
	out[70] = ( in[22] >> 27 ) ;
	out[71] = ( in[23] >> 27 ) ;

	out[68] |= ( in[24] << ( 32 - 27 ) ) & 0x07ff ;
	out[69] |= ( in[25] << ( 32 - 27 ) ) & 0x07ff ;
	out[70] |= ( in[26] << ( 32 - 27 ) ) & 0x07ff ;
	out[71] |= ( in[27] << ( 32 - 27 ) ) & 0x07ff ;

	out[72] = ( in[24] >> 6 ) & 0x07ff ;
	out[73] = ( in[25] >> 6 ) & 0x07ff ;
	out[74] = ( in[26] >> 6 ) & 0x07ff ;
	out[75] = ( in[27] >> 6 ) & 0x07ff ;

	out[76] = ( in[24] >> 17 ) & 0x07ff ;
	out[77] = ( in[25] >> 17 ) & 0x07ff ;
	out[78] = ( in[26] >> 17 ) & 0x07ff ;
	out[79] = ( in[27] >> 17 ) & 0x07ff ;

	out[80] = ( in[24] >> 28 ) ;
	out[81] = ( in[25] >> 28 ) ;
	out[82] = ( in[26] >> 28 ) ;
	out[83] = ( in[27] >> 28 ) ;

	out[80] |= ( in[28] << ( 32 - 28 ) ) & 0x07ff ;
	out[81] |= ( in[29] << ( 32 - 28 ) ) & 0x07ff ;
	out[82] |= ( in[30] << ( 32 - 28 ) ) & 0x07ff ;
	out[83] |= ( in[31] << ( 32 - 28 ) ) & 0x07ff ;

	out[84] = ( in[28] >> 7 ) & 0x07ff ;
	out[85] = ( in[29] >> 7 ) & 0x07ff ;
	out[86] = ( in[30] >> 7 ) & 0x07ff ;
	out[87] = ( in[31] >> 7 ) & 0x07ff ;

	out[88] = ( in[28] >> 18 ) & 0x07ff ;
	out[89] = ( in[29] >> 18 ) & 0x07ff ;
	out[90] = ( in[30] >> 18 ) & 0x07ff ;
	out[91] = ( in[31] >> 18 ) & 0x07ff ;

	out[92] = ( in[28] >> 29 ) ;
	out[93] = ( in[29] >> 29 ) ;
	out[94] = ( in[30] >> 29 ) ;
	out[95] = ( in[31] >> 29 ) ;

	out[92] |= ( in[32] << ( 32 - 29 ) ) & 0x07ff ;
	out[93] |= ( in[33] << ( 32 - 29 ) ) & 0x07ff ;
	out[94] |= ( in[34] << ( 32 - 29 ) ) & 0x07ff ;
	out[95] |= ( in[35] << ( 32 - 29 ) ) & 0x07ff ;

	out[96] = ( in[32] >> 8 ) & 0x07ff ;
	out[97] = ( in[33] >> 8 ) & 0x07ff ;
	out[98] = ( in[34] >> 8 ) & 0x07ff ;
	out[99] = ( in[35] >> 8 ) & 0x07ff ;

	out[100] = ( in[32] >> 19 ) & 0x07ff ;
	out[101] = ( in[33] >> 19 ) & 0x07ff ;
	out[102] = ( in[34] >> 19 ) & 0x07ff ;
	out[103] = ( in[35] >> 19 ) & 0x07ff ;

	out[104] = ( in[32] >> 30 ) ;
	out[105] = ( in[33] >> 30 ) ;
	out[106] = ( in[34] >> 30 ) ;
	out[107] = ( in[35] >> 30 ) ;

	out[104] |= ( in[36] << ( 32 - 30 ) ) & 0x07ff ;
	out[105] |= ( in[37] << ( 32 - 30 ) ) & 0x07ff ;
	out[106] |= ( in[38] << ( 32 - 30 ) ) & 0x07ff ;
	out[107] |= ( in[39] << ( 32 - 30 ) ) & 0x07ff ;

	out[108] = ( in[36] >> 9 ) & 0x07ff ;
	out[109] = ( in[37] >> 9 ) & 0x07ff ;
	out[110] = ( in[38] >> 9 ) & 0x07ff ;
	out[111] = ( in[39] >> 9 ) & 0x07ff ;

	out[112] = ( in[36] >> 20 ) & 0x07ff ;
	out[113] = ( in[37] >> 20 ) & 0x07ff ;
	out[114] = ( in[38] >> 20 ) & 0x07ff ;
	out[115] = ( in[39] >> 20 ) & 0x07ff ;

	out[116] = ( in[36] >> 31 ) ;
	out[117] = ( in[37] >> 31 ) ;
	out[118] = ( in[38] >> 31 ) ;
	out[119] = ( in[39] >> 31 ) ;

	out[116] |= ( in[40] << ( 32 - 31 ) ) & 0x07ff ;
	out[117] |= ( in[41] << ( 32 - 31 ) ) & 0x07ff ;
	out[118] |= ( in[42] << ( 32 - 31 ) ) & 0x07ff ;
	out[119] |= ( in[43] << ( 32 - 31 ) ) & 0x07ff ;

	out[120] = ( in[40] >> 10 ) & 0x07ff ;
	out[121] = ( in[41] >> 10 ) & 0x07ff ;
	out[122] = ( in[42] >> 10 ) & 0x07ff ;
	out[123] = ( in[43] >> 10 ) & 0x07ff ;

	out[124] = ( in[40] >> 21 ) ;
	out[125] = ( in[41] >> 21 ) ;
	out[126] = ( in[42] >> 21 ) ;
	out[127] = ( in[43] >> 21 ) ;
}


// 12-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c12(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x0fff ;
	out[1] = ( in[1] >> 0 ) & 0x0fff ;
	out[2] = ( in[2] >> 0 ) & 0x0fff ;
	out[3] = ( in[3] >> 0 ) & 0x0fff ;

	out[4] = ( in[0] >> 12 ) & 0x0fff ;
	out[5] = ( in[1] >> 12 ) & 0x0fff ;
	out[6] = ( in[2] >> 12 ) & 0x0fff ;
	out[7] = ( in[3] >> 12 ) & 0x0fff ;

	out[8] = ( in[0] >> 24 ) ;
	out[9] = ( in[1] >> 24 ) ;
	out[10] = ( in[2] >> 24 ) ;
	out[11] = ( in[3] >> 24 ) ;

	out[8] |= ( in[4] << ( 32 - 24 ) ) & 0x0fff ;
	out[9] |= ( in[5] << ( 32 - 24 ) ) & 0x0fff ;
	out[10] |= ( in[6] << ( 32 - 24 ) ) & 0x0fff ;
	out[11] |= ( in[7] << ( 32 - 24 ) ) & 0x0fff ;

	out[12] = ( in[4] >> 4 ) & 0x0fff ;
	out[13] = ( in[5] >> 4 ) & 0x0fff ;
	out[14] = ( in[6] >> 4 ) & 0x0fff ;
	out[15] = ( in[7] >> 4 ) & 0x0fff ;

	out[16] = ( in[4] >> 16 ) & 0x0fff ;
	out[17] = ( in[5] >> 16 ) & 0x0fff ;
	out[18] = ( in[6] >> 16 ) & 0x0fff ;
	out[19] = ( in[7] >> 16 ) & 0x0fff ;

	out[20] = ( in[4] >> 28 ) ;
	out[21] = ( in[5] >> 28 ) ;
	out[22] = ( in[6] >> 28 ) ;
	out[23] = ( in[7] >> 28 ) ;

	out[20] |= ( in[8] << ( 32 - 28 ) ) & 0x0fff ;
	out[21] |= ( in[9] << ( 32 - 28 ) ) & 0x0fff ;
	out[22] |= ( in[10] << ( 32 - 28 ) ) & 0x0fff ;
	out[23] |= ( in[11] << ( 32 - 28 ) ) & 0x0fff ;

	out[24] = ( in[8] >> 8 ) & 0x0fff ;
	out[25] = ( in[9] >> 8 ) & 0x0fff ;
	out[26] = ( in[10] >> 8 ) & 0x0fff ;
	out[27] = ( in[11] >> 8 ) & 0x0fff ;

	out[28] = ( in[8] >> 20 ) ;
	out[29] = ( in[9] >> 20 ) ;
	out[30] = ( in[10] >> 20 ) ;
	out[31] = ( in[11] >> 20 ) ;

	out[32] = ( in[12] >> 0 ) & 0x0fff ;
	out[33] = ( in[13] >> 0 ) & 0x0fff ;
	out[34] = ( in[14] >> 0 ) & 0x0fff ;
	out[35] = ( in[15] >> 0 ) & 0x0fff ;

	out[36] = ( in[12] >> 12 ) & 0x0fff ;
	out[37] = ( in[13] >> 12 ) & 0x0fff ;
	out[38] = ( in[14] >> 12 ) & 0x0fff ;
	out[39] = ( in[15] >> 12 ) & 0x0fff ;

	out[40] = ( in[12] >> 24 ) ;
	out[41] = ( in[13] >> 24 ) ;
	out[42] = ( in[14] >> 24 ) ;
	out[43] = ( in[15] >> 24 ) ;

	out[40] |= ( in[16] << ( 32 - 24 ) ) & 0x0fff ;
	out[41] |= ( in[17] << ( 32 - 24 ) ) & 0x0fff ;
	out[42] |= ( in[18] << ( 32 - 24 ) ) & 0x0fff ;
	out[43] |= ( in[19] << ( 32 - 24 ) ) & 0x0fff ;

	out[44] = ( in[16] >> 4 ) & 0x0fff ;
	out[45] = ( in[17] >> 4 ) & 0x0fff ;
	out[46] = ( in[18] >> 4 ) & 0x0fff ;
	out[47] = ( in[19] >> 4 ) & 0x0fff ;

	out[48] = ( in[16] >> 16 ) & 0x0fff ;
	out[49] = ( in[17] >> 16 ) & 0x0fff ;
	out[50] = ( in[18] >> 16 ) & 0x0fff ;
	out[51] = ( in[19] >> 16 ) & 0x0fff ;

	out[52] = ( in[16] >> 28 ) ;
	out[53] = ( in[17] >> 28 ) ;
	out[54] = ( in[18] >> 28 ) ;
	out[55] = ( in[19] >> 28 ) ;

	out[52] |= ( in[20] << ( 32 - 28 ) ) & 0x0fff ;
	out[53] |= ( in[21] << ( 32 - 28 ) ) & 0x0fff ;
	out[54] |= ( in[22] << ( 32 - 28 ) ) & 0x0fff ;
	out[55] |= ( in[23] << ( 32 - 28 ) ) & 0x0fff ;

	out[56] = ( in[20] >> 8 ) & 0x0fff ;
	out[57] = ( in[21] >> 8 ) & 0x0fff ;
	out[58] = ( in[22] >> 8 ) & 0x0fff ;
	out[59] = ( in[23] >> 8 ) & 0x0fff ;

	out[60] = ( in[20] >> 20 ) ;
	out[61] = ( in[21] >> 20 ) ;
	out[62] = ( in[22] >> 20 ) ;
	out[63] = ( in[23] >> 20 ) ;

	out[64] = ( in[24] >> 0 ) & 0x0fff ;
	out[65] = ( in[25] >> 0 ) & 0x0fff ;
	out[66] = ( in[26] >> 0 ) & 0x0fff ;
	out[67] = ( in[27] >> 0 ) & 0x0fff ;

	out[68] = ( in[24] >> 12 ) & 0x0fff ;
	out[69] = ( in[25] >> 12 ) & 0x0fff ;
	out[70] = ( in[26] >> 12 ) & 0x0fff ;
	out[71] = ( in[27] >> 12 ) & 0x0fff ;

	out[72] = ( in[24] >> 24 ) ;
	out[73] = ( in[25] >> 24 ) ;
	out[74] = ( in[26] >> 24 ) ;
	out[75] = ( in[27] >> 24 ) ;

	out[72] |= ( in[28] << ( 32 - 24 ) ) & 0x0fff ;
	out[73] |= ( in[29] << ( 32 - 24 ) ) & 0x0fff ;
	out[74] |= ( in[30] << ( 32 - 24 ) ) & 0x0fff ;
	out[75] |= ( in[31] << ( 32 - 24 ) ) & 0x0fff ;

	out[76] = ( in[28] >> 4 ) & 0x0fff ;
	out[77] = ( in[29] >> 4 ) & 0x0fff ;
	out[78] = ( in[30] >> 4 ) & 0x0fff ;
	out[79] = ( in[31] >> 4 ) & 0x0fff ;

	out[80] = ( in[28] >> 16 ) & 0x0fff ;
	out[81] = ( in[29] >> 16 ) & 0x0fff ;
	out[82] = ( in[30] >> 16 ) & 0x0fff ;
	out[83] = ( in[31] >> 16 ) & 0x0fff ;

	out[84] = ( in[28] >> 28 ) ;
	out[85] = ( in[29] >> 28 ) ;
	out[86] = ( in[30] >> 28 ) ;
	out[87] = ( in[31] >> 28 ) ;

	out[84] |= ( in[32] << ( 32 - 28 ) ) & 0x0fff ;
	out[85] |= ( in[33] << ( 32 - 28 ) ) & 0x0fff ;
	out[86] |= ( in[34] << ( 32 - 28 ) ) & 0x0fff ;
	out[87] |= ( in[35] << ( 32 - 28 ) ) & 0x0fff ;

	out[88] = ( in[32] >> 8 ) & 0x0fff ;
	out[89] = ( in[33] >> 8 ) & 0x0fff ;
	out[90] = ( in[34] >> 8 ) & 0x0fff ;
	out[91] = ( in[35] >> 8 ) & 0x0fff ;

	out[92] = ( in[32] >> 20 ) ;
	out[93] = ( in[33] >> 20 ) ;
	out[94] = ( in[34] >> 20 ) ;
	out[95] = ( in[35] >> 20 ) ;

	out[96] = ( in[36] >> 0 ) & 0x0fff ;
	out[97] = ( in[37] >> 0 ) & 0x0fff ;
	out[98] = ( in[38] >> 0 ) & 0x0fff ;
	out[99] = ( in[39] >> 0 ) & 0x0fff ;

	out[100] = ( in[36] >> 12 ) & 0x0fff ;
	out[101] = ( in[37] >> 12 ) & 0x0fff ;
	out[102] = ( in[38] >> 12 ) & 0x0fff ;
	out[103] = ( in[39] >> 12 ) & 0x0fff ;

	out[104] = ( in[36] >> 24 ) ;
	out[105] = ( in[37] >> 24 ) ;
	out[106] = ( in[38] >> 24 ) ;
	out[107] = ( in[39] >> 24 ) ;

	out[104] |= ( in[40] << ( 32 - 24 ) ) & 0x0fff ;
	out[105] |= ( in[41] << ( 32 - 24 ) ) & 0x0fff ;
	out[106] |= ( in[42] << ( 32 - 24 ) ) & 0x0fff ;
	out[107] |= ( in[43] << ( 32 - 24 ) ) & 0x0fff ;

	out[108] = ( in[40] >> 4 ) & 0x0fff ;
	out[109] = ( in[41] >> 4 ) & 0x0fff ;
	out[110] = ( in[42] >> 4 ) & 0x0fff ;
	out[111] = ( in[43] >> 4 ) & 0x0fff ;

	out[112] = ( in[40] >> 16 ) & 0x0fff ;
	out[113] = ( in[41] >> 16 ) & 0x0fff ;
	out[114] = ( in[42] >> 16 ) & 0x0fff ;
	out[115] = ( in[43] >> 16 ) & 0x0fff ;

	out[116] = ( in[40] >> 28 ) ;
	out[117] = ( in[41] >> 28 ) ;
	out[118] = ( in[42] >> 28 ) ;
	out[119] = ( in[43] >> 28 ) ;

	out[116] |= ( in[44] << ( 32 - 28 ) ) & 0x0fff ;
	out[117] |= ( in[45] << ( 32 - 28 ) ) & 0x0fff ;
	out[118] |= ( in[46] << ( 32 - 28 ) ) & 0x0fff ;
	out[119] |= ( in[47] << ( 32 - 28 ) ) & 0x0fff ;

	out[120] = ( in[44] >> 8 ) & 0x0fff ;
	out[121] = ( in[45] >> 8 ) & 0x0fff ;
	out[122] = ( in[46] >> 8 ) & 0x0fff ;
	out[123] = ( in[47] >> 8 ) & 0x0fff ;

	out[124] = ( in[44] >> 20 ) ;
	out[125] = ( in[45] >> 20 ) ;
	out[126] = ( in[46] >> 20 ) ;
	out[127] = ( in[47] >> 20 ) ;
}


// 13-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c13(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x1fff ;
	out[1] = ( in[1] >> 0 ) & 0x1fff ;
	out[2] = ( in[2] >> 0 ) & 0x1fff ;
	out[3] = ( in[3] >> 0 ) & 0x1fff ;

	out[4] = ( in[0] >> 13 ) & 0x1fff ;
	out[5] = ( in[1] >> 13 ) & 0x1fff ;
	out[6] = ( in[2] >> 13 ) & 0x1fff ;
	out[7] = ( in[3] >> 13 ) & 0x1fff ;

	out[8] = ( in[0] >> 26 ) ;
	out[9] = ( in[1] >> 26 ) ;
	out[10] = ( in[2] >> 26 ) ;
	out[11] = ( in[3] >> 26 ) ;

	out[8] |= ( in[4] << ( 32 - 26 ) ) & 0x1fff ;
	out[9] |= ( in[5] << ( 32 - 26 ) ) & 0x1fff ;
	out[10] |= ( in[6] << ( 32 - 26 ) ) & 0x1fff ;
	out[11] |= ( in[7] << ( 32 - 26 ) ) & 0x1fff ;

	out[12] = ( in[4] >> 7 ) & 0x1fff ;
	out[13] = ( in[5] >> 7 ) & 0x1fff ;
	out[14] = ( in[6] >> 7 ) & 0x1fff ;
	out[15] = ( in[7] >> 7 ) & 0x1fff ;

	out[16] = ( in[4] >> 20 ) ;
	out[17] = ( in[5] >> 20 ) ;
	out[18] = ( in[6] >> 20 ) ;
	out[19] = ( in[7] >> 20 ) ;

	out[16] |= ( in[8] << ( 32 - 20 ) ) & 0x1fff ;
	out[17] |= ( in[9] << ( 32 - 20 ) ) & 0x1fff ;
	out[18] |= ( in[10] << ( 32 - 20 ) ) & 0x1fff ;
	out[19] |= ( in[11] << ( 32 - 20 ) ) & 0x1fff ;

	out[20] = ( in[8] >> 1 ) & 0x1fff ;
	out[21] = ( in[9] >> 1 ) & 0x1fff ;
	out[22] = ( in[10] >> 1 ) & 0x1fff ;
	out[23] = ( in[11] >> 1 ) & 0x1fff ;

	out[24] = ( in[8] >> 14 ) & 0x1fff ;
	out[25] = ( in[9] >> 14 ) & 0x1fff ;
	out[26] = ( in[10] >> 14 ) & 0x1fff ;
	out[27] = ( in[11] >> 14 ) & 0x1fff ;

	out[28] = ( in[8] >> 27 ) ;
	out[29] = ( in[9] >> 27 ) ;
	out[30] = ( in[10] >> 27 ) ;
	out[31] = ( in[11] >> 27 ) ;

	out[28] |= ( in[12] << ( 32 - 27 ) ) & 0x1fff ;
	out[29] |= ( in[13] << ( 32 - 27 ) ) & 0x1fff ;
	out[30] |= ( in[14] << ( 32 - 27 ) ) & 0x1fff ;
	out[31] |= ( in[15] << ( 32 - 27 ) ) & 0x1fff ;

	out[32] = ( in[12] >> 8 ) & 0x1fff ;
	out[33] = ( in[13] >> 8 ) & 0x1fff ;
	out[34] = ( in[14] >> 8 ) & 0x1fff ;
	out[35] = ( in[15] >> 8 ) & 0x1fff ;

	out[36] = ( in[12] >> 21 ) ;
	out[37] = ( in[13] >> 21 ) ;
	out[38] = ( in[14] >> 21 ) ;
	out[39] = ( in[15] >> 21 ) ;

	out[36] |= ( in[16] << ( 32 - 21 ) ) & 0x1fff ;
	out[37] |= ( in[17] << ( 32 - 21 ) ) & 0x1fff ;
	out[38] |= ( in[18] << ( 32 - 21 ) ) & 0x1fff ;
	out[39] |= ( in[19] << ( 32 - 21 ) ) & 0x1fff ;

	out[40] = ( in[16] >> 2 ) & 0x1fff ;
	out[41] = ( in[17] >> 2 ) & 0x1fff ;
	out[42] = ( in[18] >> 2 ) & 0x1fff ;
	out[43] = ( in[19] >> 2 ) & 0x1fff ;

	out[44] = ( in[16] >> 15 ) & 0x1fff ;
	out[45] = ( in[17] >> 15 ) & 0x1fff ;
	out[46] = ( in[18] >> 15 ) & 0x1fff ;
	out[47] = ( in[19] >> 15 ) & 0x1fff ;

	out[48] = ( in[16] >> 28 ) ;
	out[49] = ( in[17] >> 28 ) ;
	out[50] = ( in[18] >> 28 ) ;
	out[51] = ( in[19] >> 28 ) ;

	out[48] |= ( in[20] << ( 32 - 28 ) ) & 0x1fff ;
	out[49] |= ( in[21] << ( 32 - 28 ) ) & 0x1fff ;
	out[50] |= ( in[22] << ( 32 - 28 ) ) & 0x1fff ;
	out[51] |= ( in[23] << ( 32 - 28 ) ) & 0x1fff ;

	out[52] = ( in[20] >> 9 ) & 0x1fff ;
	out[53] = ( in[21] >> 9 ) & 0x1fff ;
	out[54] = ( in[22] >> 9 ) & 0x1fff ;
	out[55] = ( in[23] >> 9 ) & 0x1fff ;

	out[56] = ( in[20] >> 22 ) ;
	out[57] = ( in[21] >> 22 ) ;
	out[58] = ( in[22] >> 22 ) ;
	out[59] = ( in[23] >> 22 ) ;

	out[56] |= ( in[24] << ( 32 - 22 ) ) & 0x1fff ;
	out[57] |= ( in[25] << ( 32 - 22 ) ) & 0x1fff ;
	out[58] |= ( in[26] << ( 32 - 22 ) ) & 0x1fff ;
	out[59] |= ( in[27] << ( 32 - 22 ) ) & 0x1fff ;

	out[60] = ( in[24] >> 3 ) & 0x1fff ;
	out[61] = ( in[25] >> 3 ) & 0x1fff ;
	out[62] = ( in[26] >> 3 ) & 0x1fff ;
	out[63] = ( in[27] >> 3 ) & 0x1fff ;

	out[64] = ( in[24] >> 16 ) & 0x1fff ;
	out[65] = ( in[25] >> 16 ) & 0x1fff ;
	out[66] = ( in[26] >> 16 ) & 0x1fff ;
	out[67] = ( in[27] >> 16 ) & 0x1fff ;

	out[68] = ( in[24] >> 29 ) ;
	out[69] = ( in[25] >> 29 ) ;
	out[70] = ( in[26] >> 29 ) ;
	out[71] = ( in[27] >> 29 ) ;

	out[68] |= ( in[28] << ( 32 - 29 ) ) & 0x1fff ;
	out[69] |= ( in[29] << ( 32 - 29 ) ) & 0x1fff ;
	out[70] |= ( in[30] << ( 32 - 29 ) ) & 0x1fff ;
	out[71] |= ( in[31] << ( 32 - 29 ) ) & 0x1fff ;

	out[72] = ( in[28] >> 10 ) & 0x1fff ;
	out[73] = ( in[29] >> 10 ) & 0x1fff ;
	out[74] = ( in[30] >> 10 ) & 0x1fff ;
	out[75] = ( in[31] >> 10 ) & 0x1fff ;

	out[76] = ( in[28] >> 23 ) ;
	out[77] = ( in[29] >> 23 ) ;
	out[78] = ( in[30] >> 23 ) ;
	out[79] = ( in[31] >> 23 ) ;

	out[76] |= ( in[32] << ( 32 - 23 ) ) & 0x1fff ;
	out[77] |= ( in[33] << ( 32 - 23 ) ) & 0x1fff ;
	out[78] |= ( in[34] << ( 32 - 23 ) ) & 0x1fff ;
	out[79] |= ( in[35] << ( 32 - 23 ) ) & 0x1fff ;

	out[80] = ( in[32] >> 4 ) & 0x1fff ;
	out[81] = ( in[33] >> 4 ) & 0x1fff ;
	out[82] = ( in[34] >> 4 ) & 0x1fff ;
	out[83] = ( in[35] >> 4 ) & 0x1fff ;

	out[84] = ( in[32] >> 17 ) & 0x1fff ;
	out[85] = ( in[33] >> 17 ) & 0x1fff ;
	out[86] = ( in[34] >> 17 ) & 0x1fff ;
	out[87] = ( in[35] >> 17 ) & 0x1fff ;

	out[88] = ( in[32] >> 30 ) ;
	out[89] = ( in[33] >> 30 ) ;
	out[90] = ( in[34] >> 30 ) ;
	out[91] = ( in[35] >> 30 ) ;

	out[88] |= ( in[36] << ( 32 - 30 ) ) & 0x1fff ;
	out[89] |= ( in[37] << ( 32 - 30 ) ) & 0x1fff ;
	out[90] |= ( in[38] << ( 32 - 30 ) ) & 0x1fff ;
	out[91] |= ( in[39] << ( 32 - 30 ) ) & 0x1fff ;

	out[92] = ( in[36] >> 11 ) & 0x1fff ;
	out[93] = ( in[37] >> 11 ) & 0x1fff ;
	out[94] = ( in[38] >> 11 ) & 0x1fff ;
	out[95] = ( in[39] >> 11 ) & 0x1fff ;

	out[96] = ( in[36] >> 24 ) ;
	out[97] = ( in[37] >> 24 ) ;
	out[98] = ( in[38] >> 24 ) ;
	out[99] = ( in[39] >> 24 ) ;

	out[96] |= ( in[40] << ( 32 - 24 ) ) & 0x1fff ;
	out[97] |= ( in[41] << ( 32 - 24 ) ) & 0x1fff ;
	out[98] |= ( in[42] << ( 32 - 24 ) ) & 0x1fff ;
	out[99] |= ( in[43] << ( 32 - 24 ) ) & 0x1fff ;

	out[100] = ( in[40] >> 5 ) & 0x1fff ;
	out[101] = ( in[41] >> 5 ) & 0x1fff ;
	out[102] = ( in[42] >> 5 ) & 0x1fff ;
	out[103] = ( in[43] >> 5 ) & 0x1fff ;

	out[104] = ( in[40] >> 18 ) & 0x1fff ;
	out[105] = ( in[41] >> 18 ) & 0x1fff ;
	out[106] = ( in[42] >> 18 ) & 0x1fff ;
	out[107] = ( in[43] >> 18 ) & 0x1fff ;

	out[108] = ( in[40] >> 31 ) ;
	out[109] = ( in[41] >> 31 ) ;
	out[110] = ( in[42] >> 31 ) ;
	out[111] = ( in[43] >> 31 ) ;

	out[108] |= ( in[44] << ( 32 - 31 ) ) & 0x1fff ;
	out[109] |= ( in[45] << ( 32 - 31 ) ) & 0x1fff ;
	out[110] |= ( in[46] << ( 32 - 31 ) ) & 0x1fff ;
	out[111] |= ( in[47] << ( 32 - 31 ) ) & 0x1fff ;

	out[112] = ( in[44] >> 12 ) & 0x1fff ;
	out[113] = ( in[45] >> 12 ) & 0x1fff ;
	out[114] = ( in[46] >> 12 ) & 0x1fff ;
	out[115] = ( in[47] >> 12 ) & 0x1fff ;

	out[116] = ( in[44] >> 25 ) ;
	out[117] = ( in[45] >> 25 ) ;
	out[118] = ( in[46] >> 25 ) ;
	out[119] = ( in[47] >> 25 ) ;

	out[116] |= ( in[48] << ( 32 - 25 ) ) & 0x1fff ;
	out[117] |= ( in[49] << ( 32 - 25 ) ) & 0x1fff ;
	out[118] |= ( in[50] << ( 32 - 25 ) ) & 0x1fff ;
	out[119] |= ( in[51] << ( 32 - 25 ) ) & 0x1fff ;

	out[120] = ( in[48] >> 6 ) & 0x1fff ;
	out[121] = ( in[49] >> 6 ) & 0x1fff ;
	out[122] = ( in[50] >> 6 ) & 0x1fff ;
	out[123] = ( in[51] >> 6 ) & 0x1fff ;

	out[124] = ( in[48] >> 19 ) ;
	out[125] = ( in[49] >> 19 ) ;
	out[126] = ( in[50] >> 19 ) ;
	out[127] = ( in[51] >> 19 ) ;
}


// 14-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c14(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x3fff ;
	out[1] = ( in[1] >> 0 ) & 0x3fff ;
	out[2] = ( in[2] >> 0 ) & 0x3fff ;
	out[3] = ( in[3] >> 0 ) & 0x3fff ;

	out[4] = ( in[0] >> 14 ) & 0x3fff ;
	out[5] = ( in[1] >> 14 ) & 0x3fff ;
	out[6] = ( in[2] >> 14 ) & 0x3fff ;
	out[7] = ( in[3] >> 14 ) & 0x3fff ;

	out[8] = ( in[0] >> 28 ) ;
	out[9] = ( in[1] >> 28 ) ;
	out[10] = ( in[2] >> 28 ) ;
	out[11] = ( in[3] >> 28 ) ;

	out[8] |= ( in[4] << ( 32 - 28 ) ) & 0x3fff ;
	out[9] |= ( in[5] << ( 32 - 28 ) ) & 0x3fff ;
	out[10] |= ( in[6] << ( 32 - 28 ) ) & 0x3fff ;
	out[11] |= ( in[7] << ( 32 - 28 ) ) & 0x3fff ;

	out[12] = ( in[4] >> 10 ) & 0x3fff ;
	out[13] = ( in[5] >> 10 ) & 0x3fff ;
	out[14] = ( in[6] >> 10 ) & 0x3fff ;
	out[15] = ( in[7] >> 10 ) & 0x3fff ;

	out[16] = ( in[4] >> 24 ) ;
	out[17] = ( in[5] >> 24 ) ;
	out[18] = ( in[6] >> 24 ) ;
	out[19] = ( in[7] >> 24 ) ;

	out[16] |= ( in[8] << ( 32 - 24 ) ) & 0x3fff ;
	out[17] |= ( in[9] << ( 32 - 24 ) ) & 0x3fff ;
	out[18] |= ( in[10] << ( 32 - 24 ) ) & 0x3fff ;
	out[19] |= ( in[11] << ( 32 - 24 ) ) & 0x3fff ;

	out[20] = ( in[8] >> 6 ) & 0x3fff ;
	out[21] = ( in[9] >> 6 ) & 0x3fff ;
	out[22] = ( in[10] >> 6 ) & 0x3fff ;
	out[23] = ( in[11] >> 6 ) & 0x3fff ;

	out[24] = ( in[8] >> 20 ) ;
	out[25] = ( in[9] >> 20 ) ;
	out[26] = ( in[10] >> 20 ) ;
	out[27] = ( in[11] >> 20 ) ;

	out[24] |= ( in[12] << ( 32 - 20 ) ) & 0x3fff ;
	out[25] |= ( in[13] << ( 32 - 20 ) ) & 0x3fff ;
	out[26] |= ( in[14] << ( 32 - 20 ) ) & 0x3fff ;
	out[27] |= ( in[15] << ( 32 - 20 ) ) & 0x3fff ;

	out[28] = ( in[12] >> 2 ) & 0x3fff ;
	out[29] = ( in[13] >> 2 ) & 0x3fff ;
	out[30] = ( in[14] >> 2 ) & 0x3fff ;
	out[31] = ( in[15] >> 2 ) & 0x3fff ;

	out[32] = ( in[12] >> 16 ) & 0x3fff ;
	out[33] = ( in[13] >> 16 ) & 0x3fff ;
	out[34] = ( in[14] >> 16 ) & 0x3fff ;
	out[35] = ( in[15] >> 16 ) & 0x3fff ;

	out[36] = ( in[12] >> 30 ) ;
	out[37] = ( in[13] >> 30 ) ;
	out[38] = ( in[14] >> 30 ) ;
	out[39] = ( in[15] >> 30 ) ;

	out[36] |= ( in[16] << ( 32 - 30 ) ) & 0x3fff ;
	out[37] |= ( in[17] << ( 32 - 30 ) ) & 0x3fff ;
	out[38] |= ( in[18] << ( 32 - 30 ) ) & 0x3fff ;
	out[39] |= ( in[19] << ( 32 - 30 ) ) & 0x3fff ;

	out[40] = ( in[16] >> 12 ) & 0x3fff ;
	out[41] = ( in[17] >> 12 ) & 0x3fff ;
	out[42] = ( in[18] >> 12 ) & 0x3fff ;
	out[43] = ( in[19] >> 12 ) & 0x3fff ;

	out[44] = ( in[16] >> 26 ) ;
	out[45] = ( in[17] >> 26 ) ;
	out[46] = ( in[18] >> 26 ) ;
	out[47] = ( in[19] >> 26 ) ;

	out[44] |= ( in[20] << ( 32 - 26 ) ) & 0x3fff ;
	out[45] |= ( in[21] << ( 32 - 26 ) ) & 0x3fff ;
	out[46] |= ( in[22] << ( 32 - 26 ) ) & 0x3fff ;
	out[47] |= ( in[23] << ( 32 - 26 ) ) & 0x3fff ;

	out[48] = ( in[20] >> 8 ) & 0x3fff ;
	out[49] = ( in[21] >> 8 ) & 0x3fff ;
	out[50] = ( in[22] >> 8 ) & 0x3fff ;
	out[51] = ( in[23] >> 8 ) & 0x3fff ;

	out[52] = ( in[20] >> 22 ) ;
	out[53] = ( in[21] >> 22 ) ;
	out[54] = ( in[22] >> 22 ) ;
	out[55] = ( in[23] >> 22 ) ;

	out[52] |= ( in[24] << ( 32 - 22 ) ) & 0x3fff ;
	out[53] |= ( in[25] << ( 32 - 22 ) ) & 0x3fff ;
	out[54] |= ( in[26] << ( 32 - 22 ) ) & 0x3fff ;
	out[55] |= ( in[27] << ( 32 - 22 ) ) & 0x3fff ;

	out[56] = ( in[24] >> 4 ) & 0x3fff ;
	out[57] = ( in[25] >> 4 ) & 0x3fff ;
	out[58] = ( in[26] >> 4 ) & 0x3fff ;
	out[59] = ( in[27] >> 4 ) & 0x3fff ;

	out[60] = ( in[24] >> 18 ) ;
	out[61] = ( in[25] >> 18 ) ;
	out[62] = ( in[26] >> 18 ) ;
	out[63] = ( in[27] >> 18 ) ;

	out[64] = ( in[28] >> 0 ) & 0x3fff ;
	out[65] = ( in[29] >> 0 ) & 0x3fff ;
	out[66] = ( in[30] >> 0 ) & 0x3fff ;
	out[67] = ( in[31] >> 0 ) & 0x3fff ;

	out[68] = ( in[28] >> 14 ) & 0x3fff ;
	out[69] = ( in[29] >> 14 ) & 0x3fff ;
	out[70] = ( in[30] >> 14 ) & 0x3fff ;
	out[71] = ( in[31] >> 14 ) & 0x3fff ;

	out[72] = ( in[28] >> 28 ) ;
	out[73] = ( in[29] >> 28 ) ;
	out[74] = ( in[30] >> 28 ) ;
	out[75] = ( in[31] >> 28 ) ;

	out[72] |= ( in[32] << ( 32 - 28 ) ) & 0x3fff ;
	out[73] |= ( in[33] << ( 32 - 28 ) ) & 0x3fff ;
	out[74] |= ( in[34] << ( 32 - 28 ) ) & 0x3fff ;
	out[75] |= ( in[35] << ( 32 - 28 ) ) & 0x3fff ;

	out[76] = ( in[32] >> 10 ) & 0x3fff ;
	out[77] = ( in[33] >> 10 ) & 0x3fff ;
	out[78] = ( in[34] >> 10 ) & 0x3fff ;
	out[79] = ( in[35] >> 10 ) & 0x3fff ;

	out[80] = ( in[32] >> 24 ) ;
	out[81] = ( in[33] >> 24 ) ;
	out[82] = ( in[34] >> 24 ) ;
	out[83] = ( in[35] >> 24 ) ;

	out[80] |= ( in[36] << ( 32 - 24 ) ) & 0x3fff ;
	out[81] |= ( in[37] << ( 32 - 24 ) ) & 0x3fff ;
	out[82] |= ( in[38] << ( 32 - 24 ) ) & 0x3fff ;
	out[83] |= ( in[39] << ( 32 - 24 ) ) & 0x3fff ;

	out[84] = ( in[36] >> 6 ) & 0x3fff ;
	out[85] = ( in[37] >> 6 ) & 0x3fff ;
	out[86] = ( in[38] >> 6 ) & 0x3fff ;
	out[87] = ( in[39] >> 6 ) & 0x3fff ;

	out[88] = ( in[36] >> 20 ) ;
	out[89] = ( in[37] >> 20 ) ;
	out[90] = ( in[38] >> 20 ) ;
	out[91] = ( in[39] >> 20 ) ;

	out[88] |= ( in[40] << ( 32 - 20 ) ) & 0x3fff ;
	out[89] |= ( in[41] << ( 32 - 20 ) ) & 0x3fff ;
	out[90] |= ( in[42] << ( 32 - 20 ) ) & 0x3fff ;
	out[91] |= ( in[43] << ( 32 - 20 ) ) & 0x3fff ;

	out[92] = ( in[40] >> 2 ) & 0x3fff ;
	out[93] = ( in[41] >> 2 ) & 0x3fff ;
	out[94] = ( in[42] >> 2 ) & 0x3fff ;
	out[95] = ( in[43] >> 2 ) & 0x3fff ;

	out[96] = ( in[40] >> 16 ) & 0x3fff ;
	out[97] = ( in[41] >> 16 ) & 0x3fff ;
	out[98] = ( in[42] >> 16 ) & 0x3fff ;
	out[99] = ( in[43] >> 16 ) & 0x3fff ;

	out[100] = ( in[40] >> 30 ) ;
	out[101] = ( in[41] >> 30 ) ;
	out[102] = ( in[42] >> 30 ) ;
	out[103] = ( in[43] >> 30 ) ;

	out[100] |= ( in[44] << ( 32 - 30 ) ) & 0x3fff ;
	out[101] |= ( in[45] << ( 32 - 30 ) ) & 0x3fff ;
	out[102] |= ( in[46] << ( 32 - 30 ) ) & 0x3fff ;
	out[103] |= ( in[47] << ( 32 - 30 ) ) & 0x3fff ;

	out[104] = ( in[44] >> 12 ) & 0x3fff ;
	out[105] = ( in[45] >> 12 ) & 0x3fff ;
	out[106] = ( in[46] >> 12 ) & 0x3fff ;
	out[107] = ( in[47] >> 12 ) & 0x3fff ;

	out[108] = ( in[44] >> 26 ) ;
	out[109] = ( in[45] >> 26 ) ;
	out[110] = ( in[46] >> 26 ) ;
	out[111] = ( in[47] >> 26 ) ;

	out[108] |= ( in[48] << ( 32 - 26 ) ) & 0x3fff ;
	out[109] |= ( in[49] << ( 32 - 26 ) ) & 0x3fff ;
	out[110] |= ( in[50] << ( 32 - 26 ) ) & 0x3fff ;
	out[111] |= ( in[51] << ( 32 - 26 ) ) & 0x3fff ;

	out[112] = ( in[48] >> 8 ) & 0x3fff ;
	out[113] = ( in[49] >> 8 ) & 0x3fff ;
	out[114] = ( in[50] >> 8 ) & 0x3fff ;
	out[115] = ( in[51] >> 8 ) & 0x3fff ;

	out[116] = ( in[48] >> 22 ) ;
	out[117] = ( in[49] >> 22 ) ;
	out[118] = ( in[50] >> 22 ) ;
	out[119] = ( in[51] >> 22 ) ;

	out[116] |= ( in[52] << ( 32 - 22 ) ) & 0x3fff ;
	out[117] |= ( in[53] << ( 32 - 22 ) ) & 0x3fff ;
	out[118] |= ( in[54] << ( 32 - 22 ) ) & 0x3fff ;
	out[119] |= ( in[55] << ( 32 - 22 ) ) & 0x3fff ;

	out[120] = ( in[52] >> 4 ) & 0x3fff ;
	out[121] = ( in[53] >> 4 ) & 0x3fff ;
	out[122] = ( in[54] >> 4 ) & 0x3fff ;
	out[123] = ( in[55] >> 4 ) & 0x3fff ;

	out[124] = ( in[52] >> 18 ) ;
	out[125] = ( in[53] >> 18 ) ;
	out[126] = ( in[54] >> 18 ) ;
	out[127] = ( in[55] >> 18 ) ;
}


// 15-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c15(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x7fff ;
	out[1] = ( in[1] >> 0 ) & 0x7fff ;
	out[2] = ( in[2] >> 0 ) & 0x7fff ;
	out[3] = ( in[3] >> 0 ) & 0x7fff ;

	out[4] = ( in[0] >> 15 ) & 0x7fff ;
	out[5] = ( in[1] >> 15 ) & 0x7fff ;
	out[6] = ( in[2] >> 15 ) & 0x7fff ;
	out[7] = ( in[3] >> 15 ) & 0x7fff ;

	out[8] = ( in[0] >> 30 ) ;
	out[9] = ( in[1] >> 30 ) ;
	out[10] = ( in[2] >> 30 ) ;
	out[11] = ( in[3] >> 30 ) ;

	out[8] |= ( in[4] << ( 32 - 30 ) ) & 0x7fff ;
	out[9] |= ( in[5] << ( 32 - 30 ) ) & 0x7fff ;
	out[10] |= ( in[6] << ( 32 - 30 ) ) & 0x7fff ;
	out[11] |= ( in[7] << ( 32 - 30 ) ) & 0x7fff ;

	out[12] = ( in[4] >> 13 ) & 0x7fff ;
	out[13] = ( in[5] >> 13 ) & 0x7fff ;
	out[14] = ( in[6] >> 13 ) & 0x7fff ;
	out[15] = ( in[7] >> 13 ) & 0x7fff ;

	out[16] = ( in[4] >> 28 ) ;
	out[17] = ( in[5] >> 28 ) ;
	out[18] = ( in[6] >> 28 ) ;
	out[19] = ( in[7] >> 28 ) ;

	out[16] |= ( in[8] << ( 32 - 28 ) ) & 0x7fff ;
	out[17] |= ( in[9] << ( 32 - 28 ) ) & 0x7fff ;
	out[18] |= ( in[10] << ( 32 - 28 ) ) & 0x7fff ;
	out[19] |= ( in[11] << ( 32 - 28 ) ) & 0x7fff ;

	out[20] = ( in[8] >> 11 ) & 0x7fff ;
	out[21] = ( in[9] >> 11 ) & 0x7fff ;
	out[22] = ( in[10] >> 11 ) & 0x7fff ;
	out[23] = ( in[11] >> 11 ) & 0x7fff ;

	out[24] = ( in[8] >> 26 ) ;
	out[25] = ( in[9] >> 26 ) ;
	out[26] = ( in[10] >> 26 ) ;
	out[27] = ( in[11] >> 26 ) ;

	out[24] |= ( in[12] << ( 32 - 26 ) ) & 0x7fff ;
	out[25] |= ( in[13] << ( 32 - 26 ) ) & 0x7fff ;
	out[26] |= ( in[14] << ( 32 - 26 ) ) & 0x7fff ;
	out[27] |= ( in[15] << ( 32 - 26 ) ) & 0x7fff ;

	out[28] = ( in[12] >> 9 ) & 0x7fff ;
	out[29] = ( in[13] >> 9 ) & 0x7fff ;
	out[30] = ( in[14] >> 9 ) & 0x7fff ;
	out[31] = ( in[15] >> 9 ) & 0x7fff ;

	out[32] = ( in[12] >> 24 ) ;
	out[33] = ( in[13] >> 24 ) ;
	out[34] = ( in[14] >> 24 ) ;
	out[35] = ( in[15] >> 24 ) ;

	out[32] |= ( in[16] << ( 32 - 24 ) ) & 0x7fff ;
	out[33] |= ( in[17] << ( 32 - 24 ) ) & 0x7fff ;
	out[34] |= ( in[18] << ( 32 - 24 ) ) & 0x7fff ;
	out[35] |= ( in[19] << ( 32 - 24 ) ) & 0x7fff ;

	out[36] = ( in[16] >> 7 ) & 0x7fff ;
	out[37] = ( in[17] >> 7 ) & 0x7fff ;
	out[38] = ( in[18] >> 7 ) & 0x7fff ;
	out[39] = ( in[19] >> 7 ) & 0x7fff ;

	out[40] = ( in[16] >> 22 ) ;
	out[41] = ( in[17] >> 22 ) ;
	out[42] = ( in[18] >> 22 ) ;
	out[43] = ( in[19] >> 22 ) ;

	out[40] |= ( in[20] << ( 32 - 22 ) ) & 0x7fff ;
	out[41] |= ( in[21] << ( 32 - 22 ) ) & 0x7fff ;
	out[42] |= ( in[22] << ( 32 - 22 ) ) & 0x7fff ;
	out[43] |= ( in[23] << ( 32 - 22 ) ) & 0x7fff ;

	out[44] = ( in[20] >> 5 ) & 0x7fff ;
	out[45] = ( in[21] >> 5 ) & 0x7fff ;
	out[46] = ( in[22] >> 5 ) & 0x7fff ;
	out[47] = ( in[23] >> 5 ) & 0x7fff ;

	out[48] = ( in[20] >> 20 ) ;
	out[49] = ( in[21] >> 20 ) ;
	out[50] = ( in[22] >> 20 ) ;
	out[51] = ( in[23] >> 20 ) ;

	out[48] |= ( in[24] << ( 32 - 20 ) ) & 0x7fff ;
	out[49] |= ( in[25] << ( 32 - 20 ) ) & 0x7fff ;
	out[50] |= ( in[26] << ( 32 - 20 ) ) & 0x7fff ;
	out[51] |= ( in[27] << ( 32 - 20 ) ) & 0x7fff ;

	out[52] = ( in[24] >> 3 ) & 0x7fff ;
	out[53] = ( in[25] >> 3 ) & 0x7fff ;
	out[54] = ( in[26] >> 3 ) & 0x7fff ;
	out[55] = ( in[27] >> 3 ) & 0x7fff ;

	out[56] = ( in[24] >> 18 ) ;
	out[57] = ( in[25] >> 18 ) ;
	out[58] = ( in[26] >> 18 ) ;
	out[59] = ( in[27] >> 18 ) ;

	out[56] |= ( in[28] << ( 32 - 18 ) ) & 0x7fff ;
	out[57] |= ( in[29] << ( 32 - 18 ) ) & 0x7fff ;
	out[58] |= ( in[30] << ( 32 - 18 ) ) & 0x7fff ;
	out[59] |= ( in[31] << ( 32 - 18 ) ) & 0x7fff ;

	out[60] = ( in[28] >> 1 ) & 0x7fff ;
	out[61] = ( in[29] >> 1 ) & 0x7fff ;
	out[62] = ( in[30] >> 1 ) & 0x7fff ;
	out[63] = ( in[31] >> 1 ) & 0x7fff ;

	out[64] = ( in[28] >> 16 ) & 0x7fff ;
	out[65] = ( in[29] >> 16 ) & 0x7fff ;
	out[66] = ( in[30] >> 16 ) & 0x7fff ;
	out[67] = ( in[31] >> 16 ) & 0x7fff ;

	out[68] = ( in[28] >> 31 ) ;
	out[69] = ( in[29] >> 31 ) ;
	out[70] = ( in[30] >> 31 ) ;
	out[71] = ( in[31] >> 31 ) ;

	out[68] |= ( in[32] << ( 32 - 31 ) ) & 0x7fff ;
	out[69] |= ( in[33] << ( 32 - 31 ) ) & 0x7fff ;
	out[70] |= ( in[34] << ( 32 - 31 ) ) & 0x7fff ;
	out[71] |= ( in[35] << ( 32 - 31 ) ) & 0x7fff ;

	out[72] = ( in[32] >> 14 ) & 0x7fff ;
	out[73] = ( in[33] >> 14 ) & 0x7fff ;
	out[74] = ( in[34] >> 14 ) & 0x7fff ;
	out[75] = ( in[35] >> 14 ) & 0x7fff ;

	out[76] = ( in[32] >> 29 ) ;
	out[77] = ( in[33] >> 29 ) ;
	out[78] = ( in[34] >> 29 ) ;
	out[79] = ( in[35] >> 29 ) ;

	out[76] |= ( in[36] << ( 32 - 29 ) ) & 0x7fff ;
	out[77] |= ( in[37] << ( 32 - 29 ) ) & 0x7fff ;
	out[78] |= ( in[38] << ( 32 - 29 ) ) & 0x7fff ;
	out[79] |= ( in[39] << ( 32 - 29 ) ) & 0x7fff ;

	out[80] = ( in[36] >> 12 ) & 0x7fff ;
	out[81] = ( in[37] >> 12 ) & 0x7fff ;
	out[82] = ( in[38] >> 12 ) & 0x7fff ;
	out[83] = ( in[39] >> 12 ) & 0x7fff ;

	out[84] = ( in[36] >> 27 ) ;
	out[85] = ( in[37] >> 27 ) ;
	out[86] = ( in[38] >> 27 ) ;
	out[87] = ( in[39] >> 27 ) ;

	out[84] |= ( in[40] << ( 32 - 27 ) ) & 0x7fff ;
	out[85] |= ( in[41] << ( 32 - 27 ) ) & 0x7fff ;
	out[86] |= ( in[42] << ( 32 - 27 ) ) & 0x7fff ;
	out[87] |= ( in[43] << ( 32 - 27 ) ) & 0x7fff ;

	out[88] = ( in[40] >> 10 ) & 0x7fff ;
	out[89] = ( in[41] >> 10 ) & 0x7fff ;
	out[90] = ( in[42] >> 10 ) & 0x7fff ;
	out[91] = ( in[43] >> 10 ) & 0x7fff ;

	out[92] = ( in[40] >> 25 ) ;
	out[93] = ( in[41] >> 25 ) ;
	out[94] = ( in[42] >> 25 ) ;
	out[95] = ( in[43] >> 25 ) ;

	out[92] |= ( in[44] << ( 32 - 25 ) ) & 0x7fff ;
	out[93] |= ( in[45] << ( 32 - 25 ) ) & 0x7fff ;
	out[94] |= ( in[46] << ( 32 - 25 ) ) & 0x7fff ;
	out[95] |= ( in[47] << ( 32 - 25 ) ) & 0x7fff ;

	out[96] = ( in[44] >> 8 ) & 0x7fff ;
	out[97] = ( in[45] >> 8 ) & 0x7fff ;
	out[98] = ( in[46] >> 8 ) & 0x7fff ;
	out[99] = ( in[47] >> 8 ) & 0x7fff ;

	out[100] = ( in[44] >> 23 ) ;
	out[101] = ( in[45] >> 23 ) ;
	out[102] = ( in[46] >> 23 ) ;
	out[103] = ( in[47] >> 23 ) ;

	out[100] |= ( in[48] << ( 32 - 23 ) ) & 0x7fff ;
	out[101] |= ( in[49] << ( 32 - 23 ) ) & 0x7fff ;
	out[102] |= ( in[50] << ( 32 - 23 ) ) & 0x7fff ;
	out[103] |= ( in[51] << ( 32 - 23 ) ) & 0x7fff ;

	out[104] = ( in[48] >> 6 ) & 0x7fff ;
	out[105] = ( in[49] >> 6 ) & 0x7fff ;
	out[106] = ( in[50] >> 6 ) & 0x7fff ;
	out[107] = ( in[51] >> 6 ) & 0x7fff ;

	out[108] = ( in[48] >> 21 ) ;
	out[109] = ( in[49] >> 21 ) ;
	out[110] = ( in[50] >> 21 ) ;
	out[111] = ( in[51] >> 21 ) ;

	out[108] |= ( in[52] << ( 32 - 21 ) ) & 0x7fff ;
	out[109] |= ( in[53] << ( 32 - 21 ) ) & 0x7fff ;
	out[110] |= ( in[54] << ( 32 - 21 ) ) & 0x7fff ;
	out[111] |= ( in[55] << ( 32 - 21 ) ) & 0x7fff ;

	out[112] = ( in[52] >> 4 ) & 0x7fff ;
	out[113] = ( in[53] >> 4 ) & 0x7fff ;
	out[114] = ( in[54] >> 4 ) & 0x7fff ;
	out[115] = ( in[55] >> 4 ) & 0x7fff ;

	out[116] = ( in[52] >> 19 ) ;
	out[117] = ( in[53] >> 19 ) ;
	out[118] = ( in[54] >> 19 ) ;
	out[119] = ( in[55] >> 19 ) ;

	out[116] |= ( in[56] << ( 32 - 19 ) ) & 0x7fff ;
	out[117] |= ( in[57] << ( 32 - 19 ) ) & 0x7fff ;
	out[118] |= ( in[58] << ( 32 - 19 ) ) & 0x7fff ;
	out[119] |= ( in[59] << ( 32 - 19 ) ) & 0x7fff ;

	out[120] = ( in[56] >> 2 ) & 0x7fff ;
	out[121] = ( in[57] >> 2 ) & 0x7fff ;
	out[122] = ( in[58] >> 2 ) & 0x7fff ;
	out[123] = ( in[59] >> 2 ) & 0x7fff ;

	out[124] = ( in[56] >> 17 ) ;
	out[125] = ( in[57] >> 17 ) ;
	out[126] = ( in[58] >> 17 ) ;
	out[127] = ( in[59] >> 17 ) ;
}


// 16-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c16(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0xffff ;
	out[1] = ( in[1] >> 0 ) & 0xffff ;
	out[2] = ( in[2] >> 0 ) & 0xffff ;
	out[3] = ( in[3] >> 0 ) & 0xffff ;

	out[4] = ( in[0] >> 16 ) ;
	out[5] = ( in[1] >> 16 ) ;
	out[6] = ( in[2] >> 16 ) ;
	out[7] = ( in[3] >> 16 ) ;

	out[8] = ( in[4] >> 0 ) & 0xffff ;
	out[9] = ( in[5] >> 0 ) & 0xffff ;
	out[10] = ( in[6] >> 0 ) & 0xffff ;
	out[11] = ( in[7] >> 0 ) & 0xffff ;

	out[12] = ( in[4] >> 16 ) ;
	out[13] = ( in[5] >> 16 ) ;
	out[14] = ( in[6] >> 16 ) ;
	out[15] = ( in[7] >> 16 ) ;

	out[16] = ( in[8] >> 0 ) & 0xffff ;
	out[17] = ( in[9] >> 0 ) & 0xffff ;
	out[18] = ( in[10] >> 0 ) & 0xffff ;
	out[19] = ( in[11] >> 0 ) & 0xffff ;

	out[20] = ( in[8] >> 16 ) ;
	out[21] = ( in[9] >> 16 ) ;
	out[22] = ( in[10] >> 16 ) ;
	out[23] = ( in[11] >> 16 ) ;

	out[24] = ( in[12] >> 0 ) & 0xffff ;
	out[25] = ( in[13] >> 0 ) & 0xffff ;
	out[26] = ( in[14] >> 0 ) & 0xffff ;
	out[27] = ( in[15] >> 0 ) & 0xffff ;

	out[28] = ( in[12] >> 16 ) ;
	out[29] = ( in[13] >> 16 ) ;
	out[30] = ( in[14] >> 16 ) ;
	out[31] = ( in[15] >> 16 ) ;

	out[32] = ( in[16] >> 0 ) & 0xffff ;
	out[33] = ( in[17] >> 0 ) & 0xffff ;
	out[34] = ( in[18] >> 0 ) & 0xffff ;
	out[35] = ( in[19] >> 0 ) & 0xffff ;

	out[36] = ( in[16] >> 16 ) ;
	out[37] = ( in[17] >> 16 ) ;
	out[38] = ( in[18] >> 16 ) ;
	out[39] = ( in[19] >> 16 ) ;

	out[40] = ( in[20] >> 0 ) & 0xffff ;
	out[41] = ( in[21] >> 0 ) & 0xffff ;
	out[42] = ( in[22] >> 0 ) & 0xffff ;
	out[43] = ( in[23] >> 0 ) & 0xffff ;

	out[44] = ( in[20] >> 16 ) ;
	out[45] = ( in[21] >> 16 ) ;
	out[46] = ( in[22] >> 16 ) ;
	out[47] = ( in[23] >> 16 ) ;

	out[48] = ( in[24] >> 0 ) & 0xffff ;
	out[49] = ( in[25] >> 0 ) & 0xffff ;
	out[50] = ( in[26] >> 0 ) & 0xffff ;
	out[51] = ( in[27] >> 0 ) & 0xffff ;

	out[52] = ( in[24] >> 16 ) ;
	out[53] = ( in[25] >> 16 ) ;
	out[54] = ( in[26] >> 16 ) ;
	out[55] = ( in[27] >> 16 ) ;

	out[56] = ( in[28] >> 0 ) & 0xffff ;
	out[57] = ( in[29] >> 0 ) & 0xffff ;
	out[58] = ( in[30] >> 0 ) & 0xffff ;
	out[59] = ( in[31] >> 0 ) & 0xffff ;

	out[60] = ( in[28] >> 16 ) ;
	out[61] = ( in[29] >> 16 ) ;
	out[62] = ( in[30] >> 16 ) ;
	out[63] = ( in[31] >> 16 ) ;

	out[64] = ( in[32] >> 0 ) & 0xffff ;
	out[65] = ( in[33] >> 0 ) & 0xffff ;
	out[66] = ( in[34] >> 0 ) & 0xffff ;
	out[67] = ( in[35] >> 0 ) & 0xffff ;

	out[68] = ( in[32] >> 16 ) ;
	out[69] = ( in[33] >> 16 ) ;
	out[70] = ( in[34] >> 16 ) ;
	out[71] = ( in[35] >> 16 ) ;

	out[72] = ( in[36] >> 0 ) & 0xffff ;
	out[73] = ( in[37] >> 0 ) & 0xffff ;
	out[74] = ( in[38] >> 0 ) & 0xffff ;
	out[75] = ( in[39] >> 0 ) & 0xffff ;

	out[76] = ( in[36] >> 16 ) ;
	out[77] = ( in[37] >> 16 ) ;
	out[78] = ( in[38] >> 16 ) ;
	out[79] = ( in[39] >> 16 ) ;

	out[80] = ( in[40] >> 0 ) & 0xffff ;
	out[81] = ( in[41] >> 0 ) & 0xffff ;
	out[82] = ( in[42] >> 0 ) & 0xffff ;
	out[83] = ( in[43] >> 0 ) & 0xffff ;

	out[84] = ( in[40] >> 16 ) ;
	out[85] = ( in[41] >> 16 ) ;
	out[86] = ( in[42] >> 16 ) ;
	out[87] = ( in[43] >> 16 ) ;

	out[88] = ( in[44] >> 0 ) & 0xffff ;
	out[89] = ( in[45] >> 0 ) & 0xffff ;
	out[90] = ( in[46] >> 0 ) & 0xffff ;
	out[91] = ( in[47] >> 0 ) & 0xffff ;

	out[92] = ( in[44] >> 16 ) ;
	out[93] = ( in[45] >> 16 ) ;
	out[94] = ( in[46] >> 16 ) ;
	out[95] = ( in[47] >> 16 ) ;

	out[96] = ( in[48] >> 0 ) & 0xffff ;
	out[97] = ( in[49] >> 0 ) & 0xffff ;
	out[98] = ( in[50] >> 0 ) & 0xffff ;
	out[99] = ( in[51] >> 0 ) & 0xffff ;

	out[100] = ( in[48] >> 16 ) ;
	out[101] = ( in[49] >> 16 ) ;
	out[102] = ( in[50] >> 16 ) ;
	out[103] = ( in[51] >> 16 ) ;

	out[104] = ( in[52] >> 0 ) & 0xffff ;
	out[105] = ( in[53] >> 0 ) & 0xffff ;
	out[106] = ( in[54] >> 0 ) & 0xffff ;
	out[107] = ( in[55] >> 0 ) & 0xffff ;

	out[108] = ( in[52] >> 16 ) ;
	out[109] = ( in[53] >> 16 ) ;
	out[110] = ( in[54] >> 16 ) ;
	out[111] = ( in[55] >> 16 ) ;

	out[112] = ( in[56] >> 0 ) & 0xffff ;
	out[113] = ( in[57] >> 0 ) & 0xffff ;
	out[114] = ( in[58] >> 0 ) & 0xffff ;
	out[115] = ( in[59] >> 0 ) & 0xffff ;

	out[116] = ( in[56] >> 16 ) ;
	out[117] = ( in[57] >> 16 ) ;
	out[118] = ( in[58] >> 16 ) ;
	out[119] = ( in[59] >> 16 ) ;

	out[120] = ( in[60] >> 0 ) & 0xffff ;
	out[121] = ( in[61] >> 0 ) & 0xffff ;
	out[122] = ( in[62] >> 0 ) & 0xffff ;
	out[123] = ( in[63] >> 0 ) & 0xffff ;

	out[124] = ( in[60] >> 16 ) ;
	out[125] = ( in[61] >> 16 ) ;
	out[126] = ( in[62] >> 16 ) ;
	out[127] = ( in[63] >> 16 ) ;
}


// 17-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c17(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x01ffff ;
	out[1] = ( in[1] >> 0 ) & 0x01ffff ;
	out[2] = ( in[2] >> 0 ) & 0x01ffff ;
	out[3] = ( in[3] >> 0 ) & 0x01ffff ;

	out[4] = ( in[0] >> 17 ) ;
	out[5] = ( in[1] >> 17 ) ;
	out[6] = ( in[2] >> 17 ) ;
	out[7] = ( in[3] >> 17 ) ;

	out[4] |= ( in[4] << ( 32 - 17 ) ) & 0x01ffff ;
	out[5] |= ( in[5] << ( 32 - 17 ) ) & 0x01ffff ;
	out[6] |= ( in[6] << ( 32 - 17 ) ) & 0x01ffff ;
	out[7] |= ( in[7] << ( 32 - 17 ) ) & 0x01ffff ;

	out[8] = ( in[4] >> 2 ) & 0x01ffff ;
	out[9] = ( in[5] >> 2 ) & 0x01ffff ;
	out[10] = ( in[6] >> 2 ) & 0x01ffff ;
	out[11] = ( in[7] >> 2 ) & 0x01ffff ;

	out[12] = ( in[4] >> 19 ) ;
	out[13] = ( in[5] >> 19 ) ;
	out[14] = ( in[6] >> 19 ) ;
	out[15] = ( in[7] >> 19 ) ;

	out[12] |= ( in[8] << ( 32 - 19 ) ) & 0x01ffff ;
	out[13] |= ( in[9] << ( 32 - 19 ) ) & 0x01ffff ;
	out[14] |= ( in[10] << ( 32 - 19 ) ) & 0x01ffff ;
	out[15] |= ( in[11] << ( 32 - 19 ) ) & 0x01ffff ;

	out[16] = ( in[8] >> 4 ) & 0x01ffff ;
	out[17] = ( in[9] >> 4 ) & 0x01ffff ;
	out[18] = ( in[10] >> 4 ) & 0x01ffff ;
	out[19] = ( in[11] >> 4 ) & 0x01ffff ;

	out[20] = ( in[8] >> 21 ) ;
	out[21] = ( in[9] >> 21 ) ;
	out[22] = ( in[10] >> 21 ) ;
	out[23] = ( in[11] >> 21 ) ;

	out[20] |= ( in[12] << ( 32 - 21 ) ) & 0x01ffff ;
	out[21] |= ( in[13] << ( 32 - 21 ) ) & 0x01ffff ;
	out[22] |= ( in[14] << ( 32 - 21 ) ) & 0x01ffff ;
	out[23] |= ( in[15] << ( 32 - 21 ) ) & 0x01ffff ;

	out[24] = ( in[12] >> 6 ) & 0x01ffff ;
	out[25] = ( in[13] >> 6 ) & 0x01ffff ;
	out[26] = ( in[14] >> 6 ) & 0x01ffff ;
	out[27] = ( in[15] >> 6 ) & 0x01ffff ;

	out[28] = ( in[12] >> 23 ) ;
	out[29] = ( in[13] >> 23 ) ;
	out[30] = ( in[14] >> 23 ) ;
	out[31] = ( in[15] >> 23 ) ;

	out[28] |= ( in[16] << ( 32 - 23 ) ) & 0x01ffff ;
	out[29] |= ( in[17] << ( 32 - 23 ) ) & 0x01ffff ;
	out[30] |= ( in[18] << ( 32 - 23 ) ) & 0x01ffff ;
	out[31] |= ( in[19] << ( 32 - 23 ) ) & 0x01ffff ;

	out[32] = ( in[16] >> 8 ) & 0x01ffff ;
	out[33] = ( in[17] >> 8 ) & 0x01ffff ;
	out[34] = ( in[18] >> 8 ) & 0x01ffff ;
	out[35] = ( in[19] >> 8 ) & 0x01ffff ;

	out[36] = ( in[16] >> 25 ) ;
	out[37] = ( in[17] >> 25 ) ;
	out[38] = ( in[18] >> 25 ) ;
	out[39] = ( in[19] >> 25 ) ;

	out[36] |= ( in[20] << ( 32 - 25 ) ) & 0x01ffff ;
	out[37] |= ( in[21] << ( 32 - 25 ) ) & 0x01ffff ;
	out[38] |= ( in[22] << ( 32 - 25 ) ) & 0x01ffff ;
	out[39] |= ( in[23] << ( 32 - 25 ) ) & 0x01ffff ;

	out[40] = ( in[20] >> 10 ) & 0x01ffff ;
	out[41] = ( in[21] >> 10 ) & 0x01ffff ;
	out[42] = ( in[22] >> 10 ) & 0x01ffff ;
	out[43] = ( in[23] >> 10 ) & 0x01ffff ;

	out[44] = ( in[20] >> 27 ) ;
	out[45] = ( in[21] >> 27 ) ;
	out[46] = ( in[22] >> 27 ) ;
	out[47] = ( in[23] >> 27 ) ;

	out[44] |= ( in[24] << ( 32 - 27 ) ) & 0x01ffff ;
	out[45] |= ( in[25] << ( 32 - 27 ) ) & 0x01ffff ;
	out[46] |= ( in[26] << ( 32 - 27 ) ) & 0x01ffff ;
	out[47] |= ( in[27] << ( 32 - 27 ) ) & 0x01ffff ;

	out[48] = ( in[24] >> 12 ) & 0x01ffff ;
	out[49] = ( in[25] >> 12 ) & 0x01ffff ;
	out[50] = ( in[26] >> 12 ) & 0x01ffff ;
	out[51] = ( in[27] >> 12 ) & 0x01ffff ;

	out[52] = ( in[24] >> 29 ) ;
	out[53] = ( in[25] >> 29 ) ;
	out[54] = ( in[26] >> 29 ) ;
	out[55] = ( in[27] >> 29 ) ;

	out[52] |= ( in[28] << ( 32 - 29 ) ) & 0x01ffff ;
	out[53] |= ( in[29] << ( 32 - 29 ) ) & 0x01ffff ;
	out[54] |= ( in[30] << ( 32 - 29 ) ) & 0x01ffff ;
	out[55] |= ( in[31] << ( 32 - 29 ) ) & 0x01ffff ;

	out[56] = ( in[28] >> 14 ) & 0x01ffff ;
	out[57] = ( in[29] >> 14 ) & 0x01ffff ;
	out[58] = ( in[30] >> 14 ) & 0x01ffff ;
	out[59] = ( in[31] >> 14 ) & 0x01ffff ;

	out[60] = ( in[28] >> 31 ) ;
	out[61] = ( in[29] >> 31 ) ;
	out[62] = ( in[30] >> 31 ) ;
	out[63] = ( in[31] >> 31 ) ;

	out[60] |= ( in[32] << ( 32 - 31 ) ) & 0x01ffff ;
	out[61] |= ( in[33] << ( 32 - 31 ) ) & 0x01ffff ;
	out[62] |= ( in[34] << ( 32 - 31 ) ) & 0x01ffff ;
	out[63] |= ( in[35] << ( 32 - 31 ) ) & 0x01ffff ;

	out[64] = ( in[32] >> 16 ) ;
	out[65] = ( in[33] >> 16 ) ;
	out[66] = ( in[34] >> 16 ) ;
	out[67] = ( in[35] >> 16 ) ;

	out[64] |= ( in[36] << ( 32 - 16 ) ) & 0x01ffff ;
	out[65] |= ( in[37] << ( 32 - 16 ) ) & 0x01ffff ;
	out[66] |= ( in[38] << ( 32 - 16 ) ) & 0x01ffff ;
	out[67] |= ( in[39] << ( 32 - 16 ) ) & 0x01ffff ;

	out[68] = ( in[36] >> 1 ) & 0x01ffff ;
	out[69] = ( in[37] >> 1 ) & 0x01ffff ;
	out[70] = ( in[38] >> 1 ) & 0x01ffff ;
	out[71] = ( in[39] >> 1 ) & 0x01ffff ;

	out[72] = ( in[36] >> 18 ) ;
	out[73] = ( in[37] >> 18 ) ;
	out[74] = ( in[38] >> 18 ) ;
	out[75] = ( in[39] >> 18 ) ;

	out[72] |= ( in[40] << ( 32 - 18 ) ) & 0x01ffff ;
	out[73] |= ( in[41] << ( 32 - 18 ) ) & 0x01ffff ;
	out[74] |= ( in[42] << ( 32 - 18 ) ) & 0x01ffff ;
	out[75] |= ( in[43] << ( 32 - 18 ) ) & 0x01ffff ;

	out[76] = ( in[40] >> 3 ) & 0x01ffff ;
	out[77] = ( in[41] >> 3 ) & 0x01ffff ;
	out[78] = ( in[42] >> 3 ) & 0x01ffff ;
	out[79] = ( in[43] >> 3 ) & 0x01ffff ;

	out[80] = ( in[40] >> 20 ) ;
	out[81] = ( in[41] >> 20 ) ;
	out[82] = ( in[42] >> 20 ) ;
	out[83] = ( in[43] >> 20 ) ;

	out[80] |= ( in[44] << ( 32 - 20 ) ) & 0x01ffff ;
	out[81] |= ( in[45] << ( 32 - 20 ) ) & 0x01ffff ;
	out[82] |= ( in[46] << ( 32 - 20 ) ) & 0x01ffff ;
	out[83] |= ( in[47] << ( 32 - 20 ) ) & 0x01ffff ;

	out[84] = ( in[44] >> 5 ) & 0x01ffff ;
	out[85] = ( in[45] >> 5 ) & 0x01ffff ;
	out[86] = ( in[46] >> 5 ) & 0x01ffff ;
	out[87] = ( in[47] >> 5 ) & 0x01ffff ;

	out[88] = ( in[44] >> 22 ) ;
	out[89] = ( in[45] >> 22 ) ;
	out[90] = ( in[46] >> 22 ) ;
	out[91] = ( in[47] >> 22 ) ;

	out[88] |= ( in[48] << ( 32 - 22 ) ) & 0x01ffff ;
	out[89] |= ( in[49] << ( 32 - 22 ) ) & 0x01ffff ;
	out[90] |= ( in[50] << ( 32 - 22 ) ) & 0x01ffff ;
	out[91] |= ( in[51] << ( 32 - 22 ) ) & 0x01ffff ;

	out[92] = ( in[48] >> 7 ) & 0x01ffff ;
	out[93] = ( in[49] >> 7 ) & 0x01ffff ;
	out[94] = ( in[50] >> 7 ) & 0x01ffff ;
	out[95] = ( in[51] >> 7 ) & 0x01ffff ;

	out[96] = ( in[48] >> 24 ) ;
	out[97] = ( in[49] >> 24 ) ;
	out[98] = ( in[50] >> 24 ) ;
	out[99] = ( in[51] >> 24 ) ;

	out[96] |= ( in[52] << ( 32 - 24 ) ) & 0x01ffff ;
	out[97] |= ( in[53] << ( 32 - 24 ) ) & 0x01ffff ;
	out[98] |= ( in[54] << ( 32 - 24 ) ) & 0x01ffff ;
	out[99] |= ( in[55] << ( 32 - 24 ) ) & 0x01ffff ;

	out[100] = ( in[52] >> 9 ) & 0x01ffff ;
	out[101] = ( in[53] >> 9 ) & 0x01ffff ;
	out[102] = ( in[54] >> 9 ) & 0x01ffff ;
	out[103] = ( in[55] >> 9 ) & 0x01ffff ;

	out[104] = ( in[52] >> 26 ) ;
	out[105] = ( in[53] >> 26 ) ;
	out[106] = ( in[54] >> 26 ) ;
	out[107] = ( in[55] >> 26 ) ;

	out[104] |= ( in[56] << ( 32 - 26 ) ) & 0x01ffff ;
	out[105] |= ( in[57] << ( 32 - 26 ) ) & 0x01ffff ;
	out[106] |= ( in[58] << ( 32 - 26 ) ) & 0x01ffff ;
	out[107] |= ( in[59] << ( 32 - 26 ) ) & 0x01ffff ;

	out[108] = ( in[56] >> 11 ) & 0x01ffff ;
	out[109] = ( in[57] >> 11 ) & 0x01ffff ;
	out[110] = ( in[58] >> 11 ) & 0x01ffff ;
	out[111] = ( in[59] >> 11 ) & 0x01ffff ;

	out[112] = ( in[56] >> 28 ) ;
	out[113] = ( in[57] >> 28 ) ;
	out[114] = ( in[58] >> 28 ) ;
	out[115] = ( in[59] >> 28 ) ;

	out[112] |= ( in[60] << ( 32 - 28 ) ) & 0x01ffff ;
	out[113] |= ( in[61] << ( 32 - 28 ) ) & 0x01ffff ;
	out[114] |= ( in[62] << ( 32 - 28 ) ) & 0x01ffff ;
	out[115] |= ( in[63] << ( 32 - 28 ) ) & 0x01ffff ;

	out[116] = ( in[60] >> 13 ) & 0x01ffff ;
	out[117] = ( in[61] >> 13 ) & 0x01ffff ;
	out[118] = ( in[62] >> 13 ) & 0x01ffff ;
	out[119] = ( in[63] >> 13 ) & 0x01ffff ;

	out[120] = ( in[60] >> 30 ) ;
	out[121] = ( in[61] >> 30 ) ;
	out[122] = ( in[62] >> 30 ) ;
	out[123] = ( in[63] >> 30 ) ;

	out[120] |= ( in[64] << ( 32 - 30 ) ) & 0x01ffff ;
	out[121] |= ( in[65] << ( 32 - 30 ) ) & 0x01ffff ;
	out[122] |= ( in[66] << ( 32 - 30 ) ) & 0x01ffff ;
	out[123] |= ( in[67] << ( 32 - 30 ) ) & 0x01ffff ;

	out[124] = ( in[64] >> 15 ) ;
	out[125] = ( in[65] >> 15 ) ;
	out[126] = ( in[66] >> 15 ) ;
	out[127] = ( in[67] >> 15 ) ;
}


// 18-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c18(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x03ffff ;
	out[1] = ( in[1] >> 0 ) & 0x03ffff ;
	out[2] = ( in[2] >> 0 ) & 0x03ffff ;
	out[3] = ( in[3] >> 0 ) & 0x03ffff ;

	out[4] = ( in[0] >> 18 ) ;
	out[5] = ( in[1] >> 18 ) ;
	out[6] = ( in[2] >> 18 ) ;
	out[7] = ( in[3] >> 18 ) ;

	out[4] |= ( in[4] << ( 32 - 18 ) ) & 0x03ffff ;
	out[5] |= ( in[5] << ( 32 - 18 ) ) & 0x03ffff ;
	out[6] |= ( in[6] << ( 32 - 18 ) ) & 0x03ffff ;
	out[7] |= ( in[7] << ( 32 - 18 ) ) & 0x03ffff ;

	out[8] = ( in[4] >> 4 ) & 0x03ffff ;
	out[9] = ( in[5] >> 4 ) & 0x03ffff ;
	out[10] = ( in[6] >> 4 ) & 0x03ffff ;
	out[11] = ( in[7] >> 4 ) & 0x03ffff ;

	out[12] = ( in[4] >> 22 ) ;
	out[13] = ( in[5] >> 22 ) ;
	out[14] = ( in[6] >> 22 ) ;
	out[15] = ( in[7] >> 22 ) ;

	out[12] |= ( in[8] << ( 32 - 22 ) ) & 0x03ffff ;
	out[13] |= ( in[9] << ( 32 - 22 ) ) & 0x03ffff ;
	out[14] |= ( in[10] << ( 32 - 22 ) ) & 0x03ffff ;
	out[15] |= ( in[11] << ( 32 - 22 ) ) & 0x03ffff ;

	out[16] = ( in[8] >> 8 ) & 0x03ffff ;
	out[17] = ( in[9] >> 8 ) & 0x03ffff ;
	out[18] = ( in[10] >> 8 ) & 0x03ffff ;
	out[19] = ( in[11] >> 8 ) & 0x03ffff ;

	out[20] = ( in[8] >> 26 ) ;
	out[21] = ( in[9] >> 26 ) ;
	out[22] = ( in[10] >> 26 ) ;
	out[23] = ( in[11] >> 26 ) ;

	out[20] |= ( in[12] << ( 32 - 26 ) ) & 0x03ffff ;
	out[21] |= ( in[13] << ( 32 - 26 ) ) & 0x03ffff ;
	out[22] |= ( in[14] << ( 32 - 26 ) ) & 0x03ffff ;
	out[23] |= ( in[15] << ( 32 - 26 ) ) & 0x03ffff ;

	out[24] = ( in[12] >> 12 ) & 0x03ffff ;
	out[25] = ( in[13] >> 12 ) & 0x03ffff ;
	out[26] = ( in[14] >> 12 ) & 0x03ffff ;
	out[27] = ( in[15] >> 12 ) & 0x03ffff ;

	out[28] = ( in[12] >> 30 ) ;
	out[29] = ( in[13] >> 30 ) ;
	out[30] = ( in[14] >> 30 ) ;
	out[31] = ( in[15] >> 30 ) ;

	out[28] |= ( in[16] << ( 32 - 30 ) ) & 0x03ffff ;
	out[29] |= ( in[17] << ( 32 - 30 ) ) & 0x03ffff ;
	out[30] |= ( in[18] << ( 32 - 30 ) ) & 0x03ffff ;
	out[31] |= ( in[19] << ( 32 - 30 ) ) & 0x03ffff ;

	out[32] = ( in[16] >> 16 ) ;
	out[33] = ( in[17] >> 16 ) ;
	out[34] = ( in[18] >> 16 ) ;
	out[35] = ( in[19] >> 16 ) ;

	out[32] |= ( in[20] << ( 32 - 16 ) ) & 0x03ffff ;
	out[33] |= ( in[21] << ( 32 - 16 ) ) & 0x03ffff ;
	out[34] |= ( in[22] << ( 32 - 16 ) ) & 0x03ffff ;
	out[35] |= ( in[23] << ( 32 - 16 ) ) & 0x03ffff ;

	out[36] = ( in[20] >> 2 ) & 0x03ffff ;
	out[37] = ( in[21] >> 2 ) & 0x03ffff ;
	out[38] = ( in[22] >> 2 ) & 0x03ffff ;
	out[39] = ( in[23] >> 2 ) & 0x03ffff ;

	out[40] = ( in[20] >> 20 ) ;
	out[41] = ( in[21] >> 20 ) ;
	out[42] = ( in[22] >> 20 ) ;
	out[43] = ( in[23] >> 20 ) ;

	out[40] |= ( in[24] << ( 32 - 20 ) ) & 0x03ffff ;
	out[41] |= ( in[25] << ( 32 - 20 ) ) & 0x03ffff ;
	out[42] |= ( in[26] << ( 32 - 20 ) ) & 0x03ffff ;
	out[43] |= ( in[27] << ( 32 - 20 ) ) & 0x03ffff ;

	out[44] = ( in[24] >> 6 ) & 0x03ffff ;
	out[45] = ( in[25] >> 6 ) & 0x03ffff ;
	out[46] = ( in[26] >> 6 ) & 0x03ffff ;
	out[47] = ( in[27] >> 6 ) & 0x03ffff ;

	out[48] = ( in[24] >> 24 ) ;
	out[49] = ( in[25] >> 24 ) ;
	out[50] = ( in[26] >> 24 ) ;
	out[51] = ( in[27] >> 24 ) ;

	out[48] |= ( in[28] << ( 32 - 24 ) ) & 0x03ffff ;
	out[49] |= ( in[29] << ( 32 - 24 ) ) & 0x03ffff ;
	out[50] |= ( in[30] << ( 32 - 24 ) ) & 0x03ffff ;
	out[51] |= ( in[31] << ( 32 - 24 ) ) & 0x03ffff ;

	out[52] = ( in[28] >> 10 ) & 0x03ffff ;
	out[53] = ( in[29] >> 10 ) & 0x03ffff ;
	out[54] = ( in[30] >> 10 ) & 0x03ffff ;
	out[55] = ( in[31] >> 10 ) & 0x03ffff ;

	out[56] = ( in[28] >> 28 ) ;
	out[57] = ( in[29] >> 28 ) ;
	out[58] = ( in[30] >> 28 ) ;
	out[59] = ( in[31] >> 28 ) ;

	out[56] |= ( in[32] << ( 32 - 28 ) ) & 0x03ffff ;
	out[57] |= ( in[33] << ( 32 - 28 ) ) & 0x03ffff ;
	out[58] |= ( in[34] << ( 32 - 28 ) ) & 0x03ffff ;
	out[59] |= ( in[35] << ( 32 - 28 ) ) & 0x03ffff ;

	out[60] = ( in[32] >> 14 ) ;
	out[61] = ( in[33] >> 14 ) ;
	out[62] = ( in[34] >> 14 ) ;
	out[63] = ( in[35] >> 14 ) ;

	out[64] = ( in[36] >> 0 ) & 0x03ffff ;
	out[65] = ( in[37] >> 0 ) & 0x03ffff ;
	out[66] = ( in[38] >> 0 ) & 0x03ffff ;
	out[67] = ( in[39] >> 0 ) & 0x03ffff ;

	out[68] = ( in[36] >> 18 ) ;
	out[69] = ( in[37] >> 18 ) ;
	out[70] = ( in[38] >> 18 ) ;
	out[71] = ( in[39] >> 18 ) ;

	out[68] |= ( in[40] << ( 32 - 18 ) ) & 0x03ffff ;
	out[69] |= ( in[41] << ( 32 - 18 ) ) & 0x03ffff ;
	out[70] |= ( in[42] << ( 32 - 18 ) ) & 0x03ffff ;
	out[71] |= ( in[43] << ( 32 - 18 ) ) & 0x03ffff ;

	out[72] = ( in[40] >> 4 ) & 0x03ffff ;
	out[73] = ( in[41] >> 4 ) & 0x03ffff ;
	out[74] = ( in[42] >> 4 ) & 0x03ffff ;
	out[75] = ( in[43] >> 4 ) & 0x03ffff ;

	out[76] = ( in[40] >> 22 ) ;
	out[77] = ( in[41] >> 22 ) ;
	out[78] = ( in[42] >> 22 ) ;
	out[79] = ( in[43] >> 22 ) ;

	out[76] |= ( in[44] << ( 32 - 22 ) ) & 0x03ffff ;
	out[77] |= ( in[45] << ( 32 - 22 ) ) & 0x03ffff ;
	out[78] |= ( in[46] << ( 32 - 22 ) ) & 0x03ffff ;
	out[79] |= ( in[47] << ( 32 - 22 ) ) & 0x03ffff ;

	out[80] = ( in[44] >> 8 ) & 0x03ffff ;
	out[81] = ( in[45] >> 8 ) & 0x03ffff ;
	out[82] = ( in[46] >> 8 ) & 0x03ffff ;
	out[83] = ( in[47] >> 8 ) & 0x03ffff ;

	out[84] = ( in[44] >> 26 ) ;
	out[85] = ( in[45] >> 26 ) ;
	out[86] = ( in[46] >> 26 ) ;
	out[87] = ( in[47] >> 26 ) ;

	out[84] |= ( in[48] << ( 32 - 26 ) ) & 0x03ffff ;
	out[85] |= ( in[49] << ( 32 - 26 ) ) & 0x03ffff ;
	out[86] |= ( in[50] << ( 32 - 26 ) ) & 0x03ffff ;
	out[87] |= ( in[51] << ( 32 - 26 ) ) & 0x03ffff ;

	out[88] = ( in[48] >> 12 ) & 0x03ffff ;
	out[89] = ( in[49] >> 12 ) & 0x03ffff ;
	out[90] = ( in[50] >> 12 ) & 0x03ffff ;
	out[91] = ( in[51] >> 12 ) & 0x03ffff ;

	out[92] = ( in[48] >> 30 ) ;
	out[93] = ( in[49] >> 30 ) ;
	out[94] = ( in[50] >> 30 ) ;
	out[95] = ( in[51] >> 30 ) ;

	out[92] |= ( in[52] << ( 32 - 30 ) ) & 0x03ffff ;
	out[93] |= ( in[53] << ( 32 - 30 ) ) & 0x03ffff ;
	out[94] |= ( in[54] << ( 32 - 30 ) ) & 0x03ffff ;
	out[95] |= ( in[55] << ( 32 - 30 ) ) & 0x03ffff ;

	out[96] = ( in[52] >> 16 ) ;
	out[97] = ( in[53] >> 16 ) ;
	out[98] = ( in[54] >> 16 ) ;
	out[99] = ( in[55] >> 16 ) ;

	out[96] |= ( in[56] << ( 32 - 16 ) ) & 0x03ffff ;
	out[97] |= ( in[57] << ( 32 - 16 ) ) & 0x03ffff ;
	out[98] |= ( in[58] << ( 32 - 16 ) ) & 0x03ffff ;
	out[99] |= ( in[59] << ( 32 - 16 ) ) & 0x03ffff ;

	out[100] = ( in[56] >> 2 ) & 0x03ffff ;
	out[101] = ( in[57] >> 2 ) & 0x03ffff ;
	out[102] = ( in[58] >> 2 ) & 0x03ffff ;
	out[103] = ( in[59] >> 2 ) & 0x03ffff ;

	out[104] = ( in[56] >> 20 ) ;
	out[105] = ( in[57] >> 20 ) ;
	out[106] = ( in[58] >> 20 ) ;
	out[107] = ( in[59] >> 20 ) ;

	out[104] |= ( in[60] << ( 32 - 20 ) ) & 0x03ffff ;
	out[105] |= ( in[61] << ( 32 - 20 ) ) & 0x03ffff ;
	out[106] |= ( in[62] << ( 32 - 20 ) ) & 0x03ffff ;
	out[107] |= ( in[63] << ( 32 - 20 ) ) & 0x03ffff ;

	out[108] = ( in[60] >> 6 ) & 0x03ffff ;
	out[109] = ( in[61] >> 6 ) & 0x03ffff ;
	out[110] = ( in[62] >> 6 ) & 0x03ffff ;
	out[111] = ( in[63] >> 6 ) & 0x03ffff ;

	out[112] = ( in[60] >> 24 ) ;
	out[113] = ( in[61] >> 24 ) ;
	out[114] = ( in[62] >> 24 ) ;
	out[115] = ( in[63] >> 24 ) ;

	out[112] |= ( in[64] << ( 32 - 24 ) ) & 0x03ffff ;
	out[113] |= ( in[65] << ( 32 - 24 ) ) & 0x03ffff ;
	out[114] |= ( in[66] << ( 32 - 24 ) ) & 0x03ffff ;
	out[115] |= ( in[67] << ( 32 - 24 ) ) & 0x03ffff ;

	out[116] = ( in[64] >> 10 ) & 0x03ffff ;
	out[117] = ( in[65] >> 10 ) & 0x03ffff ;
	out[118] = ( in[66] >> 10 ) & 0x03ffff ;
	out[119] = ( in[67] >> 10 ) & 0x03ffff ;

	out[120] = ( in[64] >> 28 ) ;
	out[121] = ( in[65] >> 28 ) ;
	out[122] = ( in[66] >> 28 ) ;
	out[123] = ( in[67] >> 28 ) ;

	out[120] |= ( in[68] << ( 32 - 28 ) ) & 0x03ffff ;
	out[121] |= ( in[69] << ( 32 - 28 ) ) & 0x03ffff ;
	out[122] |= ( in[70] << ( 32 - 28 ) ) & 0x03ffff ;
	out[123] |= ( in[71] << ( 32 - 28 ) ) & 0x03ffff ;

	out[124] = ( in[68] >> 14 ) ;
	out[125] = ( in[69] >> 14 ) ;
	out[126] = ( in[70] >> 14 ) ;
	out[127] = ( in[71] >> 14 ) ;
}


// 19-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c19(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x07ffff ;
	out[1] = ( in[1] >> 0 ) & 0x07ffff ;
	out[2] = ( in[2] >> 0 ) & 0x07ffff ;
	out[3] = ( in[3] >> 0 ) & 0x07ffff ;

	out[4] = ( in[0] >> 19 ) ;
	out[5] = ( in[1] >> 19 ) ;
	out[6] = ( in[2] >> 19 ) ;
	out[7] = ( in[3] >> 19 ) ;

	out[4] |= ( in[4] << ( 32 - 19 ) ) & 0x07ffff ;
	out[5] |= ( in[5] << ( 32 - 19 ) ) & 0x07ffff ;
	out[6] |= ( in[6] << ( 32 - 19 ) ) & 0x07ffff ;
	out[7] |= ( in[7] << ( 32 - 19 ) ) & 0x07ffff ;

	out[8] = ( in[4] >> 6 ) & 0x07ffff ;
	out[9] = ( in[5] >> 6 ) & 0x07ffff ;
	out[10] = ( in[6] >> 6 ) & 0x07ffff ;
	out[11] = ( in[7] >> 6 ) & 0x07ffff ;

	out[12] = ( in[4] >> 25 ) ;
	out[13] = ( in[5] >> 25 ) ;
	out[14] = ( in[6] >> 25 ) ;
	out[15] = ( in[7] >> 25 ) ;

	out[12] |= ( in[8] << ( 32 - 25 ) ) & 0x07ffff ;
	out[13] |= ( in[9] << ( 32 - 25 ) ) & 0x07ffff ;
	out[14] |= ( in[10] << ( 32 - 25 ) ) & 0x07ffff ;
	out[15] |= ( in[11] << ( 32 - 25 ) ) & 0x07ffff ;

	out[16] = ( in[8] >> 12 ) & 0x07ffff ;
	out[17] = ( in[9] >> 12 ) & 0x07ffff ;
	out[18] = ( in[10] >> 12 ) & 0x07ffff ;
	out[19] = ( in[11] >> 12 ) & 0x07ffff ;

	out[20] = ( in[8] >> 31 ) ;
	out[21] = ( in[9] >> 31 ) ;
	out[22] = ( in[10] >> 31 ) ;
	out[23] = ( in[11] >> 31 ) ;

	out[20] |= ( in[12] << ( 32 - 31 ) ) & 0x07ffff ;
	out[21] |= ( in[13] << ( 32 - 31 ) ) & 0x07ffff ;
	out[22] |= ( in[14] << ( 32 - 31 ) ) & 0x07ffff ;
	out[23] |= ( in[15] << ( 32 - 31 ) ) & 0x07ffff ;

	out[24] = ( in[12] >> 18 ) ;
	out[25] = ( in[13] >> 18 ) ;
	out[26] = ( in[14] >> 18 ) ;
	out[27] = ( in[15] >> 18 ) ;

	out[24] |= ( in[16] << ( 32 - 18 ) ) & 0x07ffff ;
	out[25] |= ( in[17] << ( 32 - 18 ) ) & 0x07ffff ;
	out[26] |= ( in[18] << ( 32 - 18 ) ) & 0x07ffff ;
	out[27] |= ( in[19] << ( 32 - 18 ) ) & 0x07ffff ;

	out[28] = ( in[16] >> 5 ) & 0x07ffff ;
	out[29] = ( in[17] >> 5 ) & 0x07ffff ;
	out[30] = ( in[18] >> 5 ) & 0x07ffff ;
	out[31] = ( in[19] >> 5 ) & 0x07ffff ;

	out[32] = ( in[16] >> 24 ) ;
	out[33] = ( in[17] >> 24 ) ;
	out[34] = ( in[18] >> 24 ) ;
	out[35] = ( in[19] >> 24 ) ;

	out[32] |= ( in[20] << ( 32 - 24 ) ) & 0x07ffff ;
	out[33] |= ( in[21] << ( 32 - 24 ) ) & 0x07ffff ;
	out[34] |= ( in[22] << ( 32 - 24 ) ) & 0x07ffff ;
	out[35] |= ( in[23] << ( 32 - 24 ) ) & 0x07ffff ;

	out[36] = ( in[20] >> 11 ) & 0x07ffff ;
	out[37] = ( in[21] >> 11 ) & 0x07ffff ;
	out[38] = ( in[22] >> 11 ) & 0x07ffff ;
	out[39] = ( in[23] >> 11 ) & 0x07ffff ;

	out[40] = ( in[20] >> 30 ) ;
	out[41] = ( in[21] >> 30 ) ;
	out[42] = ( in[22] >> 30 ) ;
	out[43] = ( in[23] >> 30 ) ;

	out[40] |= ( in[24] << ( 32 - 30 ) ) & 0x07ffff ;
	out[41] |= ( in[25] << ( 32 - 30 ) ) & 0x07ffff ;
	out[42] |= ( in[26] << ( 32 - 30 ) ) & 0x07ffff ;
	out[43] |= ( in[27] << ( 32 - 30 ) ) & 0x07ffff ;

	out[44] = ( in[24] >> 17 ) ;
	out[45] = ( in[25] >> 17 ) ;
	out[46] = ( in[26] >> 17 ) ;
	out[47] = ( in[27] >> 17 ) ;

	out[44] |= ( in[28] << ( 32 - 17 ) ) & 0x07ffff ;
	out[45] |= ( in[29] << ( 32 - 17 ) ) & 0x07ffff ;
	out[46] |= ( in[30] << ( 32 - 17 ) ) & 0x07ffff ;
	out[47] |= ( in[31] << ( 32 - 17 ) ) & 0x07ffff ;

	out[48] = ( in[28] >> 4 ) & 0x07ffff ;
	out[49] = ( in[29] >> 4 ) & 0x07ffff ;
	out[50] = ( in[30] >> 4 ) & 0x07ffff ;
	out[51] = ( in[31] >> 4 ) & 0x07ffff ;

	out[52] = ( in[28] >> 23 ) ;
	out[53] = ( in[29] >> 23 ) ;
	out[54] = ( in[30] >> 23 ) ;
	out[55] = ( in[31] >> 23 ) ;

	out[52] |= ( in[32] << ( 32 - 23 ) ) & 0x07ffff ;
	out[53] |= ( in[33] << ( 32 - 23 ) ) & 0x07ffff ;
	out[54] |= ( in[34] << ( 32 - 23 ) ) & 0x07ffff ;
	out[55] |= ( in[35] << ( 32 - 23 ) ) & 0x07ffff ;

	out[56] = ( in[32] >> 10 ) & 0x07ffff ;
	out[57] = ( in[33] >> 10 ) & 0x07ffff ;
	out[58] = ( in[34] >> 10 ) & 0x07ffff ;
	out[59] = ( in[35] >> 10 ) & 0x07ffff ;

	out[60] = ( in[32] >> 29 ) ;
	out[61] = ( in[33] >> 29 ) ;
	out[62] = ( in[34] >> 29 ) ;
	out[63] = ( in[35] >> 29 ) ;

	out[60] |= ( in[36] << ( 32 - 29 ) ) & 0x07ffff ;
	out[61] |= ( in[37] << ( 32 - 29 ) ) & 0x07ffff ;
	out[62] |= ( in[38] << ( 32 - 29 ) ) & 0x07ffff ;
	out[63] |= ( in[39] << ( 32 - 29 ) ) & 0x07ffff ;

	out[64] = ( in[36] >> 16 ) ;
	out[65] = ( in[37] >> 16 ) ;
	out[66] = ( in[38] >> 16 ) ;
	out[67] = ( in[39] >> 16 ) ;

	out[64] |= ( in[40] << ( 32 - 16 ) ) & 0x07ffff ;
	out[65] |= ( in[41] << ( 32 - 16 ) ) & 0x07ffff ;
	out[66] |= ( in[42] << ( 32 - 16 ) ) & 0x07ffff ;
	out[67] |= ( in[43] << ( 32 - 16 ) ) & 0x07ffff ;

	out[68] = ( in[40] >> 3 ) & 0x07ffff ;
	out[69] = ( in[41] >> 3 ) & 0x07ffff ;
	out[70] = ( in[42] >> 3 ) & 0x07ffff ;
	out[71] = ( in[43] >> 3 ) & 0x07ffff ;

	out[72] = ( in[40] >> 22 ) ;
	out[73] = ( in[41] >> 22 ) ;
	out[74] = ( in[42] >> 22 ) ;
	out[75] = ( in[43] >> 22 ) ;

	out[72] |= ( in[44] << ( 32 - 22 ) ) & 0x07ffff ;
	out[73] |= ( in[45] << ( 32 - 22 ) ) & 0x07ffff ;
	out[74] |= ( in[46] << ( 32 - 22 ) ) & 0x07ffff ;
	out[75] |= ( in[47] << ( 32 - 22 ) ) & 0x07ffff ;

	out[76] = ( in[44] >> 9 ) & 0x07ffff ;
	out[77] = ( in[45] >> 9 ) & 0x07ffff ;
	out[78] = ( in[46] >> 9 ) & 0x07ffff ;
	out[79] = ( in[47] >> 9 ) & 0x07ffff ;

	out[80] = ( in[44] >> 28 ) ;
	out[81] = ( in[45] >> 28 ) ;
	out[82] = ( in[46] >> 28 ) ;
	out[83] = ( in[47] >> 28 ) ;

	out[80] |= ( in[48] << ( 32 - 28 ) ) & 0x07ffff ;
	out[81] |= ( in[49] << ( 32 - 28 ) ) & 0x07ffff ;
	out[82] |= ( in[50] << ( 32 - 28 ) ) & 0x07ffff ;
	out[83] |= ( in[51] << ( 32 - 28 ) ) & 0x07ffff ;

	out[84] = ( in[48] >> 15 ) ;
	out[85] = ( in[49] >> 15 ) ;
	out[86] = ( in[50] >> 15 ) ;
	out[87] = ( in[51] >> 15 ) ;

	out[84] |= ( in[52] << ( 32 - 15 ) ) & 0x07ffff ;
	out[85] |= ( in[53] << ( 32 - 15 ) ) & 0x07ffff ;
	out[86] |= ( in[54] << ( 32 - 15 ) ) & 0x07ffff ;
	out[87] |= ( in[55] << ( 32 - 15 ) ) & 0x07ffff ;

	out[88] = ( in[52] >> 2 ) & 0x07ffff ;
	out[89] = ( in[53] >> 2 ) & 0x07ffff ;
	out[90] = ( in[54] >> 2 ) & 0x07ffff ;
	out[91] = ( in[55] >> 2 ) & 0x07ffff ;

	out[92] = ( in[52] >> 21 ) ;
	out[93] = ( in[53] >> 21 ) ;
	out[94] = ( in[54] >> 21 ) ;
	out[95] = ( in[55] >> 21 ) ;

	out[92] |= ( in[56] << ( 32 - 21 ) ) & 0x07ffff ;
	out[93] |= ( in[57] << ( 32 - 21 ) ) & 0x07ffff ;
	out[94] |= ( in[58] << ( 32 - 21 ) ) & 0x07ffff ;
	out[95] |= ( in[59] << ( 32 - 21 ) ) & 0x07ffff ;

	out[96] = ( in[56] >> 8 ) & 0x07ffff ;
	out[97] = ( in[57] >> 8 ) & 0x07ffff ;
	out[98] = ( in[58] >> 8 ) & 0x07ffff ;
	out[99] = ( in[59] >> 8 ) & 0x07ffff ;

	out[100] = ( in[56] >> 27 ) ;
	out[101] = ( in[57] >> 27 ) ;
	out[102] = ( in[58] >> 27 ) ;
	out[103] = ( in[59] >> 27 ) ;

	out[100] |= ( in[60] << ( 32 - 27 ) ) & 0x07ffff ;
	out[101] |= ( in[61] << ( 32 - 27 ) ) & 0x07ffff ;
	out[102] |= ( in[62] << ( 32 - 27 ) ) & 0x07ffff ;
	out[103] |= ( in[63] << ( 32 - 27 ) ) & 0x07ffff ;

	out[104] = ( in[60] >> 14 ) ;
	out[105] = ( in[61] >> 14 ) ;
	out[106] = ( in[62] >> 14 ) ;
	out[107] = ( in[63] >> 14 ) ;

	out[104] |= ( in[64] << ( 32 - 14 ) ) & 0x07ffff ;
	out[105] |= ( in[65] << ( 32 - 14 ) ) & 0x07ffff ;
	out[106] |= ( in[66] << ( 32 - 14 ) ) & 0x07ffff ;
	out[107] |= ( in[67] << ( 32 - 14 ) ) & 0x07ffff ;

	out[108] = ( in[64] >> 1 ) & 0x07ffff ;
	out[109] = ( in[65] >> 1 ) & 0x07ffff ;
	out[110] = ( in[66] >> 1 ) & 0x07ffff ;
	out[111] = ( in[67] >> 1 ) & 0x07ffff ;

	out[112] = ( in[64] >> 20 ) ;
	out[113] = ( in[65] >> 20 ) ;
	out[114] = ( in[66] >> 20 ) ;
	out[115] = ( in[67] >> 20 ) ;

	out[112] |= ( in[68] << ( 32 - 20 ) ) & 0x07ffff ;
	out[113] |= ( in[69] << ( 32 - 20 ) ) & 0x07ffff ;
	out[114] |= ( in[70] << ( 32 - 20 ) ) & 0x07ffff ;
	out[115] |= ( in[71] << ( 32 - 20 ) ) & 0x07ffff ;

	out[116] = ( in[68] >> 7 ) & 0x07ffff ;
	out[117] = ( in[69] >> 7 ) & 0x07ffff ;
	out[118] = ( in[70] >> 7 ) & 0x07ffff ;
	out[119] = ( in[71] >> 7 ) & 0x07ffff ;

	out[120] = ( in[68] >> 26 ) ;
	out[121] = ( in[69] >> 26 ) ;
	out[122] = ( in[70] >> 26 ) ;
	out[123] = ( in[71] >> 26 ) ;

	out[120] |= ( in[72] << ( 32 - 26 ) ) & 0x07ffff ;
	out[121] |= ( in[73] << ( 32 - 26 ) ) & 0x07ffff ;
	out[122] |= ( in[74] << ( 32 - 26 ) ) & 0x07ffff ;
	out[123] |= ( in[75] << ( 32 - 26 ) ) & 0x07ffff ;

	out[124] = ( in[72] >> 13 ) ;
	out[125] = ( in[73] >> 13 ) ;
	out[126] = ( in[74] >> 13 ) ;
	out[127] = ( in[75] >> 13 ) ;
}


// 20-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c20(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x0fffff ;
	out[1] = ( in[1] >> 0 ) & 0x0fffff ;
	out[2] = ( in[2] >> 0 ) & 0x0fffff ;
	out[3] = ( in[3] >> 0 ) & 0x0fffff ;

	out[4] = ( in[0] >> 20 ) ;
	out[5] = ( in[1] >> 20 ) ;
	out[6] = ( in[2] >> 20 ) ;
	out[7] = ( in[3] >> 20 ) ;

	out[4] |= ( in[4] << ( 32 - 20 ) ) & 0x0fffff ;
	out[5] |= ( in[5] << ( 32 - 20 ) ) & 0x0fffff ;
	out[6] |= ( in[6] << ( 32 - 20 ) ) & 0x0fffff ;
	out[7] |= ( in[7] << ( 32 - 20 ) ) & 0x0fffff ;

	out[8] = ( in[4] >> 8 ) & 0x0fffff ;
	out[9] = ( in[5] >> 8 ) & 0x0fffff ;
	out[10] = ( in[6] >> 8 ) & 0x0fffff ;
	out[11] = ( in[7] >> 8 ) & 0x0fffff ;

	out[12] = ( in[4] >> 28 ) ;
	out[13] = ( in[5] >> 28 ) ;
	out[14] = ( in[6] >> 28 ) ;
	out[15] = ( in[7] >> 28 ) ;

	out[12] |= ( in[8] << ( 32 - 28 ) ) & 0x0fffff ;
	out[13] |= ( in[9] << ( 32 - 28 ) ) & 0x0fffff ;
	out[14] |= ( in[10] << ( 32 - 28 ) ) & 0x0fffff ;
	out[15] |= ( in[11] << ( 32 - 28 ) ) & 0x0fffff ;

	out[16] = ( in[8] >> 16 ) ;
	out[17] = ( in[9] >> 16 ) ;
	out[18] = ( in[10] >> 16 ) ;
	out[19] = ( in[11] >> 16 ) ;

	out[16] |= ( in[12] << ( 32 - 16 ) ) & 0x0fffff ;
	out[17] |= ( in[13] << ( 32 - 16 ) ) & 0x0fffff ;
	out[18] |= ( in[14] << ( 32 - 16 ) ) & 0x0fffff ;
	out[19] |= ( in[15] << ( 32 - 16 ) ) & 0x0fffff ;

	out[20] = ( in[12] >> 4 ) & 0x0fffff ;
	out[21] = ( in[13] >> 4 ) & 0x0fffff ;
	out[22] = ( in[14] >> 4 ) & 0x0fffff ;
	out[23] = ( in[15] >> 4 ) & 0x0fffff ;

	out[24] = ( in[12] >> 24 ) ;
	out[25] = ( in[13] >> 24 ) ;
	out[26] = ( in[14] >> 24 ) ;
	out[27] = ( in[15] >> 24 ) ;

	out[24] |= ( in[16] << ( 32 - 24 ) ) & 0x0fffff ;
	out[25] |= ( in[17] << ( 32 - 24 ) ) & 0x0fffff ;
	out[26] |= ( in[18] << ( 32 - 24 ) ) & 0x0fffff ;
	out[27] |= ( in[19] << ( 32 - 24 ) ) & 0x0fffff ;

	out[28] = ( in[16] >> 12 ) ;
	out[29] = ( in[17] >> 12 ) ;
	out[30] = ( in[18] >> 12 ) ;
	out[31] = ( in[19] >> 12 ) ;

	out[32] = ( in[20] >> 0 ) & 0x0fffff ;
	out[33] = ( in[21] >> 0 ) & 0x0fffff ;
	out[34] = ( in[22] >> 0 ) & 0x0fffff ;
	out[35] = ( in[23] >> 0 ) & 0x0fffff ;

	out[36] = ( in[20] >> 20 ) ;
	out[37] = ( in[21] >> 20 ) ;
	out[38] = ( in[22] >> 20 ) ;
	out[39] = ( in[23] >> 20 ) ;

	out[36] |= ( in[24] << ( 32 - 20 ) ) & 0x0fffff ;
	out[37] |= ( in[25] << ( 32 - 20 ) ) & 0x0fffff ;
	out[38] |= ( in[26] << ( 32 - 20 ) ) & 0x0fffff ;
	out[39] |= ( in[27] << ( 32 - 20 ) ) & 0x0fffff ;

	out[40] = ( in[24] >> 8 ) & 0x0fffff ;
	out[41] = ( in[25] >> 8 ) & 0x0fffff ;
	out[42] = ( in[26] >> 8 ) & 0x0fffff ;
	out[43] = ( in[27] >> 8 ) & 0x0fffff ;

	out[44] = ( in[24] >> 28 ) ;
	out[45] = ( in[25] >> 28 ) ;
	out[46] = ( in[26] >> 28 ) ;
	out[47] = ( in[27] >> 28 ) ;

	out[44] |= ( in[28] << ( 32 - 28 ) ) & 0x0fffff ;
	out[45] |= ( in[29] << ( 32 - 28 ) ) & 0x0fffff ;
	out[46] |= ( in[30] << ( 32 - 28 ) ) & 0x0fffff ;
	out[47] |= ( in[31] << ( 32 - 28 ) ) & 0x0fffff ;

	out[48] = ( in[28] >> 16 ) ;
	out[49] = ( in[29] >> 16 ) ;
	out[50] = ( in[30] >> 16 ) ;
	out[51] = ( in[31] >> 16 ) ;

	out[48] |= ( in[32] << ( 32 - 16 ) ) & 0x0fffff ;
	out[49] |= ( in[33] << ( 32 - 16 ) ) & 0x0fffff ;
	out[50] |= ( in[34] << ( 32 - 16 ) ) & 0x0fffff ;
	out[51] |= ( in[35] << ( 32 - 16 ) ) & 0x0fffff ;

	out[52] = ( in[32] >> 4 ) & 0x0fffff ;
	out[53] = ( in[33] >> 4 ) & 0x0fffff ;
	out[54] = ( in[34] >> 4 ) & 0x0fffff ;
	out[55] = ( in[35] >> 4 ) & 0x0fffff ;

	out[56] = ( in[32] >> 24 ) ;
	out[57] = ( in[33] >> 24 ) ;
	out[58] = ( in[34] >> 24 ) ;
	out[59] = ( in[35] >> 24 ) ;

	out[56] |= ( in[36] << ( 32 - 24 ) ) & 0x0fffff ;
	out[57] |= ( in[37] << ( 32 - 24 ) ) & 0x0fffff ;
	out[58] |= ( in[38] << ( 32 - 24 ) ) & 0x0fffff ;
	out[59] |= ( in[39] << ( 32 - 24 ) ) & 0x0fffff ;

	out[60] = ( in[36] >> 12 ) ;
	out[61] = ( in[37] >> 12 ) ;
	out[62] = ( in[38] >> 12 ) ;
	out[63] = ( in[39] >> 12 ) ;

	out[64] = ( in[40] >> 0 ) & 0x0fffff ;
	out[65] = ( in[41] >> 0 ) & 0x0fffff ;
	out[66] = ( in[42] >> 0 ) & 0x0fffff ;
	out[67] = ( in[43] >> 0 ) & 0x0fffff ;

	out[68] = ( in[40] >> 20 ) ;
	out[69] = ( in[41] >> 20 ) ;
	out[70] = ( in[42] >> 20 ) ;
	out[71] = ( in[43] >> 20 ) ;

	out[68] |= ( in[44] << ( 32 - 20 ) ) & 0x0fffff ;
	out[69] |= ( in[45] << ( 32 - 20 ) ) & 0x0fffff ;
	out[70] |= ( in[46] << ( 32 - 20 ) ) & 0x0fffff ;
	out[71] |= ( in[47] << ( 32 - 20 ) ) & 0x0fffff ;

	out[72] = ( in[44] >> 8 ) & 0x0fffff ;
	out[73] = ( in[45] >> 8 ) & 0x0fffff ;
	out[74] = ( in[46] >> 8 ) & 0x0fffff ;
	out[75] = ( in[47] >> 8 ) & 0x0fffff ;

	out[76] = ( in[44] >> 28 ) ;
	out[77] = ( in[45] >> 28 ) ;
	out[78] = ( in[46] >> 28 ) ;
	out[79] = ( in[47] >> 28 ) ;

	out[76] |= ( in[48] << ( 32 - 28 ) ) & 0x0fffff ;
	out[77] |= ( in[49] << ( 32 - 28 ) ) & 0x0fffff ;
	out[78] |= ( in[50] << ( 32 - 28 ) ) & 0x0fffff ;
	out[79] |= ( in[51] << ( 32 - 28 ) ) & 0x0fffff ;

	out[80] = ( in[48] >> 16 ) ;
	out[81] = ( in[49] >> 16 ) ;
	out[82] = ( in[50] >> 16 ) ;
	out[83] = ( in[51] >> 16 ) ;

	out[80] |= ( in[52] << ( 32 - 16 ) ) & 0x0fffff ;
	out[81] |= ( in[53] << ( 32 - 16 ) ) & 0x0fffff ;
	out[82] |= ( in[54] << ( 32 - 16 ) ) & 0x0fffff ;
	out[83] |= ( in[55] << ( 32 - 16 ) ) & 0x0fffff ;

	out[84] = ( in[52] >> 4 ) & 0x0fffff ;
	out[85] = ( in[53] >> 4 ) & 0x0fffff ;
	out[86] = ( in[54] >> 4 ) & 0x0fffff ;
	out[87] = ( in[55] >> 4 ) & 0x0fffff ;

	out[88] = ( in[52] >> 24 ) ;
	out[89] = ( in[53] >> 24 ) ;
	out[90] = ( in[54] >> 24 ) ;
	out[91] = ( in[55] >> 24 ) ;

	out[88] |= ( in[56] << ( 32 - 24 ) ) & 0x0fffff ;
	out[89] |= ( in[57] << ( 32 - 24 ) ) & 0x0fffff ;
	out[90] |= ( in[58] << ( 32 - 24 ) ) & 0x0fffff ;
	out[91] |= ( in[59] << ( 32 - 24 ) ) & 0x0fffff ;

	out[92] = ( in[56] >> 12 ) ;
	out[93] = ( in[57] >> 12 ) ;
	out[94] = ( in[58] >> 12 ) ;
	out[95] = ( in[59] >> 12 ) ;

	out[96] = ( in[60] >> 0 ) & 0x0fffff ;
	out[97] = ( in[61] >> 0 ) & 0x0fffff ;
	out[98] = ( in[62] >> 0 ) & 0x0fffff ;
	out[99] = ( in[63] >> 0 ) & 0x0fffff ;

	out[100] = ( in[60] >> 20 ) ;
	out[101] = ( in[61] >> 20 ) ;
	out[102] = ( in[62] >> 20 ) ;
	out[103] = ( in[63] >> 20 ) ;

	out[100] |= ( in[64] << ( 32 - 20 ) ) & 0x0fffff ;
	out[101] |= ( in[65] << ( 32 - 20 ) ) & 0x0fffff ;
	out[102] |= ( in[66] << ( 32 - 20 ) ) & 0x0fffff ;
	out[103] |= ( in[67] << ( 32 - 20 ) ) & 0x0fffff ;

	out[104] = ( in[64] >> 8 ) & 0x0fffff ;
	out[105] = ( in[65] >> 8 ) & 0x0fffff ;
	out[106] = ( in[66] >> 8 ) & 0x0fffff ;
	out[107] = ( in[67] >> 8 ) & 0x0fffff ;

	out[108] = ( in[64] >> 28 ) ;
	out[109] = ( in[65] >> 28 ) ;
	out[110] = ( in[66] >> 28 ) ;
	out[111] = ( in[67] >> 28 ) ;

	out[108] |= ( in[68] << ( 32 - 28 ) ) & 0x0fffff ;
	out[109] |= ( in[69] << ( 32 - 28 ) ) & 0x0fffff ;
	out[110] |= ( in[70] << ( 32 - 28 ) ) & 0x0fffff ;
	out[111] |= ( in[71] << ( 32 - 28 ) ) & 0x0fffff ;

	out[112] = ( in[68] >> 16 ) ;
	out[113] = ( in[69] >> 16 ) ;
	out[114] = ( in[70] >> 16 ) ;
	out[115] = ( in[71] >> 16 ) ;

	out[112] |= ( in[72] << ( 32 - 16 ) ) & 0x0fffff ;
	out[113] |= ( in[73] << ( 32 - 16 ) ) & 0x0fffff ;
	out[114] |= ( in[74] << ( 32 - 16 ) ) & 0x0fffff ;
	out[115] |= ( in[75] << ( 32 - 16 ) ) & 0x0fffff ;

	out[116] = ( in[72] >> 4 ) & 0x0fffff ;
	out[117] = ( in[73] >> 4 ) & 0x0fffff ;
	out[118] = ( in[74] >> 4 ) & 0x0fffff ;
	out[119] = ( in[75] >> 4 ) & 0x0fffff ;

	out[120] = ( in[72] >> 24 ) ;
	out[121] = ( in[73] >> 24 ) ;
	out[122] = ( in[74] >> 24 ) ;
	out[123] = ( in[75] >> 24 ) ;

	out[120] |= ( in[76] << ( 32 - 24 ) ) & 0x0fffff ;
	out[121] |= ( in[77] << ( 32 - 24 ) ) & 0x0fffff ;
	out[122] |= ( in[78] << ( 32 - 24 ) ) & 0x0fffff ;
	out[123] |= ( in[79] << ( 32 - 24 ) ) & 0x0fffff ;

	out[124] = ( in[76] >> 12 ) ;
	out[125] = ( in[77] >> 12 ) ;
	out[126] = ( in[78] >> 12 ) ;
	out[127] = ( in[79] >> 12 ) ;
}


// 21-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c21(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x1fffff ;
	out[1] = ( in[1] >> 0 ) & 0x1fffff ;
	out[2] = ( in[2] >> 0 ) & 0x1fffff ;
	out[3] = ( in[3] >> 0 ) & 0x1fffff ;

	out[4] = ( in[0] >> 21 ) ;
	out[5] = ( in[1] >> 21 ) ;
	out[6] = ( in[2] >> 21 ) ;
	out[7] = ( in[3] >> 21 ) ;

	out[4] |= ( in[4] << ( 32 - 21 ) ) & 0x1fffff ;
	out[5] |= ( in[5] << ( 32 - 21 ) ) & 0x1fffff ;
	out[6] |= ( in[6] << ( 32 - 21 ) ) & 0x1fffff ;
	out[7] |= ( in[7] << ( 32 - 21 ) ) & 0x1fffff ;

	out[8] = ( in[4] >> 10 ) & 0x1fffff ;
	out[9] = ( in[5] >> 10 ) & 0x1fffff ;
	out[10] = ( in[6] >> 10 ) & 0x1fffff ;
	out[11] = ( in[7] >> 10 ) & 0x1fffff ;

	out[12] = ( in[4] >> 31 ) ;
	out[13] = ( in[5] >> 31 ) ;
	out[14] = ( in[6] >> 31 ) ;
	out[15] = ( in[7] >> 31 ) ;

	out[12] |= ( in[8] << ( 32 - 31 ) ) & 0x1fffff ;
	out[13] |= ( in[9] << ( 32 - 31 ) ) & 0x1fffff ;
	out[14] |= ( in[10] << ( 32 - 31 ) ) & 0x1fffff ;
	out[15] |= ( in[11] << ( 32 - 31 ) ) & 0x1fffff ;

	out[16] = ( in[8] >> 20 ) ;
	out[17] = ( in[9] >> 20 ) ;
	out[18] = ( in[10] >> 20 ) ;
	out[19] = ( in[11] >> 20 ) ;

	out[16] |= ( in[12] << ( 32 - 20 ) ) & 0x1fffff ;
	out[17] |= ( in[13] << ( 32 - 20 ) ) & 0x1fffff ;
	out[18] |= ( in[14] << ( 32 - 20 ) ) & 0x1fffff ;
	out[19] |= ( in[15] << ( 32 - 20 ) ) & 0x1fffff ;

	out[20] = ( in[12] >> 9 ) & 0x1fffff ;
	out[21] = ( in[13] >> 9 ) & 0x1fffff ;
	out[22] = ( in[14] >> 9 ) & 0x1fffff ;
	out[23] = ( in[15] >> 9 ) & 0x1fffff ;

	out[24] = ( in[12] >> 30 ) ;
	out[25] = ( in[13] >> 30 ) ;
	out[26] = ( in[14] >> 30 ) ;
	out[27] = ( in[15] >> 30 ) ;

	out[24] |= ( in[16] << ( 32 - 30 ) ) & 0x1fffff ;
	out[25] |= ( in[17] << ( 32 - 30 ) ) & 0x1fffff ;
	out[26] |= ( in[18] << ( 32 - 30 ) ) & 0x1fffff ;
	out[27] |= ( in[19] << ( 32 - 30 ) ) & 0x1fffff ;

	out[28] = ( in[16] >> 19 ) ;
	out[29] = ( in[17] >> 19 ) ;
	out[30] = ( in[18] >> 19 ) ;
	out[31] = ( in[19] >> 19 ) ;

	out[28] |= ( in[20] << ( 32 - 19 ) ) & 0x1fffff ;
	out[29] |= ( in[21] << ( 32 - 19 ) ) & 0x1fffff ;
	out[30] |= ( in[22] << ( 32 - 19 ) ) & 0x1fffff ;
	out[31] |= ( in[23] << ( 32 - 19 ) ) & 0x1fffff ;

	out[32] = ( in[20] >> 8 ) & 0x1fffff ;
	out[33] = ( in[21] >> 8 ) & 0x1fffff ;
	out[34] = ( in[22] >> 8 ) & 0x1fffff ;
	out[35] = ( in[23] >> 8 ) & 0x1fffff ;

	out[36] = ( in[20] >> 29 ) ;
	out[37] = ( in[21] >> 29 ) ;
	out[38] = ( in[22] >> 29 ) ;
	out[39] = ( in[23] >> 29 ) ;

	out[36] |= ( in[24] << ( 32 - 29 ) ) & 0x1fffff ;
	out[37] |= ( in[25] << ( 32 - 29 ) ) & 0x1fffff ;
	out[38] |= ( in[26] << ( 32 - 29 ) ) & 0x1fffff ;
	out[39] |= ( in[27] << ( 32 - 29 ) ) & 0x1fffff ;

	out[40] = ( in[24] >> 18 ) ;
	out[41] = ( in[25] >> 18 ) ;
	out[42] = ( in[26] >> 18 ) ;
	out[43] = ( in[27] >> 18 ) ;

	out[40] |= ( in[28] << ( 32 - 18 ) ) & 0x1fffff ;
	out[41] |= ( in[29] << ( 32 - 18 ) ) & 0x1fffff ;
	out[42] |= ( in[30] << ( 32 - 18 ) ) & 0x1fffff ;
	out[43] |= ( in[31] << ( 32 - 18 ) ) & 0x1fffff ;

	out[44] = ( in[28] >> 7 ) & 0x1fffff ;
	out[45] = ( in[29] >> 7 ) & 0x1fffff ;
	out[46] = ( in[30] >> 7 ) & 0x1fffff ;
	out[47] = ( in[31] >> 7 ) & 0x1fffff ;

	out[48] = ( in[28] >> 28 ) ;
	out[49] = ( in[29] >> 28 ) ;
	out[50] = ( in[30] >> 28 ) ;
	out[51] = ( in[31] >> 28 ) ;

	out[48] |= ( in[32] << ( 32 - 28 ) ) & 0x1fffff ;
	out[49] |= ( in[33] << ( 32 - 28 ) ) & 0x1fffff ;
	out[50] |= ( in[34] << ( 32 - 28 ) ) & 0x1fffff ;
	out[51] |= ( in[35] << ( 32 - 28 ) ) & 0x1fffff ;

	out[52] = ( in[32] >> 17 ) ;
	out[53] = ( in[33] >> 17 ) ;
	out[54] = ( in[34] >> 17 ) ;
	out[55] = ( in[35] >> 17 ) ;

	out[52] |= ( in[36] << ( 32 - 17 ) ) & 0x1fffff ;
	out[53] |= ( in[37] << ( 32 - 17 ) ) & 0x1fffff ;
	out[54] |= ( in[38] << ( 32 - 17 ) ) & 0x1fffff ;
	out[55] |= ( in[39] << ( 32 - 17 ) ) & 0x1fffff ;

	out[56] = ( in[36] >> 6 ) & 0x1fffff ;
	out[57] = ( in[37] >> 6 ) & 0x1fffff ;
	out[58] = ( in[38] >> 6 ) & 0x1fffff ;
	out[59] = ( in[39] >> 6 ) & 0x1fffff ;

	out[60] = ( in[36] >> 27 ) ;
	out[61] = ( in[37] >> 27 ) ;
	out[62] = ( in[38] >> 27 ) ;
	out[63] = ( in[39] >> 27 ) ;

	out[60] |= ( in[40] << ( 32 - 27 ) ) & 0x1fffff ;
	out[61] |= ( in[41] << ( 32 - 27 ) ) & 0x1fffff ;
	out[62] |= ( in[42] << ( 32 - 27 ) ) & 0x1fffff ;
	out[63] |= ( in[43] << ( 32 - 27 ) ) & 0x1fffff ;

	out[64] = ( in[40] >> 16 ) ;
	out[65] = ( in[41] >> 16 ) ;
	out[66] = ( in[42] >> 16 ) ;
	out[67] = ( in[43] >> 16 ) ;

	out[64] |= ( in[44] << ( 32 - 16 ) ) & 0x1fffff ;
	out[65] |= ( in[45] << ( 32 - 16 ) ) & 0x1fffff ;
	out[66] |= ( in[46] << ( 32 - 16 ) ) & 0x1fffff ;
	out[67] |= ( in[47] << ( 32 - 16 ) ) & 0x1fffff ;

	out[68] = ( in[44] >> 5 ) & 0x1fffff ;
	out[69] = ( in[45] >> 5 ) & 0x1fffff ;
	out[70] = ( in[46] >> 5 ) & 0x1fffff ;
	out[71] = ( in[47] >> 5 ) & 0x1fffff ;

	out[72] = ( in[44] >> 26 ) ;
	out[73] = ( in[45] >> 26 ) ;
	out[74] = ( in[46] >> 26 ) ;
	out[75] = ( in[47] >> 26 ) ;

	out[72] |= ( in[48] << ( 32 - 26 ) ) & 0x1fffff ;
	out[73] |= ( in[49] << ( 32 - 26 ) ) & 0x1fffff ;
	out[74] |= ( in[50] << ( 32 - 26 ) ) & 0x1fffff ;
	out[75] |= ( in[51] << ( 32 - 26 ) ) & 0x1fffff ;

	out[76] = ( in[48] >> 15 ) ;
	out[77] = ( in[49] >> 15 ) ;
	out[78] = ( in[50] >> 15 ) ;
	out[79] = ( in[51] >> 15 ) ;

	out[76] |= ( in[52] << ( 32 - 15 ) ) & 0x1fffff ;
	out[77] |= ( in[53] << ( 32 - 15 ) ) & 0x1fffff ;
	out[78] |= ( in[54] << ( 32 - 15 ) ) & 0x1fffff ;
	out[79] |= ( in[55] << ( 32 - 15 ) ) & 0x1fffff ;

	out[80] = ( in[52] >> 4 ) & 0x1fffff ;
	out[81] = ( in[53] >> 4 ) & 0x1fffff ;
	out[82] = ( in[54] >> 4 ) & 0x1fffff ;
	out[83] = ( in[55] >> 4 ) & 0x1fffff ;

	out[84] = ( in[52] >> 25 ) ;
	out[85] = ( in[53] >> 25 ) ;
	out[86] = ( in[54] >> 25 ) ;
	out[87] = ( in[55] >> 25 ) ;

	out[84] |= ( in[56] << ( 32 - 25 ) ) & 0x1fffff ;
	out[85] |= ( in[57] << ( 32 - 25 ) ) & 0x1fffff ;
	out[86] |= ( in[58] << ( 32 - 25 ) ) & 0x1fffff ;
	out[87] |= ( in[59] << ( 32 - 25 ) ) & 0x1fffff ;

	out[88] = ( in[56] >> 14 ) ;
	out[89] = ( in[57] >> 14 ) ;
	out[90] = ( in[58] >> 14 ) ;
	out[91] = ( in[59] >> 14 ) ;

	out[88] |= ( in[60] << ( 32 - 14 ) ) & 0x1fffff ;
	out[89] |= ( in[61] << ( 32 - 14 ) ) & 0x1fffff ;
	out[90] |= ( in[62] << ( 32 - 14 ) ) & 0x1fffff ;
	out[91] |= ( in[63] << ( 32 - 14 ) ) & 0x1fffff ;

	out[92] = ( in[60] >> 3 ) & 0x1fffff ;
	out[93] = ( in[61] >> 3 ) & 0x1fffff ;
	out[94] = ( in[62] >> 3 ) & 0x1fffff ;
	out[95] = ( in[63] >> 3 ) & 0x1fffff ;

	out[96] = ( in[60] >> 24 ) ;
	out[97] = ( in[61] >> 24 ) ;
	out[98] = ( in[62] >> 24 ) ;
	out[99] = ( in[63] >> 24 ) ;

	out[96] |= ( in[64] << ( 32 - 24 ) ) & 0x1fffff ;
	out[97] |= ( in[65] << ( 32 - 24 ) ) & 0x1fffff ;
	out[98] |= ( in[66] << ( 32 - 24 ) ) & 0x1fffff ;
	out[99] |= ( in[67] << ( 32 - 24 ) ) & 0x1fffff ;

	out[100] = ( in[64] >> 13 ) ;
	out[101] = ( in[65] >> 13 ) ;
	out[102] = ( in[66] >> 13 ) ;
	out[103] = ( in[67] >> 13 ) ;

	out[100] |= ( in[68] << ( 32 - 13 ) ) & 0x1fffff ;
	out[101] |= ( in[69] << ( 32 - 13 ) ) & 0x1fffff ;
	out[102] |= ( in[70] << ( 32 - 13 ) ) & 0x1fffff ;
	out[103] |= ( in[71] << ( 32 - 13 ) ) & 0x1fffff ;

	out[104] = ( in[68] >> 2 ) & 0x1fffff ;
	out[105] = ( in[69] >> 2 ) & 0x1fffff ;
	out[106] = ( in[70] >> 2 ) & 0x1fffff ;
	out[107] = ( in[71] >> 2 ) & 0x1fffff ;

	out[108] = ( in[68] >> 23 ) ;
	out[109] = ( in[69] >> 23 ) ;
	out[110] = ( in[70] >> 23 ) ;
	out[111] = ( in[71] >> 23 ) ;

	out[108] |= ( in[72] << ( 32 - 23 ) ) & 0x1fffff ;
	out[109] |= ( in[73] << ( 32 - 23 ) ) & 0x1fffff ;
	out[110] |= ( in[74] << ( 32 - 23 ) ) & 0x1fffff ;
	out[111] |= ( in[75] << ( 32 - 23 ) ) & 0x1fffff ;

	out[112] = ( in[72] >> 12 ) ;
	out[113] = ( in[73] >> 12 ) ;
	out[114] = ( in[74] >> 12 ) ;
	out[115] = ( in[75] >> 12 ) ;

	out[112] |= ( in[76] << ( 32 - 12 ) ) & 0x1fffff ;
	out[113] |= ( in[77] << ( 32 - 12 ) ) & 0x1fffff ;
	out[114] |= ( in[78] << ( 32 - 12 ) ) & 0x1fffff ;
	out[115] |= ( in[79] << ( 32 - 12 ) ) & 0x1fffff ;

	out[116] = ( in[76] >> 1 ) & 0x1fffff ;
	out[117] = ( in[77] >> 1 ) & 0x1fffff ;
	out[118] = ( in[78] >> 1 ) & 0x1fffff ;
	out[119] = ( in[79] >> 1 ) & 0x1fffff ;

	out[120] = ( in[76] >> 22 ) ;
	out[121] = ( in[77] >> 22 ) ;
	out[122] = ( in[78] >> 22 ) ;
	out[123] = ( in[79] >> 22 ) ;

	out[120] |= ( in[80] << ( 32 - 22 ) ) & 0x1fffff ;
	out[121] |= ( in[81] << ( 32 - 22 ) ) & 0x1fffff ;
	out[122] |= ( in[82] << ( 32 - 22 ) ) & 0x1fffff ;
	out[123] |= ( in[83] << ( 32 - 22 ) ) & 0x1fffff ;

	out[124] = ( in[80] >> 11 ) ;
	out[125] = ( in[81] >> 11 ) ;
	out[126] = ( in[82] >> 11 ) ;
	out[127] = ( in[83] >> 11 ) ;
}


// 22-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c22(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x3fffff ;
	out[1] = ( in[1] >> 0 ) & 0x3fffff ;
	out[2] = ( in[2] >> 0 ) & 0x3fffff ;
	out[3] = ( in[3] >> 0 ) & 0x3fffff ;

	out[4] = ( in[0] >> 22 ) ;
	out[5] = ( in[1] >> 22 ) ;
	out[6] = ( in[2] >> 22 ) ;
	out[7] = ( in[3] >> 22 ) ;

	out[4] |= ( in[4] << ( 32 - 22 ) ) & 0x3fffff ;
	out[5] |= ( in[5] << ( 32 - 22 ) ) & 0x3fffff ;
	out[6] |= ( in[6] << ( 32 - 22 ) ) & 0x3fffff ;
	out[7] |= ( in[7] << ( 32 - 22 ) ) & 0x3fffff ;

	out[8] = ( in[4] >> 12 ) ;
	out[9] = ( in[5] >> 12 ) ;
	out[10] = ( in[6] >> 12 ) ;
	out[11] = ( in[7] >> 12 ) ;

	out[8] |= ( in[8] << ( 32 - 12 ) ) & 0x3fffff ;
	out[9] |= ( in[9] << ( 32 - 12 ) ) & 0x3fffff ;
	out[10] |= ( in[10] << ( 32 - 12 ) ) & 0x3fffff ;
	out[11] |= ( in[11] << ( 32 - 12 ) ) & 0x3fffff ;

	out[12] = ( in[8] >> 2 ) & 0x3fffff ;
	out[13] = ( in[9] >> 2 ) & 0x3fffff ;
	out[14] = ( in[10] >> 2 ) & 0x3fffff ;
	out[15] = ( in[11] >> 2 ) & 0x3fffff ;

	out[16] = ( in[8] >> 24 ) ;
	out[17] = ( in[9] >> 24 ) ;
	out[18] = ( in[10] >> 24 ) ;
	out[19] = ( in[11] >> 24 ) ;

	out[16] |= ( in[12] << ( 32 - 24 ) ) & 0x3fffff ;
	out[17] |= ( in[13] << ( 32 - 24 ) ) & 0x3fffff ;
	out[18] |= ( in[14] << ( 32 - 24 ) ) & 0x3fffff ;
	out[19] |= ( in[15] << ( 32 - 24 ) ) & 0x3fffff ;

	out[20] = ( in[12] >> 14 ) ;
	out[21] = ( in[13] >> 14 ) ;
	out[22] = ( in[14] >> 14 ) ;
	out[23] = ( in[15] >> 14 ) ;

	out[20] |= ( in[16] << ( 32 - 14 ) ) & 0x3fffff ;
	out[21] |= ( in[17] << ( 32 - 14 ) ) & 0x3fffff ;
	out[22] |= ( in[18] << ( 32 - 14 ) ) & 0x3fffff ;
	out[23] |= ( in[19] << ( 32 - 14 ) ) & 0x3fffff ;

	out[24] = ( in[16] >> 4 ) & 0x3fffff ;
	out[25] = ( in[17] >> 4 ) & 0x3fffff ;
	out[26] = ( in[18] >> 4 ) & 0x3fffff ;
	out[27] = ( in[19] >> 4 ) & 0x3fffff ;

	out[28] = ( in[16] >> 26 ) ;
	out[29] = ( in[17] >> 26 ) ;
	out[30] = ( in[18] >> 26 ) ;
	out[31] = ( in[19] >> 26 ) ;

	out[28] |= ( in[20] << ( 32 - 26 ) ) & 0x3fffff ;
	out[29] |= ( in[21] << ( 32 - 26 ) ) & 0x3fffff ;
	out[30] |= ( in[22] << ( 32 - 26 ) ) & 0x3fffff ;
	out[31] |= ( in[23] << ( 32 - 26 ) ) & 0x3fffff ;

	out[32] = ( in[20] >> 16 ) ;
	out[33] = ( in[21] >> 16 ) ;
	out[34] = ( in[22] >> 16 ) ;
	out[35] = ( in[23] >> 16 ) ;

	out[32] |= ( in[24] << ( 32 - 16 ) ) & 0x3fffff ;
	out[33] |= ( in[25] << ( 32 - 16 ) ) & 0x3fffff ;
	out[34] |= ( in[26] << ( 32 - 16 ) ) & 0x3fffff ;
	out[35] |= ( in[27] << ( 32 - 16 ) ) & 0x3fffff ;

	out[36] = ( in[24] >> 6 ) & 0x3fffff ;
	out[37] = ( in[25] >> 6 ) & 0x3fffff ;
	out[38] = ( in[26] >> 6 ) & 0x3fffff ;
	out[39] = ( in[27] >> 6 ) & 0x3fffff ;

	out[40] = ( in[24] >> 28 ) ;
	out[41] = ( in[25] >> 28 ) ;
	out[42] = ( in[26] >> 28 ) ;
	out[43] = ( in[27] >> 28 ) ;

	out[40] |= ( in[28] << ( 32 - 28 ) ) & 0x3fffff ;
	out[41] |= ( in[29] << ( 32 - 28 ) ) & 0x3fffff ;
	out[42] |= ( in[30] << ( 32 - 28 ) ) & 0x3fffff ;
	out[43] |= ( in[31] << ( 32 - 28 ) ) & 0x3fffff ;

	out[44] = ( in[28] >> 18 ) ;
	out[45] = ( in[29] >> 18 ) ;
	out[46] = ( in[30] >> 18 ) ;
	out[47] = ( in[31] >> 18 ) ;

	out[44] |= ( in[32] << ( 32 - 18 ) ) & 0x3fffff ;
	out[45] |= ( in[33] << ( 32 - 18 ) ) & 0x3fffff ;
	out[46] |= ( in[34] << ( 32 - 18 ) ) & 0x3fffff ;
	out[47] |= ( in[35] << ( 32 - 18 ) ) & 0x3fffff ;

	out[48] = ( in[32] >> 8 ) & 0x3fffff ;
	out[49] = ( in[33] >> 8 ) & 0x3fffff ;
	out[50] = ( in[34] >> 8 ) & 0x3fffff ;
	out[51] = ( in[35] >> 8 ) & 0x3fffff ;

	out[52] = ( in[32] >> 30 ) ;
	out[53] = ( in[33] >> 30 ) ;
	out[54] = ( in[34] >> 30 ) ;
	out[55] = ( in[35] >> 30 ) ;

	out[52] |= ( in[36] << ( 32 - 30 ) ) & 0x3fffff ;
	out[53] |= ( in[37] << ( 32 - 30 ) ) & 0x3fffff ;
	out[54] |= ( in[38] << ( 32 - 30 ) ) & 0x3fffff ;
	out[55] |= ( in[39] << ( 32 - 30 ) ) & 0x3fffff ;

	out[56] = ( in[36] >> 20 ) ;
	out[57] = ( in[37] >> 20 ) ;
	out[58] = ( in[38] >> 20 ) ;
	out[59] = ( in[39] >> 20 ) ;

	out[56] |= ( in[40] << ( 32 - 20 ) ) & 0x3fffff ;
	out[57] |= ( in[41] << ( 32 - 20 ) ) & 0x3fffff ;
	out[58] |= ( in[42] << ( 32 - 20 ) ) & 0x3fffff ;
	out[59] |= ( in[43] << ( 32 - 20 ) ) & 0x3fffff ;

	out[60] = ( in[40] >> 10 ) ;
	out[61] = ( in[41] >> 10 ) ;
	out[62] = ( in[42] >> 10 ) ;
	out[63] = ( in[43] >> 10 ) ;

	out[64] = ( in[44] >> 0 ) & 0x3fffff ;
	out[65] = ( in[45] >> 0 ) & 0x3fffff ;
	out[66] = ( in[46] >> 0 ) & 0x3fffff ;
	out[67] = ( in[47] >> 0 ) & 0x3fffff ;

	out[68] = ( in[44] >> 22 ) ;
	out[69] = ( in[45] >> 22 ) ;
	out[70] = ( in[46] >> 22 ) ;
	out[71] = ( in[47] >> 22 ) ;

	out[68] |= ( in[48] << ( 32 - 22 ) ) & 0x3fffff ;
	out[69] |= ( in[49] << ( 32 - 22 ) ) & 0x3fffff ;
	out[70] |= ( in[50] << ( 32 - 22 ) ) & 0x3fffff ;
	out[71] |= ( in[51] << ( 32 - 22 ) ) & 0x3fffff ;

	out[72] = ( in[48] >> 12 ) ;
	out[73] = ( in[49] >> 12 ) ;
	out[74] = ( in[50] >> 12 ) ;
	out[75] = ( in[51] >> 12 ) ;

	out[72] |= ( in[52] << ( 32 - 12 ) ) & 0x3fffff ;
	out[73] |= ( in[53] << ( 32 - 12 ) ) & 0x3fffff ;
	out[74] |= ( in[54] << ( 32 - 12 ) ) & 0x3fffff ;
	out[75] |= ( in[55] << ( 32 - 12 ) ) & 0x3fffff ;

	out[76] = ( in[52] >> 2 ) & 0x3fffff ;
	out[77] = ( in[53] >> 2 ) & 0x3fffff ;
	out[78] = ( in[54] >> 2 ) & 0x3fffff ;
	out[79] = ( in[55] >> 2 ) & 0x3fffff ;

	out[80] = ( in[52] >> 24 ) ;
	out[81] = ( in[53] >> 24 ) ;
	out[82] = ( in[54] >> 24 ) ;
	out[83] = ( in[55] >> 24 ) ;

	out[80] |= ( in[56] << ( 32 - 24 ) ) & 0x3fffff ;
	out[81] |= ( in[57] << ( 32 - 24 ) ) & 0x3fffff ;
	out[82] |= ( in[58] << ( 32 - 24 ) ) & 0x3fffff ;
	out[83] |= ( in[59] << ( 32 - 24 ) ) & 0x3fffff ;

	out[84] = ( in[56] >> 14 ) ;
	out[85] = ( in[57] >> 14 ) ;
	out[86] = ( in[58] >> 14 ) ;
	out[87] = ( in[59] >> 14 ) ;

	out[84] |= ( in[60] << ( 32 - 14 ) ) & 0x3fffff ;
	out[85] |= ( in[61] << ( 32 - 14 ) ) & 0x3fffff ;
	out[86] |= ( in[62] << ( 32 - 14 ) ) & 0x3fffff ;
	out[87] |= ( in[63] << ( 32 - 14 ) ) & 0x3fffff ;

	out[88] = ( in[60] >> 4 ) & 0x3fffff ;
	out[89] = ( in[61] >> 4 ) & 0x3fffff ;
	out[90] = ( in[62] >> 4 ) & 0x3fffff ;
	out[91] = ( in[63] >> 4 ) & 0x3fffff ;

	out[92] = ( in[60] >> 26 ) ;
	out[93] = ( in[61] >> 26 ) ;
	out[94] = ( in[62] >> 26 ) ;
	out[95] = ( in[63] >> 26 ) ;

	out[92] |= ( in[64] << ( 32 - 26 ) ) & 0x3fffff ;
	out[93] |= ( in[65] << ( 32 - 26 ) ) & 0x3fffff ;
	out[94] |= ( in[66] << ( 32 - 26 ) ) & 0x3fffff ;
	out[95] |= ( in[67] << ( 32 - 26 ) ) & 0x3fffff ;

	out[96] = ( in[64] >> 16 ) ;
	out[97] = ( in[65] >> 16 ) ;
	out[98] = ( in[66] >> 16 ) ;
	out[99] = ( in[67] >> 16 ) ;

	out[96] |= ( in[68] << ( 32 - 16 ) ) & 0x3fffff ;
	out[97] |= ( in[69] << ( 32 - 16 ) ) & 0x3fffff ;
	out[98] |= ( in[70] << ( 32 - 16 ) ) & 0x3fffff ;
	out[99] |= ( in[71] << ( 32 - 16 ) ) & 0x3fffff ;

	out[100] = ( in[68] >> 6 ) & 0x3fffff ;
	out[101] = ( in[69] >> 6 ) & 0x3fffff ;
	out[102] = ( in[70] >> 6 ) & 0x3fffff ;
	out[103] = ( in[71] >> 6 ) & 0x3fffff ;

	out[104] = ( in[68] >> 28 ) ;
	out[105] = ( in[69] >> 28 ) ;
	out[106] = ( in[70] >> 28 ) ;
	out[107] = ( in[71] >> 28 ) ;

	out[104] |= ( in[72] << ( 32 - 28 ) ) & 0x3fffff ;
	out[105] |= ( in[73] << ( 32 - 28 ) ) & 0x3fffff ;
	out[106] |= ( in[74] << ( 32 - 28 ) ) & 0x3fffff ;
	out[107] |= ( in[75] << ( 32 - 28 ) ) & 0x3fffff ;

	out[108] = ( in[72] >> 18 ) ;
	out[109] = ( in[73] >> 18 ) ;
	out[110] = ( in[74] >> 18 ) ;
	out[111] = ( in[75] >> 18 ) ;

	out[108] |= ( in[76] << ( 32 - 18 ) ) & 0x3fffff ;
	out[109] |= ( in[77] << ( 32 - 18 ) ) & 0x3fffff ;
	out[110] |= ( in[78] << ( 32 - 18 ) ) & 0x3fffff ;
	out[111] |= ( in[79] << ( 32 - 18 ) ) & 0x3fffff ;

	out[112] = ( in[76] >> 8 ) & 0x3fffff ;
	out[113] = ( in[77] >> 8 ) & 0x3fffff ;
	out[114] = ( in[78] >> 8 ) & 0x3fffff ;
	out[115] = ( in[79] >> 8 ) & 0x3fffff ;

	out[116] = ( in[76] >> 30 ) ;
	out[117] = ( in[77] >> 30 ) ;
	out[118] = ( in[78] >> 30 ) ;
	out[119] = ( in[79] >> 30 ) ;

	out[116] |= ( in[80] << ( 32 - 30 ) ) & 0x3fffff ;
	out[117] |= ( in[81] << ( 32 - 30 ) ) & 0x3fffff ;
	out[118] |= ( in[82] << ( 32 - 30 ) ) & 0x3fffff ;
	out[119] |= ( in[83] << ( 32 - 30 ) ) & 0x3fffff ;

	out[120] = ( in[80] >> 20 ) ;
	out[121] = ( in[81] >> 20 ) ;
	out[122] = ( in[82] >> 20 ) ;
	out[123] = ( in[83] >> 20 ) ;

	out[120] |= ( in[84] << ( 32 - 20 ) ) & 0x3fffff ;
	out[121] |= ( in[85] << ( 32 - 20 ) ) & 0x3fffff ;
	out[122] |= ( in[86] << ( 32 - 20 ) ) & 0x3fffff ;
	out[123] |= ( in[87] << ( 32 - 20 ) ) & 0x3fffff ;

	out[124] = ( in[84] >> 10 ) ;
	out[125] = ( in[85] >> 10 ) ;
	out[126] = ( in[86] >> 10 ) ;
	out[127] = ( in[87] >> 10 ) ;
}


// 23-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c23(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x7fffff ;
	out[1] = ( in[1] >> 0 ) & 0x7fffff ;
	out[2] = ( in[2] >> 0 ) & 0x7fffff ;
	out[3] = ( in[3] >> 0 ) & 0x7fffff ;

	out[4] = ( in[0] >> 23 ) ;
	out[5] = ( in[1] >> 23 ) ;
	out[6] = ( in[2] >> 23 ) ;
	out[7] = ( in[3] >> 23 ) ;

	out[4] |= ( in[4] << ( 32 - 23 ) ) & 0x7fffff ;
	out[5] |= ( in[5] << ( 32 - 23 ) ) & 0x7fffff ;
	out[6] |= ( in[6] << ( 32 - 23 ) ) & 0x7fffff ;
	out[7] |= ( in[7] << ( 32 - 23 ) ) & 0x7fffff ;

	out[8] = ( in[4] >> 14 ) ;
	out[9] = ( in[5] >> 14 ) ;
	out[10] = ( in[6] >> 14 ) ;
	out[11] = ( in[7] >> 14 ) ;

	out[8] |= ( in[8] << ( 32 - 14 ) ) & 0x7fffff ;
	out[9] |= ( in[9] << ( 32 - 14 ) ) & 0x7fffff ;
	out[10] |= ( in[10] << ( 32 - 14 ) ) & 0x7fffff ;
	out[11] |= ( in[11] << ( 32 - 14 ) ) & 0x7fffff ;

	out[12] = ( in[8] >> 5 ) & 0x7fffff ;
	out[13] = ( in[9] >> 5 ) & 0x7fffff ;
	out[14] = ( in[10] >> 5 ) & 0x7fffff ;
	out[15] = ( in[11] >> 5 ) & 0x7fffff ;

	out[16] = ( in[8] >> 28 ) ;
	out[17] = ( in[9] >> 28 ) ;
	out[18] = ( in[10] >> 28 ) ;
	out[19] = ( in[11] >> 28 ) ;

	out[16] |= ( in[12] << ( 32 - 28 ) ) & 0x7fffff ;
	out[17] |= ( in[13] << ( 32 - 28 ) ) & 0x7fffff ;
	out[18] |= ( in[14] << ( 32 - 28 ) ) & 0x7fffff ;
	out[19] |= ( in[15] << ( 32 - 28 ) ) & 0x7fffff ;

	out[20] = ( in[12] >> 19 ) ;
	out[21] = ( in[13] >> 19 ) ;
	out[22] = ( in[14] >> 19 ) ;
	out[23] = ( in[15] >> 19 ) ;

	out[20] |= ( in[16] << ( 32 - 19 ) ) & 0x7fffff ;
	out[21] |= ( in[17] << ( 32 - 19 ) ) & 0x7fffff ;
	out[22] |= ( in[18] << ( 32 - 19 ) ) & 0x7fffff ;
	out[23] |= ( in[19] << ( 32 - 19 ) ) & 0x7fffff ;

	out[24] = ( in[16] >> 10 ) ;
	out[25] = ( in[17] >> 10 ) ;
	out[26] = ( in[18] >> 10 ) ;
	out[27] = ( in[19] >> 10 ) ;

	out[24] |= ( in[20] << ( 32 - 10 ) ) & 0x7fffff ;
	out[25] |= ( in[21] << ( 32 - 10 ) ) & 0x7fffff ;
	out[26] |= ( in[22] << ( 32 - 10 ) ) & 0x7fffff ;
	out[27] |= ( in[23] << ( 32 - 10 ) ) & 0x7fffff ;

	out[28] = ( in[20] >> 1 ) & 0x7fffff ;
	out[29] = ( in[21] >> 1 ) & 0x7fffff ;
	out[30] = ( in[22] >> 1 ) & 0x7fffff ;
	out[31] = ( in[23] >> 1 ) & 0x7fffff ;

	out[32] = ( in[20] >> 24 ) ;
	out[33] = ( in[21] >> 24 ) ;
	out[34] = ( in[22] >> 24 ) ;
	out[35] = ( in[23] >> 24 ) ;

	out[32] |= ( in[24] << ( 32 - 24 ) ) & 0x7fffff ;
	out[33] |= ( in[25] << ( 32 - 24 ) ) & 0x7fffff ;
	out[34] |= ( in[26] << ( 32 - 24 ) ) & 0x7fffff ;
	out[35] |= ( in[27] << ( 32 - 24 ) ) & 0x7fffff ;

	out[36] = ( in[24] >> 15 ) ;
	out[37] = ( in[25] >> 15 ) ;
	out[38] = ( in[26] >> 15 ) ;
	out[39] = ( in[27] >> 15 ) ;

	out[36] |= ( in[28] << ( 32 - 15 ) ) & 0x7fffff ;
	out[37] |= ( in[29] << ( 32 - 15 ) ) & 0x7fffff ;
	out[38] |= ( in[30] << ( 32 - 15 ) ) & 0x7fffff ;
	out[39] |= ( in[31] << ( 32 - 15 ) ) & 0x7fffff ;

	out[40] = ( in[28] >> 6 ) & 0x7fffff ;
	out[41] = ( in[29] >> 6 ) & 0x7fffff ;
	out[42] = ( in[30] >> 6 ) & 0x7fffff ;
	out[43] = ( in[31] >> 6 ) & 0x7fffff ;

	out[44] = ( in[28] >> 29 ) ;
	out[45] = ( in[29] >> 29 ) ;
	out[46] = ( in[30] >> 29 ) ;
	out[47] = ( in[31] >> 29 ) ;

	out[44] |= ( in[32] << ( 32 - 29 ) ) & 0x7fffff ;
	out[45] |= ( in[33] << ( 32 - 29 ) ) & 0x7fffff ;
	out[46] |= ( in[34] << ( 32 - 29 ) ) & 0x7fffff ;
	out[47] |= ( in[35] << ( 32 - 29 ) ) & 0x7fffff ;

	out[48] = ( in[32] >> 20 ) ;
	out[49] = ( in[33] >> 20 ) ;
	out[50] = ( in[34] >> 20 ) ;
	out[51] = ( in[35] >> 20 ) ;

	out[48] |= ( in[36] << ( 32 - 20 ) ) & 0x7fffff ;
	out[49] |= ( in[37] << ( 32 - 20 ) ) & 0x7fffff ;
	out[50] |= ( in[38] << ( 32 - 20 ) ) & 0x7fffff ;
	out[51] |= ( in[39] << ( 32 - 20 ) ) & 0x7fffff ;

	out[52] = ( in[36] >> 11 ) ;
	out[53] = ( in[37] >> 11 ) ;
	out[54] = ( in[38] >> 11 ) ;
	out[55] = ( in[39] >> 11 ) ;

	out[52] |= ( in[40] << ( 32 - 11 ) ) & 0x7fffff ;
	out[53] |= ( in[41] << ( 32 - 11 ) ) & 0x7fffff ;
	out[54] |= ( in[42] << ( 32 - 11 ) ) & 0x7fffff ;
	out[55] |= ( in[43] << ( 32 - 11 ) ) & 0x7fffff ;

	out[56] = ( in[40] >> 2 ) & 0x7fffff ;
	out[57] = ( in[41] >> 2 ) & 0x7fffff ;
	out[58] = ( in[42] >> 2 ) & 0x7fffff ;
	out[59] = ( in[43] >> 2 ) & 0x7fffff ;

	out[60] = ( in[40] >> 25 ) ;
	out[61] = ( in[41] >> 25 ) ;
	out[62] = ( in[42] >> 25 ) ;
	out[63] = ( in[43] >> 25 ) ;

	out[60] |= ( in[44] << ( 32 - 25 ) ) & 0x7fffff ;
	out[61] |= ( in[45] << ( 32 - 25 ) ) & 0x7fffff ;
	out[62] |= ( in[46] << ( 32 - 25 ) ) & 0x7fffff ;
	out[63] |= ( in[47] << ( 32 - 25 ) ) & 0x7fffff ;

	out[64] = ( in[44] >> 16 ) ;
	out[65] = ( in[45] >> 16 ) ;
	out[66] = ( in[46] >> 16 ) ;
	out[67] = ( in[47] >> 16 ) ;

	out[64] |= ( in[48] << ( 32 - 16 ) ) & 0x7fffff ;
	out[65] |= ( in[49] << ( 32 - 16 ) ) & 0x7fffff ;
	out[66] |= ( in[50] << ( 32 - 16 ) ) & 0x7fffff ;
	out[67] |= ( in[51] << ( 32 - 16 ) ) & 0x7fffff ;

	out[68] = ( in[48] >> 7 ) & 0x7fffff ;
	out[69] = ( in[49] >> 7 ) & 0x7fffff ;
	out[70] = ( in[50] >> 7 ) & 0x7fffff ;
	out[71] = ( in[51] >> 7 ) & 0x7fffff ;

	out[72] = ( in[48] >> 30 ) ;
	out[73] = ( in[49] >> 30 ) ;
	out[74] = ( in[50] >> 30 ) ;
	out[75] = ( in[51] >> 30 ) ;

	out[72] |= ( in[52] << ( 32 - 30 ) ) & 0x7fffff ;
	out[73] |= ( in[53] << ( 32 - 30 ) ) & 0x7fffff ;
	out[74] |= ( in[54] << ( 32 - 30 ) ) & 0x7fffff ;
	out[75] |= ( in[55] << ( 32 - 30 ) ) & 0x7fffff ;

	out[76] = ( in[52] >> 21 ) ;
	out[77] = ( in[53] >> 21 ) ;
	out[78] = ( in[54] >> 21 ) ;
	out[79] = ( in[55] >> 21 ) ;

	out[76] |= ( in[56] << ( 32 - 21 ) ) & 0x7fffff ;
	out[77] |= ( in[57] << ( 32 - 21 ) ) & 0x7fffff ;
	out[78] |= ( in[58] << ( 32 - 21 ) ) & 0x7fffff ;
	out[79] |= ( in[59] << ( 32 - 21 ) ) & 0x7fffff ;

	out[80] = ( in[56] >> 12 ) ;
	out[81] = ( in[57] >> 12 ) ;
	out[82] = ( in[58] >> 12 ) ;
	out[83] = ( in[59] >> 12 ) ;

	out[80] |= ( in[60] << ( 32 - 12 ) ) & 0x7fffff ;
	out[81] |= ( in[61] << ( 32 - 12 ) ) & 0x7fffff ;
	out[82] |= ( in[62] << ( 32 - 12 ) ) & 0x7fffff ;
	out[83] |= ( in[63] << ( 32 - 12 ) ) & 0x7fffff ;

	out[84] = ( in[60] >> 3 ) & 0x7fffff ;
	out[85] = ( in[61] >> 3 ) & 0x7fffff ;
	out[86] = ( in[62] >> 3 ) & 0x7fffff ;
	out[87] = ( in[63] >> 3 ) & 0x7fffff ;

	out[88] = ( in[60] >> 26 ) ;
	out[89] = ( in[61] >> 26 ) ;
	out[90] = ( in[62] >> 26 ) ;
	out[91] = ( in[63] >> 26 ) ;

	out[88] |= ( in[64] << ( 32 - 26 ) ) & 0x7fffff ;
	out[89] |= ( in[65] << ( 32 - 26 ) ) & 0x7fffff ;
	out[90] |= ( in[66] << ( 32 - 26 ) ) & 0x7fffff ;
	out[91] |= ( in[67] << ( 32 - 26 ) ) & 0x7fffff ;

	out[92] = ( in[64] >> 17 ) ;
	out[93] = ( in[65] >> 17 ) ;
	out[94] = ( in[66] >> 17 ) ;
	out[95] = ( in[67] >> 17 ) ;

	out[92] |= ( in[68] << ( 32 - 17 ) ) & 0x7fffff ;
	out[93] |= ( in[69] << ( 32 - 17 ) ) & 0x7fffff ;
	out[94] |= ( in[70] << ( 32 - 17 ) ) & 0x7fffff ;
	out[95] |= ( in[71] << ( 32 - 17 ) ) & 0x7fffff ;

	out[96] = ( in[68] >> 8 ) & 0x7fffff ;
	out[97] = ( in[69] >> 8 ) & 0x7fffff ;
	out[98] = ( in[70] >> 8 ) & 0x7fffff ;
	out[99] = ( in[71] >> 8 ) & 0x7fffff ;

	out[100] = ( in[68] >> 31 ) ;
	out[101] = ( in[69] >> 31 ) ;
	out[102] = ( in[70] >> 31 ) ;
	out[103] = ( in[71] >> 31 ) ;

	out[100] |= ( in[72] << ( 32 - 31 ) ) & 0x7fffff ;
	out[101] |= ( in[73] << ( 32 - 31 ) ) & 0x7fffff ;
	out[102] |= ( in[74] << ( 32 - 31 ) ) & 0x7fffff ;
	out[103] |= ( in[75] << ( 32 - 31 ) ) & 0x7fffff ;

	out[104] = ( in[72] >> 22 ) ;
	out[105] = ( in[73] >> 22 ) ;
	out[106] = ( in[74] >> 22 ) ;
	out[107] = ( in[75] >> 22 ) ;

	out[104] |= ( in[76] << ( 32 - 22 ) ) & 0x7fffff ;
	out[105] |= ( in[77] << ( 32 - 22 ) ) & 0x7fffff ;
	out[106] |= ( in[78] << ( 32 - 22 ) ) & 0x7fffff ;
	out[107] |= ( in[79] << ( 32 - 22 ) ) & 0x7fffff ;

	out[108] = ( in[76] >> 13 ) ;
	out[109] = ( in[77] >> 13 ) ;
	out[110] = ( in[78] >> 13 ) ;
	out[111] = ( in[79] >> 13 ) ;

	out[108] |= ( in[80] << ( 32 - 13 ) ) & 0x7fffff ;
	out[109] |= ( in[81] << ( 32 - 13 ) ) & 0x7fffff ;
	out[110] |= ( in[82] << ( 32 - 13 ) ) & 0x7fffff ;
	out[111] |= ( in[83] << ( 32 - 13 ) ) & 0x7fffff ;

	out[112] = ( in[80] >> 4 ) & 0x7fffff ;
	out[113] = ( in[81] >> 4 ) & 0x7fffff ;
	out[114] = ( in[82] >> 4 ) & 0x7fffff ;
	out[115] = ( in[83] >> 4 ) & 0x7fffff ;

	out[116] = ( in[80] >> 27 ) ;
	out[117] = ( in[81] >> 27 ) ;
	out[118] = ( in[82] >> 27 ) ;
	out[119] = ( in[83] >> 27 ) ;

	out[116] |= ( in[84] << ( 32 - 27 ) ) & 0x7fffff ;
	out[117] |= ( in[85] << ( 32 - 27 ) ) & 0x7fffff ;
	out[118] |= ( in[86] << ( 32 - 27 ) ) & 0x7fffff ;
	out[119] |= ( in[87] << ( 32 - 27 ) ) & 0x7fffff ;

	out[120] = ( in[84] >> 18 ) ;
	out[121] = ( in[85] >> 18 ) ;
	out[122] = ( in[86] >> 18 ) ;
	out[123] = ( in[87] >> 18 ) ;

	out[120] |= ( in[88] << ( 32 - 18 ) ) & 0x7fffff ;
	out[121] |= ( in[89] << ( 32 - 18 ) ) & 0x7fffff ;
	out[122] |= ( in[90] << ( 32 - 18 ) ) & 0x7fffff ;
	out[123] |= ( in[91] << ( 32 - 18 ) ) & 0x7fffff ;

	out[124] = ( in[88] >> 9 ) ;
	out[125] = ( in[89] >> 9 ) ;
	out[126] = ( in[90] >> 9 ) ;
	out[127] = ( in[91] >> 9 ) ;
}


// 24-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c24(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0xffffff ;
	out[1] = ( in[1] >> 0 ) & 0xffffff ;
	out[2] = ( in[2] >> 0 ) & 0xffffff ;
	out[3] = ( in[3] >> 0 ) & 0xffffff ;

	out[4] = ( in[0] >> 24 ) ;
	out[5] = ( in[1] >> 24 ) ;
	out[6] = ( in[2] >> 24 ) ;
	out[7] = ( in[3] >> 24 ) ;

	out[4] |= ( in[4] << ( 32 - 24 ) ) & 0xffffff ;
	out[5] |= ( in[5] << ( 32 - 24 ) ) & 0xffffff ;
	out[6] |= ( in[6] << ( 32 - 24 ) ) & 0xffffff ;
	out[7] |= ( in[7] << ( 32 - 24 ) ) & 0xffffff ;

	out[8] = ( in[4] >> 16 ) ;
	out[9] = ( in[5] >> 16 ) ;
	out[10] = ( in[6] >> 16 ) ;
	out[11] = ( in[7] >> 16 ) ;

	out[8] |= ( in[8] << ( 32 - 16 ) ) & 0xffffff ;
	out[9] |= ( in[9] << ( 32 - 16 ) ) & 0xffffff ;
	out[10] |= ( in[10] << ( 32 - 16 ) ) & 0xffffff ;
	out[11] |= ( in[11] << ( 32 - 16 ) ) & 0xffffff ;

	out[12] = ( in[8] >> 8 ) ;
	out[13] = ( in[9] >> 8 ) ;
	out[14] = ( in[10] >> 8 ) ;
	out[15] = ( in[11] >> 8 ) ;

	out[16] = ( in[12] >> 0 ) & 0xffffff ;
	out[17] = ( in[13] >> 0 ) & 0xffffff ;
	out[18] = ( in[14] >> 0 ) & 0xffffff ;
	out[19] = ( in[15] >> 0 ) & 0xffffff ;

	out[20] = ( in[12] >> 24 ) ;
	out[21] = ( in[13] >> 24 ) ;
	out[22] = ( in[14] >> 24 ) ;
	out[23] = ( in[15] >> 24 ) ;

	out[20] |= ( in[16] << ( 32 - 24 ) ) & 0xffffff ;
	out[21] |= ( in[17] << ( 32 - 24 ) ) & 0xffffff ;
	out[22] |= ( in[18] << ( 32 - 24 ) ) & 0xffffff ;
	out[23] |= ( in[19] << ( 32 - 24 ) ) & 0xffffff ;

	out[24] = ( in[16] >> 16 ) ;
	out[25] = ( in[17] >> 16 ) ;
	out[26] = ( in[18] >> 16 ) ;
	out[27] = ( in[19] >> 16 ) ;

	out[24] |= ( in[20] << ( 32 - 16 ) ) & 0xffffff ;
	out[25] |= ( in[21] << ( 32 - 16 ) ) & 0xffffff ;
	out[26] |= ( in[22] << ( 32 - 16 ) ) & 0xffffff ;
	out[27] |= ( in[23] << ( 32 - 16 ) ) & 0xffffff ;

	out[28] = ( in[20] >> 8 ) ;
	out[29] = ( in[21] >> 8 ) ;
	out[30] = ( in[22] >> 8 ) ;
	out[31] = ( in[23] >> 8 ) ;

	out[32] = ( in[24] >> 0 ) & 0xffffff ;
	out[33] = ( in[25] >> 0 ) & 0xffffff ;
	out[34] = ( in[26] >> 0 ) & 0xffffff ;
	out[35] = ( in[27] >> 0 ) & 0xffffff ;

	out[36] = ( in[24] >> 24 ) ;
	out[37] = ( in[25] >> 24 ) ;
	out[38] = ( in[26] >> 24 ) ;
	out[39] = ( in[27] >> 24 ) ;

	out[36] |= ( in[28] << ( 32 - 24 ) ) & 0xffffff ;
	out[37] |= ( in[29] << ( 32 - 24 ) ) & 0xffffff ;
	out[38] |= ( in[30] << ( 32 - 24 ) ) & 0xffffff ;
	out[39] |= ( in[31] << ( 32 - 24 ) ) & 0xffffff ;

	out[40] = ( in[28] >> 16 ) ;
	out[41] = ( in[29] >> 16 ) ;
	out[42] = ( in[30] >> 16 ) ;
	out[43] = ( in[31] >> 16 ) ;

	out[40] |= ( in[32] << ( 32 - 16 ) ) & 0xffffff ;
	out[41] |= ( in[33] << ( 32 - 16 ) ) & 0xffffff ;
	out[42] |= ( in[34] << ( 32 - 16 ) ) & 0xffffff ;
	out[43] |= ( in[35] << ( 32 - 16 ) ) & 0xffffff ;

	out[44] = ( in[32] >> 8 ) ;
	out[45] = ( in[33] >> 8 ) ;
	out[46] = ( in[34] >> 8 ) ;
	out[47] = ( in[35] >> 8 ) ;

	out[48] = ( in[36] >> 0 ) & 0xffffff ;
	out[49] = ( in[37] >> 0 ) & 0xffffff ;
	out[50] = ( in[38] >> 0 ) & 0xffffff ;
	out[51] = ( in[39] >> 0 ) & 0xffffff ;

	out[52] = ( in[36] >> 24 ) ;
	out[53] = ( in[37] >> 24 ) ;
	out[54] = ( in[38] >> 24 ) ;
	out[55] = ( in[39] >> 24 ) ;

	out[52] |= ( in[40] << ( 32 - 24 ) ) & 0xffffff ;
	out[53] |= ( in[41] << ( 32 - 24 ) ) & 0xffffff ;
	out[54] |= ( in[42] << ( 32 - 24 ) ) & 0xffffff ;
	out[55] |= ( in[43] << ( 32 - 24 ) ) & 0xffffff ;

	out[56] = ( in[40] >> 16 ) ;
	out[57] = ( in[41] >> 16 ) ;
	out[58] = ( in[42] >> 16 ) ;
	out[59] = ( in[43] >> 16 ) ;

	out[56] |= ( in[44] << ( 32 - 16 ) ) & 0xffffff ;
	out[57] |= ( in[45] << ( 32 - 16 ) ) & 0xffffff ;
	out[58] |= ( in[46] << ( 32 - 16 ) ) & 0xffffff ;
	out[59] |= ( in[47] << ( 32 - 16 ) ) & 0xffffff ;

	out[60] = ( in[44] >> 8 ) ;
	out[61] = ( in[45] >> 8 ) ;
	out[62] = ( in[46] >> 8 ) ;
	out[63] = ( in[47] >> 8 ) ;

	out[64] = ( in[48] >> 0 ) & 0xffffff ;
	out[65] = ( in[49] >> 0 ) & 0xffffff ;
	out[66] = ( in[50] >> 0 ) & 0xffffff ;
	out[67] = ( in[51] >> 0 ) & 0xffffff ;

	out[68] = ( in[48] >> 24 ) ;
	out[69] = ( in[49] >> 24 ) ;
	out[70] = ( in[50] >> 24 ) ;
	out[71] = ( in[51] >> 24 ) ;

	out[68] |= ( in[52] << ( 32 - 24 ) ) & 0xffffff ;
	out[69] |= ( in[53] << ( 32 - 24 ) ) & 0xffffff ;
	out[70] |= ( in[54] << ( 32 - 24 ) ) & 0xffffff ;
	out[71] |= ( in[55] << ( 32 - 24 ) ) & 0xffffff ;

	out[72] = ( in[52] >> 16 ) ;
	out[73] = ( in[53] >> 16 ) ;
	out[74] = ( in[54] >> 16 ) ;
	out[75] = ( in[55] >> 16 ) ;

	out[72] |= ( in[56] << ( 32 - 16 ) ) & 0xffffff ;
	out[73] |= ( in[57] << ( 32 - 16 ) ) & 0xffffff ;
	out[74] |= ( in[58] << ( 32 - 16 ) ) & 0xffffff ;
	out[75] |= ( in[59] << ( 32 - 16 ) ) & 0xffffff ;

	out[76] = ( in[56] >> 8 ) ;
	out[77] = ( in[57] >> 8 ) ;
	out[78] = ( in[58] >> 8 ) ;
	out[79] = ( in[59] >> 8 ) ;

	out[80] = ( in[60] >> 0 ) & 0xffffff ;
	out[81] = ( in[61] >> 0 ) & 0xffffff ;
	out[82] = ( in[62] >> 0 ) & 0xffffff ;
	out[83] = ( in[63] >> 0 ) & 0xffffff ;

	out[84] = ( in[60] >> 24 ) ;
	out[85] = ( in[61] >> 24 ) ;
	out[86] = ( in[62] >> 24 ) ;
	out[87] = ( in[63] >> 24 ) ;

	out[84] |= ( in[64] << ( 32 - 24 ) ) & 0xffffff ;
	out[85] |= ( in[65] << ( 32 - 24 ) ) & 0xffffff ;
	out[86] |= ( in[66] << ( 32 - 24 ) ) & 0xffffff ;
	out[87] |= ( in[67] << ( 32 - 24 ) ) & 0xffffff ;

	out[88] = ( in[64] >> 16 ) ;
	out[89] = ( in[65] >> 16 ) ;
	out[90] = ( in[66] >> 16 ) ;
	out[91] = ( in[67] >> 16 ) ;

	out[88] |= ( in[68] << ( 32 - 16 ) ) & 0xffffff ;
	out[89] |= ( in[69] << ( 32 - 16 ) ) & 0xffffff ;
	out[90] |= ( in[70] << ( 32 - 16 ) ) & 0xffffff ;
	out[91] |= ( in[71] << ( 32 - 16 ) ) & 0xffffff ;

	out[92] = ( in[68] >> 8 ) ;
	out[93] = ( in[69] >> 8 ) ;
	out[94] = ( in[70] >> 8 ) ;
	out[95] = ( in[71] >> 8 ) ;

	out[96] = ( in[72] >> 0 ) & 0xffffff ;
	out[97] = ( in[73] >> 0 ) & 0xffffff ;
	out[98] = ( in[74] >> 0 ) & 0xffffff ;
	out[99] = ( in[75] >> 0 ) & 0xffffff ;

	out[100] = ( in[72] >> 24 ) ;
	out[101] = ( in[73] >> 24 ) ;
	out[102] = ( in[74] >> 24 ) ;
	out[103] = ( in[75] >> 24 ) ;

	out[100] |= ( in[76] << ( 32 - 24 ) ) & 0xffffff ;
	out[101] |= ( in[77] << ( 32 - 24 ) ) & 0xffffff ;
	out[102] |= ( in[78] << ( 32 - 24 ) ) & 0xffffff ;
	out[103] |= ( in[79] << ( 32 - 24 ) ) & 0xffffff ;

	out[104] = ( in[76] >> 16 ) ;
	out[105] = ( in[77] >> 16 ) ;
	out[106] = ( in[78] >> 16 ) ;
	out[107] = ( in[79] >> 16 ) ;

	out[104] |= ( in[80] << ( 32 - 16 ) ) & 0xffffff ;
	out[105] |= ( in[81] << ( 32 - 16 ) ) & 0xffffff ;
	out[106] |= ( in[82] << ( 32 - 16 ) ) & 0xffffff ;
	out[107] |= ( in[83] << ( 32 - 16 ) ) & 0xffffff ;

	out[108] = ( in[80] >> 8 ) ;
	out[109] = ( in[81] >> 8 ) ;
	out[110] = ( in[82] >> 8 ) ;
	out[111] = ( in[83] >> 8 ) ;

	out[112] = ( in[84] >> 0 ) & 0xffffff ;
	out[113] = ( in[85] >> 0 ) & 0xffffff ;
	out[114] = ( in[86] >> 0 ) & 0xffffff ;
	out[115] = ( in[87] >> 0 ) & 0xffffff ;

	out[116] = ( in[84] >> 24 ) ;
	out[117] = ( in[85] >> 24 ) ;
	out[118] = ( in[86] >> 24 ) ;
	out[119] = ( in[87] >> 24 ) ;

	out[116] |= ( in[88] << ( 32 - 24 ) ) & 0xffffff ;
	out[117] |= ( in[89] << ( 32 - 24 ) ) & 0xffffff ;
	out[118] |= ( in[90] << ( 32 - 24 ) ) & 0xffffff ;
	out[119] |= ( in[91] << ( 32 - 24 ) ) & 0xffffff ;

	out[120] = ( in[88] >> 16 ) ;
	out[121] = ( in[89] >> 16 ) ;
	out[122] = ( in[90] >> 16 ) ;
	out[123] = ( in[91] >> 16 ) ;

	out[120] |= ( in[92] << ( 32 - 16 ) ) & 0xffffff ;
	out[121] |= ( in[93] << ( 32 - 16 ) ) & 0xffffff ;
	out[122] |= ( in[94] << ( 32 - 16 ) ) & 0xffffff ;
	out[123] |= ( in[95] << ( 32 - 16 ) ) & 0xffffff ;

	out[124] = ( in[92] >> 8 ) ;
	out[125] = ( in[93] >> 8 ) ;
	out[126] = ( in[94] >> 8 ) ;
	out[127] = ( in[95] >> 8 ) ;
}


// 25-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c25(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x01ffffff ;
	out[1] = ( in[1] >> 0 ) & 0x01ffffff ;
	out[2] = ( in[2] >> 0 ) & 0x01ffffff ;
	out[3] = ( in[3] >> 0 ) & 0x01ffffff ;

	out[4] = ( in[0] >> 25 ) ;
	out[5] = ( in[1] >> 25 ) ;
	out[6] = ( in[2] >> 25 ) ;
	out[7] = ( in[3] >> 25 ) ;

	out[4] |= ( in[4] << ( 32 - 25 ) ) & 0x01ffffff ;
	out[5] |= ( in[5] << ( 32 - 25 ) ) & 0x01ffffff ;
	out[6] |= ( in[6] << ( 32 - 25 ) ) & 0x01ffffff ;
	out[7] |= ( in[7] << ( 32 - 25 ) ) & 0x01ffffff ;

	out[8] = ( in[4] >> 18 ) ;
	out[9] = ( in[5] >> 18 ) ;
	out[10] = ( in[6] >> 18 ) ;
	out[11] = ( in[7] >> 18 ) ;

	out[8] |= ( in[8] << ( 32 - 18 ) ) & 0x01ffffff ;
	out[9] |= ( in[9] << ( 32 - 18 ) ) & 0x01ffffff ;
	out[10] |= ( in[10] << ( 32 - 18 ) ) & 0x01ffffff ;
	out[11] |= ( in[11] << ( 32 - 18 ) ) & 0x01ffffff ;

	out[12] = ( in[8] >> 11 ) ;
	out[13] = ( in[9] >> 11 ) ;
	out[14] = ( in[10] >> 11 ) ;
	out[15] = ( in[11] >> 11 ) ;

	out[12] |= ( in[12] << ( 32 - 11 ) ) & 0x01ffffff ;
	out[13] |= ( in[13] << ( 32 - 11 ) ) & 0x01ffffff ;
	out[14] |= ( in[14] << ( 32 - 11 ) ) & 0x01ffffff ;
	out[15] |= ( in[15] << ( 32 - 11 ) ) & 0x01ffffff ;

	out[16] = ( in[12] >> 4 ) & 0x01ffffff ;
	out[17] = ( in[13] >> 4 ) & 0x01ffffff ;
	out[18] = ( in[14] >> 4 ) & 0x01ffffff ;
	out[19] = ( in[15] >> 4 ) & 0x01ffffff ;

	out[20] = ( in[12] >> 29 ) ;
	out[21] = ( in[13] >> 29 ) ;
	out[22] = ( in[14] >> 29 ) ;
	out[23] = ( in[15] >> 29 ) ;

	out[20] |= ( in[16] << ( 32 - 29 ) ) & 0x01ffffff ;
	out[21] |= ( in[17] << ( 32 - 29 ) ) & 0x01ffffff ;
	out[22] |= ( in[18] << ( 32 - 29 ) ) & 0x01ffffff ;
	out[23] |= ( in[19] << ( 32 - 29 ) ) & 0x01ffffff ;

	out[24] = ( in[16] >> 22 ) ;
	out[25] = ( in[17] >> 22 ) ;
	out[26] = ( in[18] >> 22 ) ;
	out[27] = ( in[19] >> 22 ) ;

	out[24] |= ( in[20] << ( 32 - 22 ) ) & 0x01ffffff ;
	out[25] |= ( in[21] << ( 32 - 22 ) ) & 0x01ffffff ;
	out[26] |= ( in[22] << ( 32 - 22 ) ) & 0x01ffffff ;
	out[27] |= ( in[23] << ( 32 - 22 ) ) & 0x01ffffff ;

	out[28] = ( in[20] >> 15 ) ;
	out[29] = ( in[21] >> 15 ) ;
	out[30] = ( in[22] >> 15 ) ;
	out[31] = ( in[23] >> 15 ) ;

	out[28] |= ( in[24] << ( 32 - 15 ) ) & 0x01ffffff ;
	out[29] |= ( in[25] << ( 32 - 15 ) ) & 0x01ffffff ;
	out[30] |= ( in[26] << ( 32 - 15 ) ) & 0x01ffffff ;
	out[31] |= ( in[27] << ( 32 - 15 ) ) & 0x01ffffff ;

	out[32] = ( in[24] >> 8 ) ;
	out[33] = ( in[25] >> 8 ) ;
	out[34] = ( in[26] >> 8 ) ;
	out[35] = ( in[27] >> 8 ) ;

	out[32] |= ( in[28] << ( 32 - 8 ) ) & 0x01ffffff ;
	out[33] |= ( in[29] << ( 32 - 8 ) ) & 0x01ffffff ;
	out[34] |= ( in[30] << ( 32 - 8 ) ) & 0x01ffffff ;
	out[35] |= ( in[31] << ( 32 - 8 ) ) & 0x01ffffff ;

	out[36] = ( in[28] >> 1 ) & 0x01ffffff ;
	out[37] = ( in[29] >> 1 ) & 0x01ffffff ;
	out[38] = ( in[30] >> 1 ) & 0x01ffffff ;
	out[39] = ( in[31] >> 1 ) & 0x01ffffff ;

	out[40] = ( in[28] >> 26 ) ;
	out[41] = ( in[29] >> 26 ) ;
	out[42] = ( in[30] >> 26 ) ;
	out[43] = ( in[31] >> 26 ) ;

	out[40] |= ( in[32] << ( 32 - 26 ) ) & 0x01ffffff ;
	out[41] |= ( in[33] << ( 32 - 26 ) ) & 0x01ffffff ;
	out[42] |= ( in[34] << ( 32 - 26 ) ) & 0x01ffffff ;
	out[43] |= ( in[35] << ( 32 - 26 ) ) & 0x01ffffff ;

	out[44] = ( in[32] >> 19 ) ;
	out[45] = ( in[33] >> 19 ) ;
	out[46] = ( in[34] >> 19 ) ;
	out[47] = ( in[35] >> 19 ) ;

	out[44] |= ( in[36] << ( 32 - 19 ) ) & 0x01ffffff ;
	out[45] |= ( in[37] << ( 32 - 19 ) ) & 0x01ffffff ;
	out[46] |= ( in[38] << ( 32 - 19 ) ) & 0x01ffffff ;
	out[47] |= ( in[39] << ( 32 - 19 ) ) & 0x01ffffff ;

	out[48] = ( in[36] >> 12 ) ;
	out[49] = ( in[37] >> 12 ) ;
	out[50] = ( in[38] >> 12 ) ;
	out[51] = ( in[39] >> 12 ) ;

	out[48] |= ( in[40] << ( 32 - 12 ) ) & 0x01ffffff ;
	out[49] |= ( in[41] << ( 32 - 12 ) ) & 0x01ffffff ;
	out[50] |= ( in[42] << ( 32 - 12 ) ) & 0x01ffffff ;
	out[51] |= ( in[43] << ( 32 - 12 ) ) & 0x01ffffff ;

	out[52] = ( in[40] >> 5 ) & 0x01ffffff ;
	out[53] = ( in[41] >> 5 ) & 0x01ffffff ;
	out[54] = ( in[42] >> 5 ) & 0x01ffffff ;
	out[55] = ( in[43] >> 5 ) & 0x01ffffff ;

	out[56] = ( in[40] >> 30 ) ;
	out[57] = ( in[41] >> 30 ) ;
	out[58] = ( in[42] >> 30 ) ;
	out[59] = ( in[43] >> 30 ) ;

	out[56] |= ( in[44] << ( 32 - 30 ) ) & 0x01ffffff ;
	out[57] |= ( in[45] << ( 32 - 30 ) ) & 0x01ffffff ;
	out[58] |= ( in[46] << ( 32 - 30 ) ) & 0x01ffffff ;
	out[59] |= ( in[47] << ( 32 - 30 ) ) & 0x01ffffff ;

	out[60] = ( in[44] >> 23 ) ;
	out[61] = ( in[45] >> 23 ) ;
	out[62] = ( in[46] >> 23 ) ;
	out[63] = ( in[47] >> 23 ) ;

	out[60] |= ( in[48] << ( 32 - 23 ) ) & 0x01ffffff ;
	out[61] |= ( in[49] << ( 32 - 23 ) ) & 0x01ffffff ;
	out[62] |= ( in[50] << ( 32 - 23 ) ) & 0x01ffffff ;
	out[63] |= ( in[51] << ( 32 - 23 ) ) & 0x01ffffff ;

	out[64] = ( in[48] >> 16 ) ;
	out[65] = ( in[49] >> 16 ) ;
	out[66] = ( in[50] >> 16 ) ;
	out[67] = ( in[51] >> 16 ) ;

	out[64] |= ( in[52] << ( 32 - 16 ) ) & 0x01ffffff ;
	out[65] |= ( in[53] << ( 32 - 16 ) ) & 0x01ffffff ;
	out[66] |= ( in[54] << ( 32 - 16 ) ) & 0x01ffffff ;
	out[67] |= ( in[55] << ( 32 - 16 ) ) & 0x01ffffff ;

	out[68] = ( in[52] >> 9 ) ;
	out[69] = ( in[53] >> 9 ) ;
	out[70] = ( in[54] >> 9 ) ;
	out[71] = ( in[55] >> 9 ) ;

	out[68] |= ( in[56] << ( 32 - 9 ) ) & 0x01ffffff ;
	out[69] |= ( in[57] << ( 32 - 9 ) ) & 0x01ffffff ;
	out[70] |= ( in[58] << ( 32 - 9 ) ) & 0x01ffffff ;
	out[71] |= ( in[59] << ( 32 - 9 ) ) & 0x01ffffff ;

	out[72] = ( in[56] >> 2 ) & 0x01ffffff ;
	out[73] = ( in[57] >> 2 ) & 0x01ffffff ;
	out[74] = ( in[58] >> 2 ) & 0x01ffffff ;
	out[75] = ( in[59] >> 2 ) & 0x01ffffff ;

	out[76] = ( in[56] >> 27 ) ;
	out[77] = ( in[57] >> 27 ) ;
	out[78] = ( in[58] >> 27 ) ;
	out[79] = ( in[59] >> 27 ) ;

	out[76] |= ( in[60] << ( 32 - 27 ) ) & 0x01ffffff ;
	out[77] |= ( in[61] << ( 32 - 27 ) ) & 0x01ffffff ;
	out[78] |= ( in[62] << ( 32 - 27 ) ) & 0x01ffffff ;
	out[79] |= ( in[63] << ( 32 - 27 ) ) & 0x01ffffff ;

	out[80] = ( in[60] >> 20 ) ;
	out[81] = ( in[61] >> 20 ) ;
	out[82] = ( in[62] >> 20 ) ;
	out[83] = ( in[63] >> 20 ) ;

	out[80] |= ( in[64] << ( 32 - 20 ) ) & 0x01ffffff ;
	out[81] |= ( in[65] << ( 32 - 20 ) ) & 0x01ffffff ;
	out[82] |= ( in[66] << ( 32 - 20 ) ) & 0x01ffffff ;
	out[83] |= ( in[67] << ( 32 - 20 ) ) & 0x01ffffff ;

	out[84] = ( in[64] >> 13 ) ;
	out[85] = ( in[65] >> 13 ) ;
	out[86] = ( in[66] >> 13 ) ;
	out[87] = ( in[67] >> 13 ) ;

	out[84] |= ( in[68] << ( 32 - 13 ) ) & 0x01ffffff ;
	out[85] |= ( in[69] << ( 32 - 13 ) ) & 0x01ffffff ;
	out[86] |= ( in[70] << ( 32 - 13 ) ) & 0x01ffffff ;
	out[87] |= ( in[71] << ( 32 - 13 ) ) & 0x01ffffff ;

	out[88] = ( in[68] >> 6 ) & 0x01ffffff ;
	out[89] = ( in[69] >> 6 ) & 0x01ffffff ;
	out[90] = ( in[70] >> 6 ) & 0x01ffffff ;
	out[91] = ( in[71] >> 6 ) & 0x01ffffff ;

	out[92] = ( in[68] >> 31 ) ;
	out[93] = ( in[69] >> 31 ) ;
	out[94] = ( in[70] >> 31 ) ;
	out[95] = ( in[71] >> 31 ) ;

	out[92] |= ( in[72] << ( 32 - 31 ) ) & 0x01ffffff ;
	out[93] |= ( in[73] << ( 32 - 31 ) ) & 0x01ffffff ;
	out[94] |= ( in[74] << ( 32 - 31 ) ) & 0x01ffffff ;
	out[95] |= ( in[75] << ( 32 - 31 ) ) & 0x01ffffff ;

	out[96] = ( in[72] >> 24 ) ;
	out[97] = ( in[73] >> 24 ) ;
	out[98] = ( in[74] >> 24 ) ;
	out[99] = ( in[75] >> 24 ) ;

	out[96] |= ( in[76] << ( 32 - 24 ) ) & 0x01ffffff ;
	out[97] |= ( in[77] << ( 32 - 24 ) ) & 0x01ffffff ;
	out[98] |= ( in[78] << ( 32 - 24 ) ) & 0x01ffffff ;
	out[99] |= ( in[79] << ( 32 - 24 ) ) & 0x01ffffff ;

	out[100] = ( in[76] >> 17 ) ;
	out[101] = ( in[77] >> 17 ) ;
	out[102] = ( in[78] >> 17 ) ;
	out[103] = ( in[79] >> 17 ) ;

	out[100] |= ( in[80] << ( 32 - 17 ) ) & 0x01ffffff ;
	out[101] |= ( in[81] << ( 32 - 17 ) ) & 0x01ffffff ;
	out[102] |= ( in[82] << ( 32 - 17 ) ) & 0x01ffffff ;
	out[103] |= ( in[83] << ( 32 - 17 ) ) & 0x01ffffff ;

	out[104] = ( in[80] >> 10 ) ;
	out[105] = ( in[81] >> 10 ) ;
	out[106] = ( in[82] >> 10 ) ;
	out[107] = ( in[83] >> 10 ) ;

	out[104] |= ( in[84] << ( 32 - 10 ) ) & 0x01ffffff ;
	out[105] |= ( in[85] << ( 32 - 10 ) ) & 0x01ffffff ;
	out[106] |= ( in[86] << ( 32 - 10 ) ) & 0x01ffffff ;
	out[107] |= ( in[87] << ( 32 - 10 ) ) & 0x01ffffff ;

	out[108] = ( in[84] >> 3 ) & 0x01ffffff ;
	out[109] = ( in[85] >> 3 ) & 0x01ffffff ;
	out[110] = ( in[86] >> 3 ) & 0x01ffffff ;
	out[111] = ( in[87] >> 3 ) & 0x01ffffff ;

	out[112] = ( in[84] >> 28 ) ;
	out[113] = ( in[85] >> 28 ) ;
	out[114] = ( in[86] >> 28 ) ;
	out[115] = ( in[87] >> 28 ) ;

	out[112] |= ( in[88] << ( 32 - 28 ) ) & 0x01ffffff ;
	out[113] |= ( in[89] << ( 32 - 28 ) ) & 0x01ffffff ;
	out[114] |= ( in[90] << ( 32 - 28 ) ) & 0x01ffffff ;
	out[115] |= ( in[91] << ( 32 - 28 ) ) & 0x01ffffff ;

	out[116] = ( in[88] >> 21 ) ;
	out[117] = ( in[89] >> 21 ) ;
	out[118] = ( in[90] >> 21 ) ;
	out[119] = ( in[91] >> 21 ) ;

	out[116] |= ( in[92] << ( 32 - 21 ) ) & 0x01ffffff ;
	out[117] |= ( in[93] << ( 32 - 21 ) ) & 0x01ffffff ;
	out[118] |= ( in[94] << ( 32 - 21 ) ) & 0x01ffffff ;
	out[119] |= ( in[95] << ( 32 - 21 ) ) & 0x01ffffff ;

	out[120] = ( in[92] >> 14 ) ;
	out[121] = ( in[93] >> 14 ) ;
	out[122] = ( in[94] >> 14 ) ;
	out[123] = ( in[95] >> 14 ) ;

	out[120] |= ( in[96] << ( 32 - 14 ) ) & 0x01ffffff ;
	out[121] |= ( in[97] << ( 32 - 14 ) ) & 0x01ffffff ;
	out[122] |= ( in[98] << ( 32 - 14 ) ) & 0x01ffffff ;
	out[123] |= ( in[99] << ( 32 - 14 ) ) & 0x01ffffff ;

	out[124] = ( in[96] >> 7 ) ;
	out[125] = ( in[97] >> 7 ) ;
	out[126] = ( in[98] >> 7 ) ;
	out[127] = ( in[99] >> 7 ) ;
}


// 26-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c26(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x03ffffff ;
	out[1] = ( in[1] >> 0 ) & 0x03ffffff ;
	out[2] = ( in[2] >> 0 ) & 0x03ffffff ;
	out[3] = ( in[3] >> 0 ) & 0x03ffffff ;

	out[4] = ( in[0] >> 26 ) ;
	out[5] = ( in[1] >> 26 ) ;
	out[6] = ( in[2] >> 26 ) ;
	out[7] = ( in[3] >> 26 ) ;

	out[4] |= ( in[4] << ( 32 - 26 ) ) & 0x03ffffff ;
	out[5] |= ( in[5] << ( 32 - 26 ) ) & 0x03ffffff ;
	out[6] |= ( in[6] << ( 32 - 26 ) ) & 0x03ffffff ;
	out[7] |= ( in[7] << ( 32 - 26 ) ) & 0x03ffffff ;

	out[8] = ( in[4] >> 20 ) ;
	out[9] = ( in[5] >> 20 ) ;
	out[10] = ( in[6] >> 20 ) ;
	out[11] = ( in[7] >> 20 ) ;

	out[8] |= ( in[8] << ( 32 - 20 ) ) & 0x03ffffff ;
	out[9] |= ( in[9] << ( 32 - 20 ) ) & 0x03ffffff ;
	out[10] |= ( in[10] << ( 32 - 20 ) ) & 0x03ffffff ;
	out[11] |= ( in[11] << ( 32 - 20 ) ) & 0x03ffffff ;

	out[12] = ( in[8] >> 14 ) ;
	out[13] = ( in[9] >> 14 ) ;
	out[14] = ( in[10] >> 14 ) ;
	out[15] = ( in[11] >> 14 ) ;

	out[12] |= ( in[12] << ( 32 - 14 ) ) & 0x03ffffff ;
	out[13] |= ( in[13] << ( 32 - 14 ) ) & 0x03ffffff ;
	out[14] |= ( in[14] << ( 32 - 14 ) ) & 0x03ffffff ;
	out[15] |= ( in[15] << ( 32 - 14 ) ) & 0x03ffffff ;

	out[16] = ( in[12] >> 8 ) ;
	out[17] = ( in[13] >> 8 ) ;
	out[18] = ( in[14] >> 8 ) ;
	out[19] = ( in[15] >> 8 ) ;

	out[16] |= ( in[16] << ( 32 - 8 ) ) & 0x03ffffff ;
	out[17] |= ( in[17] << ( 32 - 8 ) ) & 0x03ffffff ;
	out[18] |= ( in[18] << ( 32 - 8 ) ) & 0x03ffffff ;
	out[19] |= ( in[19] << ( 32 - 8 ) ) & 0x03ffffff ;

	out[20] = ( in[16] >> 2 ) & 0x03ffffff ;
	out[21] = ( in[17] >> 2 ) & 0x03ffffff ;
	out[22] = ( in[18] >> 2 ) & 0x03ffffff ;
	out[23] = ( in[19] >> 2 ) & 0x03ffffff ;

	out[24] = ( in[16] >> 28 ) ;
	out[25] = ( in[17] >> 28 ) ;
	out[26] = ( in[18] >> 28 ) ;
	out[27] = ( in[19] >> 28 ) ;

	out[24] |= ( in[20] << ( 32 - 28 ) ) & 0x03ffffff ;
	out[25] |= ( in[21] << ( 32 - 28 ) ) & 0x03ffffff ;
	out[26] |= ( in[22] << ( 32 - 28 ) ) & 0x03ffffff ;
	out[27] |= ( in[23] << ( 32 - 28 ) ) & 0x03ffffff ;

	out[28] = ( in[20] >> 22 ) ;
	out[29] = ( in[21] >> 22 ) ;
	out[30] = ( in[22] >> 22 ) ;
	out[31] = ( in[23] >> 22 ) ;

	out[28] |= ( in[24] << ( 32 - 22 ) ) & 0x03ffffff ;
	out[29] |= ( in[25] << ( 32 - 22 ) ) & 0x03ffffff ;
	out[30] |= ( in[26] << ( 32 - 22 ) ) & 0x03ffffff ;
	out[31] |= ( in[27] << ( 32 - 22 ) ) & 0x03ffffff ;

	out[32] = ( in[24] >> 16 ) ;
	out[33] = ( in[25] >> 16 ) ;
	out[34] = ( in[26] >> 16 ) ;
	out[35] = ( in[27] >> 16 ) ;

	out[32] |= ( in[28] << ( 32 - 16 ) ) & 0x03ffffff ;
	out[33] |= ( in[29] << ( 32 - 16 ) ) & 0x03ffffff ;
	out[34] |= ( in[30] << ( 32 - 16 ) ) & 0x03ffffff ;
	out[35] |= ( in[31] << ( 32 - 16 ) ) & 0x03ffffff ;

	out[36] = ( in[28] >> 10 ) ;
	out[37] = ( in[29] >> 10 ) ;
	out[38] = ( in[30] >> 10 ) ;
	out[39] = ( in[31] >> 10 ) ;

	out[36] |= ( in[32] << ( 32 - 10 ) ) & 0x03ffffff ;
	out[37] |= ( in[33] << ( 32 - 10 ) ) & 0x03ffffff ;
	out[38] |= ( in[34] << ( 32 - 10 ) ) & 0x03ffffff ;
	out[39] |= ( in[35] << ( 32 - 10 ) ) & 0x03ffffff ;

	out[40] = ( in[32] >> 4 ) & 0x03ffffff ;
	out[41] = ( in[33] >> 4 ) & 0x03ffffff ;
	out[42] = ( in[34] >> 4 ) & 0x03ffffff ;
	out[43] = ( in[35] >> 4 ) & 0x03ffffff ;

	out[44] = ( in[32] >> 30 ) ;
	out[45] = ( in[33] >> 30 ) ;
	out[46] = ( in[34] >> 30 ) ;
	out[47] = ( in[35] >> 30 ) ;

	out[44] |= ( in[36] << ( 32 - 30 ) ) & 0x03ffffff ;
	out[45] |= ( in[37] << ( 32 - 30 ) ) & 0x03ffffff ;
	out[46] |= ( in[38] << ( 32 - 30 ) ) & 0x03ffffff ;
	out[47] |= ( in[39] << ( 32 - 30 ) ) & 0x03ffffff ;

	out[48] = ( in[36] >> 24 ) ;
	out[49] = ( in[37] >> 24 ) ;
	out[50] = ( in[38] >> 24 ) ;
	out[51] = ( in[39] >> 24 ) ;

	out[48] |= ( in[40] << ( 32 - 24 ) ) & 0x03ffffff ;
	out[49] |= ( in[41] << ( 32 - 24 ) ) & 0x03ffffff ;
	out[50] |= ( in[42] << ( 32 - 24 ) ) & 0x03ffffff ;
	out[51] |= ( in[43] << ( 32 - 24 ) ) & 0x03ffffff ;

	out[52] = ( in[40] >> 18 ) ;
	out[53] = ( in[41] >> 18 ) ;
	out[54] = ( in[42] >> 18 ) ;
	out[55] = ( in[43] >> 18 ) ;

	out[52] |= ( in[44] << ( 32 - 18 ) ) & 0x03ffffff ;
	out[53] |= ( in[45] << ( 32 - 18 ) ) & 0x03ffffff ;
	out[54] |= ( in[46] << ( 32 - 18 ) ) & 0x03ffffff ;
	out[55] |= ( in[47] << ( 32 - 18 ) ) & 0x03ffffff ;

	out[56] = ( in[44] >> 12 ) ;
	out[57] = ( in[45] >> 12 ) ;
	out[58] = ( in[46] >> 12 ) ;
	out[59] = ( in[47] >> 12 ) ;

	out[56] |= ( in[48] << ( 32 - 12 ) ) & 0x03ffffff ;
	out[57] |= ( in[49] << ( 32 - 12 ) ) & 0x03ffffff ;
	out[58] |= ( in[50] << ( 32 - 12 ) ) & 0x03ffffff ;
	out[59] |= ( in[51] << ( 32 - 12 ) ) & 0x03ffffff ;

	out[60] = ( in[48] >> 6 ) ;
	out[61] = ( in[49] >> 6 ) ;
	out[62] = ( in[50] >> 6 ) ;
	out[63] = ( in[51] >> 6 ) ;

	out[64] = ( in[52] >> 0 ) & 0x03ffffff ;
	out[65] = ( in[53] >> 0 ) & 0x03ffffff ;
	out[66] = ( in[54] >> 0 ) & 0x03ffffff ;
	out[67] = ( in[55] >> 0 ) & 0x03ffffff ;

	out[68] = ( in[52] >> 26 ) ;
	out[69] = ( in[53] >> 26 ) ;
	out[70] = ( in[54] >> 26 ) ;
	out[71] = ( in[55] >> 26 ) ;

	out[68] |= ( in[56] << ( 32 - 26 ) ) & 0x03ffffff ;
	out[69] |= ( in[57] << ( 32 - 26 ) ) & 0x03ffffff ;
	out[70] |= ( in[58] << ( 32 - 26 ) ) & 0x03ffffff ;
	out[71] |= ( in[59] << ( 32 - 26 ) ) & 0x03ffffff ;

	out[72] = ( in[56] >> 20 ) ;
	out[73] = ( in[57] >> 20 ) ;
	out[74] = ( in[58] >> 20 ) ;
	out[75] = ( in[59] >> 20 ) ;

	out[72] |= ( in[60] << ( 32 - 20 ) ) & 0x03ffffff ;
	out[73] |= ( in[61] << ( 32 - 20 ) ) & 0x03ffffff ;
	out[74] |= ( in[62] << ( 32 - 20 ) ) & 0x03ffffff ;
	out[75] |= ( in[63] << ( 32 - 20 ) ) & 0x03ffffff ;

	out[76] = ( in[60] >> 14 ) ;
	out[77] = ( in[61] >> 14 ) ;
	out[78] = ( in[62] >> 14 ) ;
	out[79] = ( in[63] >> 14 ) ;

	out[76] |= ( in[64] << ( 32 - 14 ) ) & 0x03ffffff ;
	out[77] |= ( in[65] << ( 32 - 14 ) ) & 0x03ffffff ;
	out[78] |= ( in[66] << ( 32 - 14 ) ) & 0x03ffffff ;
	out[79] |= ( in[67] << ( 32 - 14 ) ) & 0x03ffffff ;

	out[80] = ( in[64] >> 8 ) ;
	out[81] = ( in[65] >> 8 ) ;
	out[82] = ( in[66] >> 8 ) ;
	out[83] = ( in[67] >> 8 ) ;

	out[80] |= ( in[68] << ( 32 - 8 ) ) & 0x03ffffff ;
	out[81] |= ( in[69] << ( 32 - 8 ) ) & 0x03ffffff ;
	out[82] |= ( in[70] << ( 32 - 8 ) ) & 0x03ffffff ;
	out[83] |= ( in[71] << ( 32 - 8 ) ) & 0x03ffffff ;

	out[84] = ( in[68] >> 2 ) & 0x03ffffff ;
	out[85] = ( in[69] >> 2 ) & 0x03ffffff ;
	out[86] = ( in[70] >> 2 ) & 0x03ffffff ;
	out[87] = ( in[71] >> 2 ) & 0x03ffffff ;

	out[88] = ( in[68] >> 28 ) ;
	out[89] = ( in[69] >> 28 ) ;
	out[90] = ( in[70] >> 28 ) ;
	out[91] = ( in[71] >> 28 ) ;

	out[88] |= ( in[72] << ( 32 - 28 ) ) & 0x03ffffff ;
	out[89] |= ( in[73] << ( 32 - 28 ) ) & 0x03ffffff ;
	out[90] |= ( in[74] << ( 32 - 28 ) ) & 0x03ffffff ;
	out[91] |= ( in[75] << ( 32 - 28 ) ) & 0x03ffffff ;

	out[92] = ( in[72] >> 22 ) ;
	out[93] = ( in[73] >> 22 ) ;
	out[94] = ( in[74] >> 22 ) ;
	out[95] = ( in[75] >> 22 ) ;

	out[92] |= ( in[76] << ( 32 - 22 ) ) & 0x03ffffff ;
	out[93] |= ( in[77] << ( 32 - 22 ) ) & 0x03ffffff ;
	out[94] |= ( in[78] << ( 32 - 22 ) ) & 0x03ffffff ;
	out[95] |= ( in[79] << ( 32 - 22 ) ) & 0x03ffffff ;

	out[96] = ( in[76] >> 16 ) ;
	out[97] = ( in[77] >> 16 ) ;
	out[98] = ( in[78] >> 16 ) ;
	out[99] = ( in[79] >> 16 ) ;

	out[96] |= ( in[80] << ( 32 - 16 ) ) & 0x03ffffff ;
	out[97] |= ( in[81] << ( 32 - 16 ) ) & 0x03ffffff ;
	out[98] |= ( in[82] << ( 32 - 16 ) ) & 0x03ffffff ;
	out[99] |= ( in[83] << ( 32 - 16 ) ) & 0x03ffffff ;

	out[100] = ( in[80] >> 10 ) ;
	out[101] = ( in[81] >> 10 ) ;
	out[102] = ( in[82] >> 10 ) ;
	out[103] = ( in[83] >> 10 ) ;

	out[100] |= ( in[84] << ( 32 - 10 ) ) & 0x03ffffff ;
	out[101] |= ( in[85] << ( 32 - 10 ) ) & 0x03ffffff ;
	out[102] |= ( in[86] << ( 32 - 10 ) ) & 0x03ffffff ;
	out[103] |= ( in[87] << ( 32 - 10 ) ) & 0x03ffffff ;

	out[104] = ( in[84] >> 4 ) & 0x03ffffff ;
	out[105] = ( in[85] >> 4 ) & 0x03ffffff ;
	out[106] = ( in[86] >> 4 ) & 0x03ffffff ;
	out[107] = ( in[87] >> 4 ) & 0x03ffffff ;

	out[108] = ( in[84] >> 30 ) ;
	out[109] = ( in[85] >> 30 ) ;
	out[110] = ( in[86] >> 30 ) ;
	out[111] = ( in[87] >> 30 ) ;

	out[108] |= ( in[88] << ( 32 - 30 ) ) & 0x03ffffff ;
	out[109] |= ( in[89] << ( 32 - 30 ) ) & 0x03ffffff ;
	out[110] |= ( in[90] << ( 32 - 30 ) ) & 0x03ffffff ;
	out[111] |= ( in[91] << ( 32 - 30 ) ) & 0x03ffffff ;

	out[112] = ( in[88] >> 24 ) ;
	out[113] = ( in[89] >> 24 ) ;
	out[114] = ( in[90] >> 24 ) ;
	out[115] = ( in[91] >> 24 ) ;

	out[112] |= ( in[92] << ( 32 - 24 ) ) & 0x03ffffff ;
	out[113] |= ( in[93] << ( 32 - 24 ) ) & 0x03ffffff ;
	out[114] |= ( in[94] << ( 32 - 24 ) ) & 0x03ffffff ;
	out[115] |= ( in[95] << ( 32 - 24 ) ) & 0x03ffffff ;

	out[116] = ( in[92] >> 18 ) ;
	out[117] = ( in[93] >> 18 ) ;
	out[118] = ( in[94] >> 18 ) ;
	out[119] = ( in[95] >> 18 ) ;

	out[116] |= ( in[96] << ( 32 - 18 ) ) & 0x03ffffff ;
	out[117] |= ( in[97] << ( 32 - 18 ) ) & 0x03ffffff ;
	out[118] |= ( in[98] << ( 32 - 18 ) ) & 0x03ffffff ;
	out[119] |= ( in[99] << ( 32 - 18 ) ) & 0x03ffffff ;

	out[120] = ( in[96] >> 12 ) ;
	out[121] = ( in[97] >> 12 ) ;
	out[122] = ( in[98] >> 12 ) ;
	out[123] = ( in[99] >> 12 ) ;

	out[120] |= ( in[100] << ( 32 - 12 ) ) & 0x03ffffff ;
	out[121] |= ( in[101] << ( 32 - 12 ) ) & 0x03ffffff ;
	out[122] |= ( in[102] << ( 32 - 12 ) ) & 0x03ffffff ;
	out[123] |= ( in[103] << ( 32 - 12 ) ) & 0x03ffffff ;

	out[124] = ( in[100] >> 6 ) ;
	out[125] = ( in[101] >> 6 ) ;
	out[126] = ( in[102] >> 6 ) ;
	out[127] = ( in[103] >> 6 ) ;
}


// 27-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c27(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x07ffffff ;
	out[1] = ( in[1] >> 0 ) & 0x07ffffff ;
	out[2] = ( in[2] >> 0 ) & 0x07ffffff ;
	out[3] = ( in[3] >> 0 ) & 0x07ffffff ;

	out[4] = ( in[0] >> 27 ) ;
	out[5] = ( in[1] >> 27 ) ;
	out[6] = ( in[2] >> 27 ) ;
	out[7] = ( in[3] >> 27 ) ;

	out[4] |= ( in[4] << ( 32 - 27 ) ) & 0x07ffffff ;
	out[5] |= ( in[5] << ( 32 - 27 ) ) & 0x07ffffff ;
	out[6] |= ( in[6] << ( 32 - 27 ) ) & 0x07ffffff ;
	out[7] |= ( in[7] << ( 32 - 27 ) ) & 0x07ffffff ;

	out[8] = ( in[4] >> 22 ) ;
	out[9] = ( in[5] >> 22 ) ;
	out[10] = ( in[6] >> 22 ) ;
	out[11] = ( in[7] >> 22 ) ;

	out[8] |= ( in[8] << ( 32 - 22 ) ) & 0x07ffffff ;
	out[9] |= ( in[9] << ( 32 - 22 ) ) & 0x07ffffff ;
	out[10] |= ( in[10] << ( 32 - 22 ) ) & 0x07ffffff ;
	out[11] |= ( in[11] << ( 32 - 22 ) ) & 0x07ffffff ;

	out[12] = ( in[8] >> 17 ) ;
	out[13] = ( in[9] >> 17 ) ;
	out[14] = ( in[10] >> 17 ) ;
	out[15] = ( in[11] >> 17 ) ;

	out[12] |= ( in[12] << ( 32 - 17 ) ) & 0x07ffffff ;
	out[13] |= ( in[13] << ( 32 - 17 ) ) & 0x07ffffff ;
	out[14] |= ( in[14] << ( 32 - 17 ) ) & 0x07ffffff ;
	out[15] |= ( in[15] << ( 32 - 17 ) ) & 0x07ffffff ;

	out[16] = ( in[12] >> 12 ) ;
	out[17] = ( in[13] >> 12 ) ;
	out[18] = ( in[14] >> 12 ) ;
	out[19] = ( in[15] >> 12 ) ;

	out[16] |= ( in[16] << ( 32 - 12 ) ) & 0x07ffffff ;
	out[17] |= ( in[17] << ( 32 - 12 ) ) & 0x07ffffff ;
	out[18] |= ( in[18] << ( 32 - 12 ) ) & 0x07ffffff ;
	out[19] |= ( in[19] << ( 32 - 12 ) ) & 0x07ffffff ;

	out[20] = ( in[16] >> 7 ) ;
	out[21] = ( in[17] >> 7 ) ;
	out[22] = ( in[18] >> 7 ) ;
	out[23] = ( in[19] >> 7 ) ;

	out[20] |= ( in[20] << ( 32 - 7 ) ) & 0x07ffffff ;
	out[21] |= ( in[21] << ( 32 - 7 ) ) & 0x07ffffff ;
	out[22] |= ( in[22] << ( 32 - 7 ) ) & 0x07ffffff ;
	out[23] |= ( in[23] << ( 32 - 7 ) ) & 0x07ffffff ;

	out[24] = ( in[20] >> 2 ) & 0x07ffffff ;
	out[25] = ( in[21] >> 2 ) & 0x07ffffff ;
	out[26] = ( in[22] >> 2 ) & 0x07ffffff ;
	out[27] = ( in[23] >> 2 ) & 0x07ffffff ;

	out[28] = ( in[20] >> 29 ) ;
	out[29] = ( in[21] >> 29 ) ;
	out[30] = ( in[22] >> 29 ) ;
	out[31] = ( in[23] >> 29 ) ;

	out[28] |= ( in[24] << ( 32 - 29 ) ) & 0x07ffffff ;
	out[29] |= ( in[25] << ( 32 - 29 ) ) & 0x07ffffff ;
	out[30] |= ( in[26] << ( 32 - 29 ) ) & 0x07ffffff ;
	out[31] |= ( in[27] << ( 32 - 29 ) ) & 0x07ffffff ;

	out[32] = ( in[24] >> 24 ) ;
	out[33] = ( in[25] >> 24 ) ;
	out[34] = ( in[26] >> 24 ) ;
	out[35] = ( in[27] >> 24 ) ;

	out[32] |= ( in[28] << ( 32 - 24 ) ) & 0x07ffffff ;
	out[33] |= ( in[29] << ( 32 - 24 ) ) & 0x07ffffff ;
	out[34] |= ( in[30] << ( 32 - 24 ) ) & 0x07ffffff ;
	out[35] |= ( in[31] << ( 32 - 24 ) ) & 0x07ffffff ;

	out[36] = ( in[28] >> 19 ) ;
	out[37] = ( in[29] >> 19 ) ;
	out[38] = ( in[30] >> 19 ) ;
	out[39] = ( in[31] >> 19 ) ;

	out[36] |= ( in[32] << ( 32 - 19 ) ) & 0x07ffffff ;
	out[37] |= ( in[33] << ( 32 - 19 ) ) & 0x07ffffff ;
	out[38] |= ( in[34] << ( 32 - 19 ) ) & 0x07ffffff ;
	out[39] |= ( in[35] << ( 32 - 19 ) ) & 0x07ffffff ;

	out[40] = ( in[32] >> 14 ) ;
	out[41] = ( in[33] >> 14 ) ;
	out[42] = ( in[34] >> 14 ) ;
	out[43] = ( in[35] >> 14 ) ;

	out[40] |= ( in[36] << ( 32 - 14 ) ) & 0x07ffffff ;
	out[41] |= ( in[37] << ( 32 - 14 ) ) & 0x07ffffff ;
	out[42] |= ( in[38] << ( 32 - 14 ) ) & 0x07ffffff ;
	out[43] |= ( in[39] << ( 32 - 14 ) ) & 0x07ffffff ;

	out[44] = ( in[36] >> 9 ) ;
	out[45] = ( in[37] >> 9 ) ;
	out[46] = ( in[38] >> 9 ) ;
	out[47] = ( in[39] >> 9 ) ;

	out[44] |= ( in[40] << ( 32 - 9 ) ) & 0x07ffffff ;
	out[45] |= ( in[41] << ( 32 - 9 ) ) & 0x07ffffff ;
	out[46] |= ( in[42] << ( 32 - 9 ) ) & 0x07ffffff ;
	out[47] |= ( in[43] << ( 32 - 9 ) ) & 0x07ffffff ;

	out[48] = ( in[40] >> 4 ) & 0x07ffffff ;
	out[49] = ( in[41] >> 4 ) & 0x07ffffff ;
	out[50] = ( in[42] >> 4 ) & 0x07ffffff ;
	out[51] = ( in[43] >> 4 ) & 0x07ffffff ;

	out[52] = ( in[40] >> 31 ) ;
	out[53] = ( in[41] >> 31 ) ;
	out[54] = ( in[42] >> 31 ) ;
	out[55] = ( in[43] >> 31 ) ;

	out[52] |= ( in[44] << ( 32 - 31 ) ) & 0x07ffffff ;
	out[53] |= ( in[45] << ( 32 - 31 ) ) & 0x07ffffff ;
	out[54] |= ( in[46] << ( 32 - 31 ) ) & 0x07ffffff ;
	out[55] |= ( in[47] << ( 32 - 31 ) ) & 0x07ffffff ;

	out[56] = ( in[44] >> 26 ) ;
	out[57] = ( in[45] >> 26 ) ;
	out[58] = ( in[46] >> 26 ) ;
	out[59] = ( in[47] >> 26 ) ;

	out[56] |= ( in[48] << ( 32 - 26 ) ) & 0x07ffffff ;
	out[57] |= ( in[49] << ( 32 - 26 ) ) & 0x07ffffff ;
	out[58] |= ( in[50] << ( 32 - 26 ) ) & 0x07ffffff ;
	out[59] |= ( in[51] << ( 32 - 26 ) ) & 0x07ffffff ;

	out[60] = ( in[48] >> 21 ) ;
	out[61] = ( in[49] >> 21 ) ;
	out[62] = ( in[50] >> 21 ) ;
	out[63] = ( in[51] >> 21 ) ;

	out[60] |= ( in[52] << ( 32 - 21 ) ) & 0x07ffffff ;
	out[61] |= ( in[53] << ( 32 - 21 ) ) & 0x07ffffff ;
	out[62] |= ( in[54] << ( 32 - 21 ) ) & 0x07ffffff ;
	out[63] |= ( in[55] << ( 32 - 21 ) ) & 0x07ffffff ;

	out[64] = ( in[52] >> 16 ) ;
	out[65] = ( in[53] >> 16 ) ;
	out[66] = ( in[54] >> 16 ) ;
	out[67] = ( in[55] >> 16 ) ;

	out[64] |= ( in[56] << ( 32 - 16 ) ) & 0x07ffffff ;
	out[65] |= ( in[57] << ( 32 - 16 ) ) & 0x07ffffff ;
	out[66] |= ( in[58] << ( 32 - 16 ) ) & 0x07ffffff ;
	out[67] |= ( in[59] << ( 32 - 16 ) ) & 0x07ffffff ;

	out[68] = ( in[56] >> 11 ) ;
	out[69] = ( in[57] >> 11 ) ;
	out[70] = ( in[58] >> 11 ) ;
	out[71] = ( in[59] >> 11 ) ;

	out[68] |= ( in[60] << ( 32 - 11 ) ) & 0x07ffffff ;
	out[69] |= ( in[61] << ( 32 - 11 ) ) & 0x07ffffff ;
	out[70] |= ( in[62] << ( 32 - 11 ) ) & 0x07ffffff ;
	out[71] |= ( in[63] << ( 32 - 11 ) ) & 0x07ffffff ;

	out[72] = ( in[60] >> 6 ) ;
	out[73] = ( in[61] >> 6 ) ;
	out[74] = ( in[62] >> 6 ) ;
	out[75] = ( in[63] >> 6 ) ;

	out[72] |= ( in[64] << ( 32 - 6 ) ) & 0x07ffffff ;
	out[73] |= ( in[65] << ( 32 - 6 ) ) & 0x07ffffff ;
	out[74] |= ( in[66] << ( 32 - 6 ) ) & 0x07ffffff ;
	out[75] |= ( in[67] << ( 32 - 6 ) ) & 0x07ffffff ;

	out[76] = ( in[64] >> 1 ) & 0x07ffffff ;
	out[77] = ( in[65] >> 1 ) & 0x07ffffff ;
	out[78] = ( in[66] >> 1 ) & 0x07ffffff ;
	out[79] = ( in[67] >> 1 ) & 0x07ffffff ;

	out[80] = ( in[64] >> 28 ) ;
	out[81] = ( in[65] >> 28 ) ;
	out[82] = ( in[66] >> 28 ) ;
	out[83] = ( in[67] >> 28 ) ;

	out[80] |= ( in[68] << ( 32 - 28 ) ) & 0x07ffffff ;
	out[81] |= ( in[69] << ( 32 - 28 ) ) & 0x07ffffff ;
	out[82] |= ( in[70] << ( 32 - 28 ) ) & 0x07ffffff ;
	out[83] |= ( in[71] << ( 32 - 28 ) ) & 0x07ffffff ;

	out[84] = ( in[68] >> 23 ) ;
	out[85] = ( in[69] >> 23 ) ;
	out[86] = ( in[70] >> 23 ) ;
	out[87] = ( in[71] >> 23 ) ;

	out[84] |= ( in[72] << ( 32 - 23 ) ) & 0x07ffffff ;
	out[85] |= ( in[73] << ( 32 - 23 ) ) & 0x07ffffff ;
	out[86] |= ( in[74] << ( 32 - 23 ) ) & 0x07ffffff ;
	out[87] |= ( in[75] << ( 32 - 23 ) ) & 0x07ffffff ;

	out[88] = ( in[72] >> 18 ) ;
	out[89] = ( in[73] >> 18 ) ;
	out[90] = ( in[74] >> 18 ) ;
	out[91] = ( in[75] >> 18 ) ;

	out[88] |= ( in[76] << ( 32 - 18 ) ) & 0x07ffffff ;
	out[89] |= ( in[77] << ( 32 - 18 ) ) & 0x07ffffff ;
	out[90] |= ( in[78] << ( 32 - 18 ) ) & 0x07ffffff ;
	out[91] |= ( in[79] << ( 32 - 18 ) ) & 0x07ffffff ;

	out[92] = ( in[76] >> 13 ) ;
	out[93] = ( in[77] >> 13 ) ;
	out[94] = ( in[78] >> 13 ) ;
	out[95] = ( in[79] >> 13 ) ;

	out[92] |= ( in[80] << ( 32 - 13 ) ) & 0x07ffffff ;
	out[93] |= ( in[81] << ( 32 - 13 ) ) & 0x07ffffff ;
	out[94] |= ( in[82] << ( 32 - 13 ) ) & 0x07ffffff ;
	out[95] |= ( in[83] << ( 32 - 13 ) ) & 0x07ffffff ;

	out[96] = ( in[80] >> 8 ) ;
	out[97] = ( in[81] >> 8 ) ;
	out[98] = ( in[82] >> 8 ) ;
	out[99] = ( in[83] >> 8 ) ;

	out[96] |= ( in[84] << ( 32 - 8 ) ) & 0x07ffffff ;
	out[97] |= ( in[85] << ( 32 - 8 ) ) & 0x07ffffff ;
	out[98] |= ( in[86] << ( 32 - 8 ) ) & 0x07ffffff ;
	out[99] |= ( in[87] << ( 32 - 8 ) ) & 0x07ffffff ;

	out[100] = ( in[84] >> 3 ) & 0x07ffffff ;
	out[101] = ( in[85] >> 3 ) & 0x07ffffff ;
	out[102] = ( in[86] >> 3 ) & 0x07ffffff ;
	out[103] = ( in[87] >> 3 ) & 0x07ffffff ;

	out[104] = ( in[84] >> 30 ) ;
	out[105] = ( in[85] >> 30 ) ;
	out[106] = ( in[86] >> 30 ) ;
	out[107] = ( in[87] >> 30 ) ;

	out[104] |= ( in[88] << ( 32 - 30 ) ) & 0x07ffffff ;
	out[105] |= ( in[89] << ( 32 - 30 ) ) & 0x07ffffff ;
	out[106] |= ( in[90] << ( 32 - 30 ) ) & 0x07ffffff ;
	out[107] |= ( in[91] << ( 32 - 30 ) ) & 0x07ffffff ;

	out[108] = ( in[88] >> 25 ) ;
	out[109] = ( in[89] >> 25 ) ;
	out[110] = ( in[90] >> 25 ) ;
	out[111] = ( in[91] >> 25 ) ;

	out[108] |= ( in[92] << ( 32 - 25 ) ) & 0x07ffffff ;
	out[109] |= ( in[93] << ( 32 - 25 ) ) & 0x07ffffff ;
	out[110] |= ( in[94] << ( 32 - 25 ) ) & 0x07ffffff ;
	out[111] |= ( in[95] << ( 32 - 25 ) ) & 0x07ffffff ;

	out[112] = ( in[92] >> 20 ) ;
	out[113] = ( in[93] >> 20 ) ;
	out[114] = ( in[94] >> 20 ) ;
	out[115] = ( in[95] >> 20 ) ;

	out[112] |= ( in[96] << ( 32 - 20 ) ) & 0x07ffffff ;
	out[113] |= ( in[97] << ( 32 - 20 ) ) & 0x07ffffff ;
	out[114] |= ( in[98] << ( 32 - 20 ) ) & 0x07ffffff ;
	out[115] |= ( in[99] << ( 32 - 20 ) ) & 0x07ffffff ;

	out[116] = ( in[96] >> 15 ) ;
	out[117] = ( in[97] >> 15 ) ;
	out[118] = ( in[98] >> 15 ) ;
	out[119] = ( in[99] >> 15 ) ;

	out[116] |= ( in[100] << ( 32 - 15 ) ) & 0x07ffffff ;
	out[117] |= ( in[101] << ( 32 - 15 ) ) & 0x07ffffff ;
	out[118] |= ( in[102] << ( 32 - 15 ) ) & 0x07ffffff ;
	out[119] |= ( in[103] << ( 32 - 15 ) ) & 0x07ffffff ;

	out[120] = ( in[100] >> 10 ) ;
	out[121] = ( in[101] >> 10 ) ;
	out[122] = ( in[102] >> 10 ) ;
	out[123] = ( in[103] >> 10 ) ;

	out[120] |= ( in[104] << ( 32 - 10 ) ) & 0x07ffffff ;
	out[121] |= ( in[105] << ( 32 - 10 ) ) & 0x07ffffff ;
	out[122] |= ( in[106] << ( 32 - 10 ) ) & 0x07ffffff ;
	out[123] |= ( in[107] << ( 32 - 10 ) ) & 0x07ffffff ;

	out[124] = ( in[104] >> 5 ) ;
	out[125] = ( in[105] >> 5 ) ;
	out[126] = ( in[106] >> 5 ) ;
	out[127] = ( in[107] >> 5 ) ;
}


// 28-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c28(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x0fffffff ;
	out[1] = ( in[1] >> 0 ) & 0x0fffffff ;
	out[2] = ( in[2] >> 0 ) & 0x0fffffff ;
	out[3] = ( in[3] >> 0 ) & 0x0fffffff ;

	out[4] = ( in[0] >> 28 ) ;
	out[5] = ( in[1] >> 28 ) ;
	out[6] = ( in[2] >> 28 ) ;
	out[7] = ( in[3] >> 28 ) ;

	out[4] |= ( in[4] << ( 32 - 28 ) ) & 0x0fffffff ;
	out[5] |= ( in[5] << ( 32 - 28 ) ) & 0x0fffffff ;
	out[6] |= ( in[6] << ( 32 - 28 ) ) & 0x0fffffff ;
	out[7] |= ( in[7] << ( 32 - 28 ) ) & 0x0fffffff ;

	out[8] = ( in[4] >> 24 ) ;
	out[9] = ( in[5] >> 24 ) ;
	out[10] = ( in[6] >> 24 ) ;
	out[11] = ( in[7] >> 24 ) ;

	out[8] |= ( in[8] << ( 32 - 24 ) ) & 0x0fffffff ;
	out[9] |= ( in[9] << ( 32 - 24 ) ) & 0x0fffffff ;
	out[10] |= ( in[10] << ( 32 - 24 ) ) & 0x0fffffff ;
	out[11] |= ( in[11] << ( 32 - 24 ) ) & 0x0fffffff ;

	out[12] = ( in[8] >> 20 ) ;
	out[13] = ( in[9] >> 20 ) ;
	out[14] = ( in[10] >> 20 ) ;
	out[15] = ( in[11] >> 20 ) ;

	out[12] |= ( in[12] << ( 32 - 20 ) ) & 0x0fffffff ;
	out[13] |= ( in[13] << ( 32 - 20 ) ) & 0x0fffffff ;
	out[14] |= ( in[14] << ( 32 - 20 ) ) & 0x0fffffff ;
	out[15] |= ( in[15] << ( 32 - 20 ) ) & 0x0fffffff ;

	out[16] = ( in[12] >> 16 ) ;
	out[17] = ( in[13] >> 16 ) ;
	out[18] = ( in[14] >> 16 ) ;
	out[19] = ( in[15] >> 16 ) ;

	out[16] |= ( in[16] << ( 32 - 16 ) ) & 0x0fffffff ;
	out[17] |= ( in[17] << ( 32 - 16 ) ) & 0x0fffffff ;
	out[18] |= ( in[18] << ( 32 - 16 ) ) & 0x0fffffff ;
	out[19] |= ( in[19] << ( 32 - 16 ) ) & 0x0fffffff ;

	out[20] = ( in[16] >> 12 ) ;
	out[21] = ( in[17] >> 12 ) ;
	out[22] = ( in[18] >> 12 ) ;
	out[23] = ( in[19] >> 12 ) ;

	out[20] |= ( in[20] << ( 32 - 12 ) ) & 0x0fffffff ;
	out[21] |= ( in[21] << ( 32 - 12 ) ) & 0x0fffffff ;
	out[22] |= ( in[22] << ( 32 - 12 ) ) & 0x0fffffff ;
	out[23] |= ( in[23] << ( 32 - 12 ) ) & 0x0fffffff ;

	out[24] = ( in[20] >> 8 ) ;
	out[25] = ( in[21] >> 8 ) ;
	out[26] = ( in[22] >> 8 ) ;
	out[27] = ( in[23] >> 8 ) ;

	out[24] |= ( in[24] << ( 32 - 8 ) ) & 0x0fffffff ;
	out[25] |= ( in[25] << ( 32 - 8 ) ) & 0x0fffffff ;
	out[26] |= ( in[26] << ( 32 - 8 ) ) & 0x0fffffff ;
	out[27] |= ( in[27] << ( 32 - 8 ) ) & 0x0fffffff ;

	out[28] = ( in[24] >> 4 ) ;
	out[29] = ( in[25] >> 4 ) ;
	out[30] = ( in[26] >> 4 ) ;
	out[31] = ( in[27] >> 4 ) ;

	out[32] = ( in[28] >> 0 ) & 0x0fffffff ;
	out[33] = ( in[29] >> 0 ) & 0x0fffffff ;
	out[34] = ( in[30] >> 0 ) & 0x0fffffff ;
	out[35] = ( in[31] >> 0 ) & 0x0fffffff ;

	out[36] = ( in[28] >> 28 ) ;
	out[37] = ( in[29] >> 28 ) ;
	out[38] = ( in[30] >> 28 ) ;
	out[39] = ( in[31] >> 28 ) ;

	out[36] |= ( in[32] << ( 32 - 28 ) ) & 0x0fffffff ;
	out[37] |= ( in[33] << ( 32 - 28 ) ) & 0x0fffffff ;
	out[38] |= ( in[34] << ( 32 - 28 ) ) & 0x0fffffff ;
	out[39] |= ( in[35] << ( 32 - 28 ) ) & 0x0fffffff ;

	out[40] = ( in[32] >> 24 ) ;
	out[41] = ( in[33] >> 24 ) ;
	out[42] = ( in[34] >> 24 ) ;
	out[43] = ( in[35] >> 24 ) ;

	out[40] |= ( in[36] << ( 32 - 24 ) ) & 0x0fffffff ;
	out[41] |= ( in[37] << ( 32 - 24 ) ) & 0x0fffffff ;
	out[42] |= ( in[38] << ( 32 - 24 ) ) & 0x0fffffff ;
	out[43] |= ( in[39] << ( 32 - 24 ) ) & 0x0fffffff ;

	out[44] = ( in[36] >> 20 ) ;
	out[45] = ( in[37] >> 20 ) ;
	out[46] = ( in[38] >> 20 ) ;
	out[47] = ( in[39] >> 20 ) ;

	out[44] |= ( in[40] << ( 32 - 20 ) ) & 0x0fffffff ;
	out[45] |= ( in[41] << ( 32 - 20 ) ) & 0x0fffffff ;
	out[46] |= ( in[42] << ( 32 - 20 ) ) & 0x0fffffff ;
	out[47] |= ( in[43] << ( 32 - 20 ) ) & 0x0fffffff ;

	out[48] = ( in[40] >> 16 ) ;
	out[49] = ( in[41] >> 16 ) ;
	out[50] = ( in[42] >> 16 ) ;
	out[51] = ( in[43] >> 16 ) ;

	out[48] |= ( in[44] << ( 32 - 16 ) ) & 0x0fffffff ;
	out[49] |= ( in[45] << ( 32 - 16 ) ) & 0x0fffffff ;
	out[50] |= ( in[46] << ( 32 - 16 ) ) & 0x0fffffff ;
	out[51] |= ( in[47] << ( 32 - 16 ) ) & 0x0fffffff ;

	out[52] = ( in[44] >> 12 ) ;
	out[53] = ( in[45] >> 12 ) ;
	out[54] = ( in[46] >> 12 ) ;
	out[55] = ( in[47] >> 12 ) ;

	out[52] |= ( in[48] << ( 32 - 12 ) ) & 0x0fffffff ;
	out[53] |= ( in[49] << ( 32 - 12 ) ) & 0x0fffffff ;
	out[54] |= ( in[50] << ( 32 - 12 ) ) & 0x0fffffff ;
	out[55] |= ( in[51] << ( 32 - 12 ) ) & 0x0fffffff ;

	out[56] = ( in[48] >> 8 ) ;
	out[57] = ( in[49] >> 8 ) ;
	out[58] = ( in[50] >> 8 ) ;
	out[59] = ( in[51] >> 8 ) ;

	out[56] |= ( in[52] << ( 32 - 8 ) ) & 0x0fffffff ;
	out[57] |= ( in[53] << ( 32 - 8 ) ) & 0x0fffffff ;
	out[58] |= ( in[54] << ( 32 - 8 ) ) & 0x0fffffff ;
	out[59] |= ( in[55] << ( 32 - 8 ) ) & 0x0fffffff ;

	out[60] = ( in[52] >> 4 ) ;
	out[61] = ( in[53] >> 4 ) ;
	out[62] = ( in[54] >> 4 ) ;
	out[63] = ( in[55] >> 4 ) ;

	out[64] = ( in[56] >> 0 ) & 0x0fffffff ;
	out[65] = ( in[57] >> 0 ) & 0x0fffffff ;
	out[66] = ( in[58] >> 0 ) & 0x0fffffff ;
	out[67] = ( in[59] >> 0 ) & 0x0fffffff ;

	out[68] = ( in[56] >> 28 ) ;
	out[69] = ( in[57] >> 28 ) ;
	out[70] = ( in[58] >> 28 ) ;
	out[71] = ( in[59] >> 28 ) ;

	out[68] |= ( in[60] << ( 32 - 28 ) ) & 0x0fffffff ;
	out[69] |= ( in[61] << ( 32 - 28 ) ) & 0x0fffffff ;
	out[70] |= ( in[62] << ( 32 - 28 ) ) & 0x0fffffff ;
	out[71] |= ( in[63] << ( 32 - 28 ) ) & 0x0fffffff ;

	out[72] = ( in[60] >> 24 ) ;
	out[73] = ( in[61] >> 24 ) ;
	out[74] = ( in[62] >> 24 ) ;
	out[75] = ( in[63] >> 24 ) ;

	out[72] |= ( in[64] << ( 32 - 24 ) ) & 0x0fffffff ;
	out[73] |= ( in[65] << ( 32 - 24 ) ) & 0x0fffffff ;
	out[74] |= ( in[66] << ( 32 - 24 ) ) & 0x0fffffff ;
	out[75] |= ( in[67] << ( 32 - 24 ) ) & 0x0fffffff ;

	out[76] = ( in[64] >> 20 ) ;
	out[77] = ( in[65] >> 20 ) ;
	out[78] = ( in[66] >> 20 ) ;
	out[79] = ( in[67] >> 20 ) ;

	out[76] |= ( in[68] << ( 32 - 20 ) ) & 0x0fffffff ;
	out[77] |= ( in[69] << ( 32 - 20 ) ) & 0x0fffffff ;
	out[78] |= ( in[70] << ( 32 - 20 ) ) & 0x0fffffff ;
	out[79] |= ( in[71] << ( 32 - 20 ) ) & 0x0fffffff ;

	out[80] = ( in[68] >> 16 ) ;
	out[81] = ( in[69] >> 16 ) ;
	out[82] = ( in[70] >> 16 ) ;
	out[83] = ( in[71] >> 16 ) ;

	out[80] |= ( in[72] << ( 32 - 16 ) ) & 0x0fffffff ;
	out[81] |= ( in[73] << ( 32 - 16 ) ) & 0x0fffffff ;
	out[82] |= ( in[74] << ( 32 - 16 ) ) & 0x0fffffff ;
	out[83] |= ( in[75] << ( 32 - 16 ) ) & 0x0fffffff ;

	out[84] = ( in[72] >> 12 ) ;
	out[85] = ( in[73] >> 12 ) ;
	out[86] = ( in[74] >> 12 ) ;
	out[87] = ( in[75] >> 12 ) ;

	out[84] |= ( in[76] << ( 32 - 12 ) ) & 0x0fffffff ;
	out[85] |= ( in[77] << ( 32 - 12 ) ) & 0x0fffffff ;
	out[86] |= ( in[78] << ( 32 - 12 ) ) & 0x0fffffff ;
	out[87] |= ( in[79] << ( 32 - 12 ) ) & 0x0fffffff ;

	out[88] = ( in[76] >> 8 ) ;
	out[89] = ( in[77] >> 8 ) ;
	out[90] = ( in[78] >> 8 ) ;
	out[91] = ( in[79] >> 8 ) ;

	out[88] |= ( in[80] << ( 32 - 8 ) ) & 0x0fffffff ;
	out[89] |= ( in[81] << ( 32 - 8 ) ) & 0x0fffffff ;
	out[90] |= ( in[82] << ( 32 - 8 ) ) & 0x0fffffff ;
	out[91] |= ( in[83] << ( 32 - 8 ) ) & 0x0fffffff ;

	out[92] = ( in[80] >> 4 ) ;
	out[93] = ( in[81] >> 4 ) ;
	out[94] = ( in[82] >> 4 ) ;
	out[95] = ( in[83] >> 4 ) ;

	out[96] = ( in[84] >> 0 ) & 0x0fffffff ;
	out[97] = ( in[85] >> 0 ) & 0x0fffffff ;
	out[98] = ( in[86] >> 0 ) & 0x0fffffff ;
	out[99] = ( in[87] >> 0 ) & 0x0fffffff ;

	out[100] = ( in[84] >> 28 ) ;
	out[101] = ( in[85] >> 28 ) ;
	out[102] = ( in[86] >> 28 ) ;
	out[103] = ( in[87] >> 28 ) ;

	out[100] |= ( in[88] << ( 32 - 28 ) ) & 0x0fffffff ;
	out[101] |= ( in[89] << ( 32 - 28 ) ) & 0x0fffffff ;
	out[102] |= ( in[90] << ( 32 - 28 ) ) & 0x0fffffff ;
	out[103] |= ( in[91] << ( 32 - 28 ) ) & 0x0fffffff ;

	out[104] = ( in[88] >> 24 ) ;
	out[105] = ( in[89] >> 24 ) ;
	out[106] = ( in[90] >> 24 ) ;
	out[107] = ( in[91] >> 24 ) ;

	out[104] |= ( in[92] << ( 32 - 24 ) ) & 0x0fffffff ;
	out[105] |= ( in[93] << ( 32 - 24 ) ) & 0x0fffffff ;
	out[106] |= ( in[94] << ( 32 - 24 ) ) & 0x0fffffff ;
	out[107] |= ( in[95] << ( 32 - 24 ) ) & 0x0fffffff ;

	out[108] = ( in[92] >> 20 ) ;
	out[109] = ( in[93] >> 20 ) ;
	out[110] = ( in[94] >> 20 ) ;
	out[111] = ( in[95] >> 20 ) ;

	out[108] |= ( in[96] << ( 32 - 20 ) ) & 0x0fffffff ;
	out[109] |= ( in[97] << ( 32 - 20 ) ) & 0x0fffffff ;
	out[110] |= ( in[98] << ( 32 - 20 ) ) & 0x0fffffff ;
	out[111] |= ( in[99] << ( 32 - 20 ) ) & 0x0fffffff ;

	out[112] = ( in[96] >> 16 ) ;
	out[113] = ( in[97] >> 16 ) ;
	out[114] = ( in[98] >> 16 ) ;
	out[115] = ( in[99] >> 16 ) ;

	out[112] |= ( in[100] << ( 32 - 16 ) ) & 0x0fffffff ;
	out[113] |= ( in[101] << ( 32 - 16 ) ) & 0x0fffffff ;
	out[114] |= ( in[102] << ( 32 - 16 ) ) & 0x0fffffff ;
	out[115] |= ( in[103] << ( 32 - 16 ) ) & 0x0fffffff ;

	out[116] = ( in[100] >> 12 ) ;
	out[117] = ( in[101] >> 12 ) ;
	out[118] = ( in[102] >> 12 ) ;
	out[119] = ( in[103] >> 12 ) ;

	out[116] |= ( in[104] << ( 32 - 12 ) ) & 0x0fffffff ;
	out[117] |= ( in[105] << ( 32 - 12 ) ) & 0x0fffffff ;
	out[118] |= ( in[106] << ( 32 - 12 ) ) & 0x0fffffff ;
	out[119] |= ( in[107] << ( 32 - 12 ) ) & 0x0fffffff ;

	out[120] = ( in[104] >> 8 ) ;
	out[121] = ( in[105] >> 8 ) ;
	out[122] = ( in[106] >> 8 ) ;
	out[123] = ( in[107] >> 8 ) ;

	out[120] |= ( in[108] << ( 32 - 8 ) ) & 0x0fffffff ;
	out[121] |= ( in[109] << ( 32 - 8 ) ) & 0x0fffffff ;
	out[122] |= ( in[110] << ( 32 - 8 ) ) & 0x0fffffff ;
	out[123] |= ( in[111] << ( 32 - 8 ) ) & 0x0fffffff ;

	out[124] = ( in[108] >> 4 ) ;
	out[125] = ( in[109] >> 4 ) ;
	out[126] = ( in[110] >> 4 ) ;
	out[127] = ( in[111] >> 4 ) ;
}


// 29-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c29(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x1fffffff ;
	out[1] = ( in[1] >> 0 ) & 0x1fffffff ;
	out[2] = ( in[2] >> 0 ) & 0x1fffffff ;
	out[3] = ( in[3] >> 0 ) & 0x1fffffff ;

	out[4] = ( in[0] >> 29 ) ;
	out[5] = ( in[1] >> 29 ) ;
	out[6] = ( in[2] >> 29 ) ;
	out[7] = ( in[3] >> 29 ) ;

	out[4] |= ( in[4] << ( 32 - 29 ) ) & 0x1fffffff ;
	out[5] |= ( in[5] << ( 32 - 29 ) ) & 0x1fffffff ;
	out[6] |= ( in[6] << ( 32 - 29 ) ) & 0x1fffffff ;
	out[7] |= ( in[7] << ( 32 - 29 ) ) & 0x1fffffff ;

	out[8] = ( in[4] >> 26 ) ;
	out[9] = ( in[5] >> 26 ) ;
	out[10] = ( in[6] >> 26 ) ;
	out[11] = ( in[7] >> 26 ) ;

	out[8] |= ( in[8] << ( 32 - 26 ) ) & 0x1fffffff ;
	out[9] |= ( in[9] << ( 32 - 26 ) ) & 0x1fffffff ;
	out[10] |= ( in[10] << ( 32 - 26 ) ) & 0x1fffffff ;
	out[11] |= ( in[11] << ( 32 - 26 ) ) & 0x1fffffff ;

	out[12] = ( in[8] >> 23 ) ;
	out[13] = ( in[9] >> 23 ) ;
	out[14] = ( in[10] >> 23 ) ;
	out[15] = ( in[11] >> 23 ) ;

	out[12] |= ( in[12] << ( 32 - 23 ) ) & 0x1fffffff ;
	out[13] |= ( in[13] << ( 32 - 23 ) ) & 0x1fffffff ;
	out[14] |= ( in[14] << ( 32 - 23 ) ) & 0x1fffffff ;
	out[15] |= ( in[15] << ( 32 - 23 ) ) & 0x1fffffff ;

	out[16] = ( in[12] >> 20 ) ;
	out[17] = ( in[13] >> 20 ) ;
	out[18] = ( in[14] >> 20 ) ;
	out[19] = ( in[15] >> 20 ) ;

	out[16] |= ( in[16] << ( 32 - 20 ) ) & 0x1fffffff ;
	out[17] |= ( in[17] << ( 32 - 20 ) ) & 0x1fffffff ;
	out[18] |= ( in[18] << ( 32 - 20 ) ) & 0x1fffffff ;
	out[19] |= ( in[19] << ( 32 - 20 ) ) & 0x1fffffff ;

	out[20] = ( in[16] >> 17 ) ;
	out[21] = ( in[17] >> 17 ) ;
	out[22] = ( in[18] >> 17 ) ;
	out[23] = ( in[19] >> 17 ) ;

	out[20] |= ( in[20] << ( 32 - 17 ) ) & 0x1fffffff ;
	out[21] |= ( in[21] << ( 32 - 17 ) ) & 0x1fffffff ;
	out[22] |= ( in[22] << ( 32 - 17 ) ) & 0x1fffffff ;
	out[23] |= ( in[23] << ( 32 - 17 ) ) & 0x1fffffff ;

	out[24] = ( in[20] >> 14 ) ;
	out[25] = ( in[21] >> 14 ) ;
	out[26] = ( in[22] >> 14 ) ;
	out[27] = ( in[23] >> 14 ) ;

	out[24] |= ( in[24] << ( 32 - 14 ) ) & 0x1fffffff ;
	out[25] |= ( in[25] << ( 32 - 14 ) ) & 0x1fffffff ;
	out[26] |= ( in[26] << ( 32 - 14 ) ) & 0x1fffffff ;
	out[27] |= ( in[27] << ( 32 - 14 ) ) & 0x1fffffff ;

	out[28] = ( in[24] >> 11 ) ;
	out[29] = ( in[25] >> 11 ) ;
	out[30] = ( in[26] >> 11 ) ;
	out[31] = ( in[27] >> 11 ) ;

	out[28] |= ( in[28] << ( 32 - 11 ) ) & 0x1fffffff ;
	out[29] |= ( in[29] << ( 32 - 11 ) ) & 0x1fffffff ;
	out[30] |= ( in[30] << ( 32 - 11 ) ) & 0x1fffffff ;
	out[31] |= ( in[31] << ( 32 - 11 ) ) & 0x1fffffff ;

	out[32] = ( in[28] >> 8 ) ;
	out[33] = ( in[29] >> 8 ) ;
	out[34] = ( in[30] >> 8 ) ;
	out[35] = ( in[31] >> 8 ) ;

	out[32] |= ( in[32] << ( 32 - 8 ) ) & 0x1fffffff ;
	out[33] |= ( in[33] << ( 32 - 8 ) ) & 0x1fffffff ;
	out[34] |= ( in[34] << ( 32 - 8 ) ) & 0x1fffffff ;
	out[35] |= ( in[35] << ( 32 - 8 ) ) & 0x1fffffff ;

	out[36] = ( in[32] >> 5 ) ;
	out[37] = ( in[33] >> 5 ) ;
	out[38] = ( in[34] >> 5 ) ;
	out[39] = ( in[35] >> 5 ) ;

	out[36] |= ( in[36] << ( 32 - 5 ) ) & 0x1fffffff ;
	out[37] |= ( in[37] << ( 32 - 5 ) ) & 0x1fffffff ;
	out[38] |= ( in[38] << ( 32 - 5 ) ) & 0x1fffffff ;
	out[39] |= ( in[39] << ( 32 - 5 ) ) & 0x1fffffff ;

	out[40] = ( in[36] >> 2 ) & 0x1fffffff ;
	out[41] = ( in[37] >> 2 ) & 0x1fffffff ;
	out[42] = ( in[38] >> 2 ) & 0x1fffffff ;
	out[43] = ( in[39] >> 2 ) & 0x1fffffff ;

	out[44] = ( in[36] >> 31 ) ;
	out[45] = ( in[37] >> 31 ) ;
	out[46] = ( in[38] >> 31 ) ;
	out[47] = ( in[39] >> 31 ) ;

	out[44] |= ( in[40] << ( 32 - 31 ) ) & 0x1fffffff ;
	out[45] |= ( in[41] << ( 32 - 31 ) ) & 0x1fffffff ;
	out[46] |= ( in[42] << ( 32 - 31 ) ) & 0x1fffffff ;
	out[47] |= ( in[43] << ( 32 - 31 ) ) & 0x1fffffff ;

	out[48] = ( in[40] >> 28 ) ;
	out[49] = ( in[41] >> 28 ) ;
	out[50] = ( in[42] >> 28 ) ;
	out[51] = ( in[43] >> 28 ) ;

	out[48] |= ( in[44] << ( 32 - 28 ) ) & 0x1fffffff ;
	out[49] |= ( in[45] << ( 32 - 28 ) ) & 0x1fffffff ;
	out[50] |= ( in[46] << ( 32 - 28 ) ) & 0x1fffffff ;
	out[51] |= ( in[47] << ( 32 - 28 ) ) & 0x1fffffff ;

	out[52] = ( in[44] >> 25 ) ;
	out[53] = ( in[45] >> 25 ) ;
	out[54] = ( in[46] >> 25 ) ;
	out[55] = ( in[47] >> 25 ) ;

	out[52] |= ( in[48] << ( 32 - 25 ) ) & 0x1fffffff ;
	out[53] |= ( in[49] << ( 32 - 25 ) ) & 0x1fffffff ;
	out[54] |= ( in[50] << ( 32 - 25 ) ) & 0x1fffffff ;
	out[55] |= ( in[51] << ( 32 - 25 ) ) & 0x1fffffff ;

	out[56] = ( in[48] >> 22 ) ;
	out[57] = ( in[49] >> 22 ) ;
	out[58] = ( in[50] >> 22 ) ;
	out[59] = ( in[51] >> 22 ) ;

	out[56] |= ( in[52] << ( 32 - 22 ) ) & 0x1fffffff ;
	out[57] |= ( in[53] << ( 32 - 22 ) ) & 0x1fffffff ;
	out[58] |= ( in[54] << ( 32 - 22 ) ) & 0x1fffffff ;
	out[59] |= ( in[55] << ( 32 - 22 ) ) & 0x1fffffff ;

	out[60] = ( in[52] >> 19 ) ;
	out[61] = ( in[53] >> 19 ) ;
	out[62] = ( in[54] >> 19 ) ;
	out[63] = ( in[55] >> 19 ) ;

	out[60] |= ( in[56] << ( 32 - 19 ) ) & 0x1fffffff ;
	out[61] |= ( in[57] << ( 32 - 19 ) ) & 0x1fffffff ;
	out[62] |= ( in[58] << ( 32 - 19 ) ) & 0x1fffffff ;
	out[63] |= ( in[59] << ( 32 - 19 ) ) & 0x1fffffff ;

	out[64] = ( in[56] >> 16 ) ;
	out[65] = ( in[57] >> 16 ) ;
	out[66] = ( in[58] >> 16 ) ;
	out[67] = ( in[59] >> 16 ) ;

	out[64] |= ( in[60] << ( 32 - 16 ) ) & 0x1fffffff ;
	out[65] |= ( in[61] << ( 32 - 16 ) ) & 0x1fffffff ;
	out[66] |= ( in[62] << ( 32 - 16 ) ) & 0x1fffffff ;
	out[67] |= ( in[63] << ( 32 - 16 ) ) & 0x1fffffff ;

	out[68] = ( in[60] >> 13 ) ;
	out[69] = ( in[61] >> 13 ) ;
	out[70] = ( in[62] >> 13 ) ;
	out[71] = ( in[63] >> 13 ) ;

	out[68] |= ( in[64] << ( 32 - 13 ) ) & 0x1fffffff ;
	out[69] |= ( in[65] << ( 32 - 13 ) ) & 0x1fffffff ;
	out[70] |= ( in[66] << ( 32 - 13 ) ) & 0x1fffffff ;
	out[71] |= ( in[67] << ( 32 - 13 ) ) & 0x1fffffff ;

	out[72] = ( in[64] >> 10 ) ;
	out[73] = ( in[65] >> 10 ) ;
	out[74] = ( in[66] >> 10 ) ;
	out[75] = ( in[67] >> 10 ) ;

	out[72] |= ( in[68] << ( 32 - 10 ) ) & 0x1fffffff ;
	out[73] |= ( in[69] << ( 32 - 10 ) ) & 0x1fffffff ;
	out[74] |= ( in[70] << ( 32 - 10 ) ) & 0x1fffffff ;
	out[75] |= ( in[71] << ( 32 - 10 ) ) & 0x1fffffff ;

	out[76] = ( in[68] >> 7 ) ;
	out[77] = ( in[69] >> 7 ) ;
	out[78] = ( in[70] >> 7 ) ;
	out[79] = ( in[71] >> 7 ) ;

	out[76] |= ( in[72] << ( 32 - 7 ) ) & 0x1fffffff ;
	out[77] |= ( in[73] << ( 32 - 7 ) ) & 0x1fffffff ;
	out[78] |= ( in[74] << ( 32 - 7 ) ) & 0x1fffffff ;
	out[79] |= ( in[75] << ( 32 - 7 ) ) & 0x1fffffff ;

	out[80] = ( in[72] >> 4 ) ;
	out[81] = ( in[73] >> 4 ) ;
	out[82] = ( in[74] >> 4 ) ;
	out[83] = ( in[75] >> 4 ) ;

	out[80] |= ( in[76] << ( 32 - 4 ) ) & 0x1fffffff ;
	out[81] |= ( in[77] << ( 32 - 4 ) ) & 0x1fffffff ;
	out[82] |= ( in[78] << ( 32 - 4 ) ) & 0x1fffffff ;
	out[83] |= ( in[79] << ( 32 - 4 ) ) & 0x1fffffff ;

	out[84] = ( in[76] >> 1 ) & 0x1fffffff ;
	out[85] = ( in[77] >> 1 ) & 0x1fffffff ;
	out[86] = ( in[78] >> 1 ) & 0x1fffffff ;
	out[87] = ( in[79] >> 1 ) & 0x1fffffff ;

	out[88] = ( in[76] >> 30 ) ;
	out[89] = ( in[77] >> 30 ) ;
	out[90] = ( in[78] >> 30 ) ;
	out[91] = ( in[79] >> 30 ) ;

	out[88] |= ( in[80] << ( 32 - 30 ) ) & 0x1fffffff ;
	out[89] |= ( in[81] << ( 32 - 30 ) ) & 0x1fffffff ;
	out[90] |= ( in[82] << ( 32 - 30 ) ) & 0x1fffffff ;
	out[91] |= ( in[83] << ( 32 - 30 ) ) & 0x1fffffff ;

	out[92] = ( in[80] >> 27 ) ;
	out[93] = ( in[81] >> 27 ) ;
	out[94] = ( in[82] >> 27 ) ;
	out[95] = ( in[83] >> 27 ) ;

	out[92] |= ( in[84] << ( 32 - 27 ) ) & 0x1fffffff ;
	out[93] |= ( in[85] << ( 32 - 27 ) ) & 0x1fffffff ;
	out[94] |= ( in[86] << ( 32 - 27 ) ) & 0x1fffffff ;
	out[95] |= ( in[87] << ( 32 - 27 ) ) & 0x1fffffff ;

	out[96] = ( in[84] >> 24 ) ;
	out[97] = ( in[85] >> 24 ) ;
	out[98] = ( in[86] >> 24 ) ;
	out[99] = ( in[87] >> 24 ) ;

	out[96] |= ( in[88] << ( 32 - 24 ) ) & 0x1fffffff ;
	out[97] |= ( in[89] << ( 32 - 24 ) ) & 0x1fffffff ;
	out[98] |= ( in[90] << ( 32 - 24 ) ) & 0x1fffffff ;
	out[99] |= ( in[91] << ( 32 - 24 ) ) & 0x1fffffff ;

	out[100] = ( in[88] >> 21 ) ;
	out[101] = ( in[89] >> 21 ) ;
	out[102] = ( in[90] >> 21 ) ;
	out[103] = ( in[91] >> 21 ) ;

	out[100] |= ( in[92] << ( 32 - 21 ) ) & 0x1fffffff ;
	out[101] |= ( in[93] << ( 32 - 21 ) ) & 0x1fffffff ;
	out[102] |= ( in[94] << ( 32 - 21 ) ) & 0x1fffffff ;
	out[103] |= ( in[95] << ( 32 - 21 ) ) & 0x1fffffff ;

	out[104] = ( in[92] >> 18 ) ;
	out[105] = ( in[93] >> 18 ) ;
	out[106] = ( in[94] >> 18 ) ;
	out[107] = ( in[95] >> 18 ) ;

	out[104] |= ( in[96] << ( 32 - 18 ) ) & 0x1fffffff ;
	out[105] |= ( in[97] << ( 32 - 18 ) ) & 0x1fffffff ;
	out[106] |= ( in[98] << ( 32 - 18 ) ) & 0x1fffffff ;
	out[107] |= ( in[99] << ( 32 - 18 ) ) & 0x1fffffff ;

	out[108] = ( in[96] >> 15 ) ;
	out[109] = ( in[97] >> 15 ) ;
	out[110] = ( in[98] >> 15 ) ;
	out[111] = ( in[99] >> 15 ) ;

	out[108] |= ( in[100] << ( 32 - 15 ) ) & 0x1fffffff ;
	out[109] |= ( in[101] << ( 32 - 15 ) ) & 0x1fffffff ;
	out[110] |= ( in[102] << ( 32 - 15 ) ) & 0x1fffffff ;
	out[111] |= ( in[103] << ( 32 - 15 ) ) & 0x1fffffff ;

	out[112] = ( in[100] >> 12 ) ;
	out[113] = ( in[101] >> 12 ) ;
	out[114] = ( in[102] >> 12 ) ;
	out[115] = ( in[103] >> 12 ) ;

	out[112] |= ( in[104] << ( 32 - 12 ) ) & 0x1fffffff ;
	out[113] |= ( in[105] << ( 32 - 12 ) ) & 0x1fffffff ;
	out[114] |= ( in[106] << ( 32 - 12 ) ) & 0x1fffffff ;
	out[115] |= ( in[107] << ( 32 - 12 ) ) & 0x1fffffff ;

	out[116] = ( in[104] >> 9 ) ;
	out[117] = ( in[105] >> 9 ) ;
	out[118] = ( in[106] >> 9 ) ;
	out[119] = ( in[107] >> 9 ) ;

	out[116] |= ( in[108] << ( 32 - 9 ) ) & 0x1fffffff ;
	out[117] |= ( in[109] << ( 32 - 9 ) ) & 0x1fffffff ;
	out[118] |= ( in[110] << ( 32 - 9 ) ) & 0x1fffffff ;
	out[119] |= ( in[111] << ( 32 - 9 ) ) & 0x1fffffff ;

	out[120] = ( in[108] >> 6 ) ;
	out[121] = ( in[109] >> 6 ) ;
	out[122] = ( in[110] >> 6 ) ;
	out[123] = ( in[111] >> 6 ) ;

	out[120] |= ( in[112] << ( 32 - 6 ) ) & 0x1fffffff ;
	out[121] |= ( in[113] << ( 32 - 6 ) ) & 0x1fffffff ;
	out[122] |= ( in[114] << ( 32 - 6 ) ) & 0x1fffffff ;
	out[123] |= ( in[115] << ( 32 - 6 ) ) & 0x1fffffff ;

	out[124] = ( in[112] >> 3 ) ;
	out[125] = ( in[113] >> 3 ) ;
	out[126] = ( in[114] >> 3 ) ;
	out[127] = ( in[115] >> 3 ) ;
}


// 30-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c30(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x3fffffff ;
	out[1] = ( in[1] >> 0 ) & 0x3fffffff ;
	out[2] = ( in[2] >> 0 ) & 0x3fffffff ;
	out[3] = ( in[3] >> 0 ) & 0x3fffffff ;

	out[4] = ( in[0] >> 30 ) ;
	out[5] = ( in[1] >> 30 ) ;
	out[6] = ( in[2] >> 30 ) ;
	out[7] = ( in[3] >> 30 ) ;

	out[4] |= ( in[4] << ( 32 - 30 ) ) & 0x3fffffff ;
	out[5] |= ( in[5] << ( 32 - 30 ) ) & 0x3fffffff ;
	out[6] |= ( in[6] << ( 32 - 30 ) ) & 0x3fffffff ;
	out[7] |= ( in[7] << ( 32 - 30 ) ) & 0x3fffffff ;

	out[8] = ( in[4] >> 28 ) ;
	out[9] = ( in[5] >> 28 ) ;
	out[10] = ( in[6] >> 28 ) ;
	out[11] = ( in[7] >> 28 ) ;

	out[8] |= ( in[8] << ( 32 - 28 ) ) & 0x3fffffff ;
	out[9] |= ( in[9] << ( 32 - 28 ) ) & 0x3fffffff ;
	out[10] |= ( in[10] << ( 32 - 28 ) ) & 0x3fffffff ;
	out[11] |= ( in[11] << ( 32 - 28 ) ) & 0x3fffffff ;

	out[12] = ( in[8] >> 26 ) ;
	out[13] = ( in[9] >> 26 ) ;
	out[14] = ( in[10] >> 26 ) ;
	out[15] = ( in[11] >> 26 ) ;

	out[12] |= ( in[12] << ( 32 - 26 ) ) & 0x3fffffff ;
	out[13] |= ( in[13] << ( 32 - 26 ) ) & 0x3fffffff ;
	out[14] |= ( in[14] << ( 32 - 26 ) ) & 0x3fffffff ;
	out[15] |= ( in[15] << ( 32 - 26 ) ) & 0x3fffffff ;

	out[16] = ( in[12] >> 24 ) ;
	out[17] = ( in[13] >> 24 ) ;
	out[18] = ( in[14] >> 24 ) ;
	out[19] = ( in[15] >> 24 ) ;

	out[16] |= ( in[16] << ( 32 - 24 ) ) & 0x3fffffff ;
	out[17] |= ( in[17] << ( 32 - 24 ) ) & 0x3fffffff ;
	out[18] |= ( in[18] << ( 32 - 24 ) ) & 0x3fffffff ;
	out[19] |= ( in[19] << ( 32 - 24 ) ) & 0x3fffffff ;

	out[20] = ( in[16] >> 22 ) ;
	out[21] = ( in[17] >> 22 ) ;
	out[22] = ( in[18] >> 22 ) ;
	out[23] = ( in[19] >> 22 ) ;

	out[20] |= ( in[20] << ( 32 - 22 ) ) & 0x3fffffff ;
	out[21] |= ( in[21] << ( 32 - 22 ) ) & 0x3fffffff ;
	out[22] |= ( in[22] << ( 32 - 22 ) ) & 0x3fffffff ;
	out[23] |= ( in[23] << ( 32 - 22 ) ) & 0x3fffffff ;

	out[24] = ( in[20] >> 20 ) ;
	out[25] = ( in[21] >> 20 ) ;
	out[26] = ( in[22] >> 20 ) ;
	out[27] = ( in[23] >> 20 ) ;

	out[24] |= ( in[24] << ( 32 - 20 ) ) & 0x3fffffff ;
	out[25] |= ( in[25] << ( 32 - 20 ) ) & 0x3fffffff ;
	out[26] |= ( in[26] << ( 32 - 20 ) ) & 0x3fffffff ;
	out[27] |= ( in[27] << ( 32 - 20 ) ) & 0x3fffffff ;

	out[28] = ( in[24] >> 18 ) ;
	out[29] = ( in[25] >> 18 ) ;
	out[30] = ( in[26] >> 18 ) ;
	out[31] = ( in[27] >> 18 ) ;

	out[28] |= ( in[28] << ( 32 - 18 ) ) & 0x3fffffff ;
	out[29] |= ( in[29] << ( 32 - 18 ) ) & 0x3fffffff ;
	out[30] |= ( in[30] << ( 32 - 18 ) ) & 0x3fffffff ;
	out[31] |= ( in[31] << ( 32 - 18 ) ) & 0x3fffffff ;

	out[32] = ( in[28] >> 16 ) ;
	out[33] = ( in[29] >> 16 ) ;
	out[34] = ( in[30] >> 16 ) ;
	out[35] = ( in[31] >> 16 ) ;

	out[32] |= ( in[32] << ( 32 - 16 ) ) & 0x3fffffff ;
	out[33] |= ( in[33] << ( 32 - 16 ) ) & 0x3fffffff ;
	out[34] |= ( in[34] << ( 32 - 16 ) ) & 0x3fffffff ;
	out[35] |= ( in[35] << ( 32 - 16 ) ) & 0x3fffffff ;

	out[36] = ( in[32] >> 14 ) ;
	out[37] = ( in[33] >> 14 ) ;
	out[38] = ( in[34] >> 14 ) ;
	out[39] = ( in[35] >> 14 ) ;

	out[36] |= ( in[36] << ( 32 - 14 ) ) & 0x3fffffff ;
	out[37] |= ( in[37] << ( 32 - 14 ) ) & 0x3fffffff ;
	out[38] |= ( in[38] << ( 32 - 14 ) ) & 0x3fffffff ;
	out[39] |= ( in[39] << ( 32 - 14 ) ) & 0x3fffffff ;

	out[40] = ( in[36] >> 12 ) ;
	out[41] = ( in[37] >> 12 ) ;
	out[42] = ( in[38] >> 12 ) ;
	out[43] = ( in[39] >> 12 ) ;

	out[40] |= ( in[40] << ( 32 - 12 ) ) & 0x3fffffff ;
	out[41] |= ( in[41] << ( 32 - 12 ) ) & 0x3fffffff ;
	out[42] |= ( in[42] << ( 32 - 12 ) ) & 0x3fffffff ;
	out[43] |= ( in[43] << ( 32 - 12 ) ) & 0x3fffffff ;

	out[44] = ( in[40] >> 10 ) ;
	out[45] = ( in[41] >> 10 ) ;
	out[46] = ( in[42] >> 10 ) ;
	out[47] = ( in[43] >> 10 ) ;

	out[44] |= ( in[44] << ( 32 - 10 ) ) & 0x3fffffff ;
	out[45] |= ( in[45] << ( 32 - 10 ) ) & 0x3fffffff ;
	out[46] |= ( in[46] << ( 32 - 10 ) ) & 0x3fffffff ;
	out[47] |= ( in[47] << ( 32 - 10 ) ) & 0x3fffffff ;

	out[48] = ( in[44] >> 8 ) ;
	out[49] = ( in[45] >> 8 ) ;
	out[50] = ( in[46] >> 8 ) ;
	out[51] = ( in[47] >> 8 ) ;

	out[48] |= ( in[48] << ( 32 - 8 ) ) & 0x3fffffff ;
	out[49] |= ( in[49] << ( 32 - 8 ) ) & 0x3fffffff ;
	out[50] |= ( in[50] << ( 32 - 8 ) ) & 0x3fffffff ;
	out[51] |= ( in[51] << ( 32 - 8 ) ) & 0x3fffffff ;

	out[52] = ( in[48] >> 6 ) ;
	out[53] = ( in[49] >> 6 ) ;
	out[54] = ( in[50] >> 6 ) ;
	out[55] = ( in[51] >> 6 ) ;

	out[52] |= ( in[52] << ( 32 - 6 ) ) & 0x3fffffff ;
	out[53] |= ( in[53] << ( 32 - 6 ) ) & 0x3fffffff ;
	out[54] |= ( in[54] << ( 32 - 6 ) ) & 0x3fffffff ;
	out[55] |= ( in[55] << ( 32 - 6 ) ) & 0x3fffffff ;

	out[56] = ( in[52] >> 4 ) ;
	out[57] = ( in[53] >> 4 ) ;
	out[58] = ( in[54] >> 4 ) ;
	out[59] = ( in[55] >> 4 ) ;

	out[56] |= ( in[56] << ( 32 - 4 ) ) & 0x3fffffff ;
	out[57] |= ( in[57] << ( 32 - 4 ) ) & 0x3fffffff ;
	out[58] |= ( in[58] << ( 32 - 4 ) ) & 0x3fffffff ;
	out[59] |= ( in[59] << ( 32 - 4 ) ) & 0x3fffffff ;

	out[60] = ( in[56] >> 2 ) ;
	out[61] = ( in[57] >> 2 ) ;
	out[62] = ( in[58] >> 2 ) ;
	out[63] = ( in[59] >> 2 ) ;

	out[64] = ( in[60] >> 0 ) & 0x3fffffff ;
	out[65] = ( in[61] >> 0 ) & 0x3fffffff ;
	out[66] = ( in[62] >> 0 ) & 0x3fffffff ;
	out[67] = ( in[63] >> 0 ) & 0x3fffffff ;

	out[68] = ( in[60] >> 30 ) ;
	out[69] = ( in[61] >> 30 ) ;
	out[70] = ( in[62] >> 30 ) ;
	out[71] = ( in[63] >> 30 ) ;

	out[68] |= ( in[64] << ( 32 - 30 ) ) & 0x3fffffff ;
	out[69] |= ( in[65] << ( 32 - 30 ) ) & 0x3fffffff ;
	out[70] |= ( in[66] << ( 32 - 30 ) ) & 0x3fffffff ;
	out[71] |= ( in[67] << ( 32 - 30 ) ) & 0x3fffffff ;

	out[72] = ( in[64] >> 28 ) ;
	out[73] = ( in[65] >> 28 ) ;
	out[74] = ( in[66] >> 28 ) ;
	out[75] = ( in[67] >> 28 ) ;

	out[72] |= ( in[68] << ( 32 - 28 ) ) & 0x3fffffff ;
	out[73] |= ( in[69] << ( 32 - 28 ) ) & 0x3fffffff ;
	out[74] |= ( in[70] << ( 32 - 28 ) ) & 0x3fffffff ;
	out[75] |= ( in[71] << ( 32 - 28 ) ) & 0x3fffffff ;

	out[76] = ( in[68] >> 26 ) ;
	out[77] = ( in[69] >> 26 ) ;
	out[78] = ( in[70] >> 26 ) ;
	out[79] = ( in[71] >> 26 ) ;

	out[76] |= ( in[72] << ( 32 - 26 ) ) & 0x3fffffff ;
	out[77] |= ( in[73] << ( 32 - 26 ) ) & 0x3fffffff ;
	out[78] |= ( in[74] << ( 32 - 26 ) ) & 0x3fffffff ;
	out[79] |= ( in[75] << ( 32 - 26 ) ) & 0x3fffffff ;

	out[80] = ( in[72] >> 24 ) ;
	out[81] = ( in[73] >> 24 ) ;
	out[82] = ( in[74] >> 24 ) ;
	out[83] = ( in[75] >> 24 ) ;

	out[80] |= ( in[76] << ( 32 - 24 ) ) & 0x3fffffff ;
	out[81] |= ( in[77] << ( 32 - 24 ) ) & 0x3fffffff ;
	out[82] |= ( in[78] << ( 32 - 24 ) ) & 0x3fffffff ;
	out[83] |= ( in[79] << ( 32 - 24 ) ) & 0x3fffffff ;

	out[84] = ( in[76] >> 22 ) ;
	out[85] = ( in[77] >> 22 ) ;
	out[86] = ( in[78] >> 22 ) ;
	out[87] = ( in[79] >> 22 ) ;

	out[84] |= ( in[80] << ( 32 - 22 ) ) & 0x3fffffff ;
	out[85] |= ( in[81] << ( 32 - 22 ) ) & 0x3fffffff ;
	out[86] |= ( in[82] << ( 32 - 22 ) ) & 0x3fffffff ;
	out[87] |= ( in[83] << ( 32 - 22 ) ) & 0x3fffffff ;

	out[88] = ( in[80] >> 20 ) ;
	out[89] = ( in[81] >> 20 ) ;
	out[90] = ( in[82] >> 20 ) ;
	out[91] = ( in[83] >> 20 ) ;

	out[88] |= ( in[84] << ( 32 - 20 ) ) & 0x3fffffff ;
	out[89] |= ( in[85] << ( 32 - 20 ) ) & 0x3fffffff ;
	out[90] |= ( in[86] << ( 32 - 20 ) ) & 0x3fffffff ;
	out[91] |= ( in[87] << ( 32 - 20 ) ) & 0x3fffffff ;

	out[92] = ( in[84] >> 18 ) ;
	out[93] = ( in[85] >> 18 ) ;
	out[94] = ( in[86] >> 18 ) ;
	out[95] = ( in[87] >> 18 ) ;

	out[92] |= ( in[88] << ( 32 - 18 ) ) & 0x3fffffff ;
	out[93] |= ( in[89] << ( 32 - 18 ) ) & 0x3fffffff ;
	out[94] |= ( in[90] << ( 32 - 18 ) ) & 0x3fffffff ;
	out[95] |= ( in[91] << ( 32 - 18 ) ) & 0x3fffffff ;

	out[96] = ( in[88] >> 16 ) ;
	out[97] = ( in[89] >> 16 ) ;
	out[98] = ( in[90] >> 16 ) ;
	out[99] = ( in[91] >> 16 ) ;

	out[96] |= ( in[92] << ( 32 - 16 ) ) & 0x3fffffff ;
	out[97] |= ( in[93] << ( 32 - 16 ) ) & 0x3fffffff ;
	out[98] |= ( in[94] << ( 32 - 16 ) ) & 0x3fffffff ;
	out[99] |= ( in[95] << ( 32 - 16 ) ) & 0x3fffffff ;

	out[100] = ( in[92] >> 14 ) ;
	out[101] = ( in[93] >> 14 ) ;
	out[102] = ( in[94] >> 14 ) ;
	out[103] = ( in[95] >> 14 ) ;

	out[100] |= ( in[96] << ( 32 - 14 ) ) & 0x3fffffff ;
	out[101] |= ( in[97] << ( 32 - 14 ) ) & 0x3fffffff ;
	out[102] |= ( in[98] << ( 32 - 14 ) ) & 0x3fffffff ;
	out[103] |= ( in[99] << ( 32 - 14 ) ) & 0x3fffffff ;

	out[104] = ( in[96] >> 12 ) ;
	out[105] = ( in[97] >> 12 ) ;
	out[106] = ( in[98] >> 12 ) ;
	out[107] = ( in[99] >> 12 ) ;

	out[104] |= ( in[100] << ( 32 - 12 ) ) & 0x3fffffff ;
	out[105] |= ( in[101] << ( 32 - 12 ) ) & 0x3fffffff ;
	out[106] |= ( in[102] << ( 32 - 12 ) ) & 0x3fffffff ;
	out[107] |= ( in[103] << ( 32 - 12 ) ) & 0x3fffffff ;

	out[108] = ( in[100] >> 10 ) ;
	out[109] = ( in[101] >> 10 ) ;
	out[110] = ( in[102] >> 10 ) ;
	out[111] = ( in[103] >> 10 ) ;

	out[108] |= ( in[104] << ( 32 - 10 ) ) & 0x3fffffff ;
	out[109] |= ( in[105] << ( 32 - 10 ) ) & 0x3fffffff ;
	out[110] |= ( in[106] << ( 32 - 10 ) ) & 0x3fffffff ;
	out[111] |= ( in[107] << ( 32 - 10 ) ) & 0x3fffffff ;

	out[112] = ( in[104] >> 8 ) ;
	out[113] = ( in[105] >> 8 ) ;
	out[114] = ( in[106] >> 8 ) ;
	out[115] = ( in[107] >> 8 ) ;

	out[112] |= ( in[108] << ( 32 - 8 ) ) & 0x3fffffff ;
	out[113] |= ( in[109] << ( 32 - 8 ) ) & 0x3fffffff ;
	out[114] |= ( in[110] << ( 32 - 8 ) ) & 0x3fffffff ;
	out[115] |= ( in[111] << ( 32 - 8 ) ) & 0x3fffffff ;

	out[116] = ( in[108] >> 6 ) ;
	out[117] = ( in[109] >> 6 ) ;
	out[118] = ( in[110] >> 6 ) ;
	out[119] = ( in[111] >> 6 ) ;

	out[116] |= ( in[112] << ( 32 - 6 ) ) & 0x3fffffff ;
	out[117] |= ( in[113] << ( 32 - 6 ) ) & 0x3fffffff ;
	out[118] |= ( in[114] << ( 32 - 6 ) ) & 0x3fffffff ;
	out[119] |= ( in[115] << ( 32 - 6 ) ) & 0x3fffffff ;

	out[120] = ( in[112] >> 4 ) ;
	out[121] = ( in[113] >> 4 ) ;
	out[122] = ( in[114] >> 4 ) ;
	out[123] = ( in[115] >> 4 ) ;

	out[120] |= ( in[116] << ( 32 - 4 ) ) & 0x3fffffff ;
	out[121] |= ( in[117] << ( 32 - 4 ) ) & 0x3fffffff ;
	out[122] |= ( in[118] << ( 32 - 4 ) ) & 0x3fffffff ;
	out[123] |= ( in[119] << ( 32 - 4 ) ) & 0x3fffffff ;

	out[124] = ( in[116] >> 2 ) ;
	out[125] = ( in[117] >> 2 ) ;
	out[126] = ( in[118] >> 2 ) ;
	out[127] = ( in[119] >> 2 ) ;
}


// 31-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c31(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] >> 0 ) & 0x7fffffff ;
	out[1] = ( in[1] >> 0 ) & 0x7fffffff ;
	out[2] = ( in[2] >> 0 ) & 0x7fffffff ;
	out[3] = ( in[3] >> 0 ) & 0x7fffffff ;

	out[4] = ( in[0] >> 31 ) ;
	out[5] = ( in[1] >> 31 ) ;
	out[6] = ( in[2] >> 31 ) ;
	out[7] = ( in[3] >> 31 ) ;

	out[4] |= ( in[4] << ( 32 - 31 ) ) & 0x7fffffff ;
	out[5] |= ( in[5] << ( 32 - 31 ) ) & 0x7fffffff ;
	out[6] |= ( in[6] << ( 32 - 31 ) ) & 0x7fffffff ;
	out[7] |= ( in[7] << ( 32 - 31 ) ) & 0x7fffffff ;

	out[8] = ( in[4] >> 30 ) ;
	out[9] = ( in[5] >> 30 ) ;
	out[10] = ( in[6] >> 30 ) ;
	out[11] = ( in[7] >> 30 ) ;

	out[8] |= ( in[8] << ( 32 - 30 ) ) & 0x7fffffff ;
	out[9] |= ( in[9] << ( 32 - 30 ) ) & 0x7fffffff ;
	out[10] |= ( in[10] << ( 32 - 30 ) ) & 0x7fffffff ;
	out[11] |= ( in[11] << ( 32 - 30 ) ) & 0x7fffffff ;

	out[12] = ( in[8] >> 29 ) ;
	out[13] = ( in[9] >> 29 ) ;
	out[14] = ( in[10] >> 29 ) ;
	out[15] = ( in[11] >> 29 ) ;

	out[12] |= ( in[12] << ( 32 - 29 ) ) & 0x7fffffff ;
	out[13] |= ( in[13] << ( 32 - 29 ) ) & 0x7fffffff ;
	out[14] |= ( in[14] << ( 32 - 29 ) ) & 0x7fffffff ;
	out[15] |= ( in[15] << ( 32 - 29 ) ) & 0x7fffffff ;

	out[16] = ( in[12] >> 28 ) ;
	out[17] = ( in[13] >> 28 ) ;
	out[18] = ( in[14] >> 28 ) ;
	out[19] = ( in[15] >> 28 ) ;

	out[16] |= ( in[16] << ( 32 - 28 ) ) & 0x7fffffff ;
	out[17] |= ( in[17] << ( 32 - 28 ) ) & 0x7fffffff ;
	out[18] |= ( in[18] << ( 32 - 28 ) ) & 0x7fffffff ;
	out[19] |= ( in[19] << ( 32 - 28 ) ) & 0x7fffffff ;

	out[20] = ( in[16] >> 27 ) ;
	out[21] = ( in[17] >> 27 ) ;
	out[22] = ( in[18] >> 27 ) ;
	out[23] = ( in[19] >> 27 ) ;

	out[20] |= ( in[20] << ( 32 - 27 ) ) & 0x7fffffff ;
	out[21] |= ( in[21] << ( 32 - 27 ) ) & 0x7fffffff ;
	out[22] |= ( in[22] << ( 32 - 27 ) ) & 0x7fffffff ;
	out[23] |= ( in[23] << ( 32 - 27 ) ) & 0x7fffffff ;

	out[24] = ( in[20] >> 26 ) ;
	out[25] = ( in[21] >> 26 ) ;
	out[26] = ( in[22] >> 26 ) ;
	out[27] = ( in[23] >> 26 ) ;

	out[24] |= ( in[24] << ( 32 - 26 ) ) & 0x7fffffff ;
	out[25] |= ( in[25] << ( 32 - 26 ) ) & 0x7fffffff ;
	out[26] |= ( in[26] << ( 32 - 26 ) ) & 0x7fffffff ;
	out[27] |= ( in[27] << ( 32 - 26 ) ) & 0x7fffffff ;

	out[28] = ( in[24] >> 25 ) ;
	out[29] = ( in[25] >> 25 ) ;
	out[30] = ( in[26] >> 25 ) ;
	out[31] = ( in[27] >> 25 ) ;

	out[28] |= ( in[28] << ( 32 - 25 ) ) & 0x7fffffff ;
	out[29] |= ( in[29] << ( 32 - 25 ) ) & 0x7fffffff ;
	out[30] |= ( in[30] << ( 32 - 25 ) ) & 0x7fffffff ;
	out[31] |= ( in[31] << ( 32 - 25 ) ) & 0x7fffffff ;

	out[32] = ( in[28] >> 24 ) ;
	out[33] = ( in[29] >> 24 ) ;
	out[34] = ( in[30] >> 24 ) ;
	out[35] = ( in[31] >> 24 ) ;

	out[32] |= ( in[32] << ( 32 - 24 ) ) & 0x7fffffff ;
	out[33] |= ( in[33] << ( 32 - 24 ) ) & 0x7fffffff ;
	out[34] |= ( in[34] << ( 32 - 24 ) ) & 0x7fffffff ;
	out[35] |= ( in[35] << ( 32 - 24 ) ) & 0x7fffffff ;

	out[36] = ( in[32] >> 23 ) ;
	out[37] = ( in[33] >> 23 ) ;
	out[38] = ( in[34] >> 23 ) ;
	out[39] = ( in[35] >> 23 ) ;

	out[36] |= ( in[36] << ( 32 - 23 ) ) & 0x7fffffff ;
	out[37] |= ( in[37] << ( 32 - 23 ) ) & 0x7fffffff ;
	out[38] |= ( in[38] << ( 32 - 23 ) ) & 0x7fffffff ;
	out[39] |= ( in[39] << ( 32 - 23 ) ) & 0x7fffffff ;

	out[40] = ( in[36] >> 22 ) ;
	out[41] = ( in[37] >> 22 ) ;
	out[42] = ( in[38] >> 22 ) ;
	out[43] = ( in[39] >> 22 ) ;

	out[40] |= ( in[40] << ( 32 - 22 ) ) & 0x7fffffff ;
	out[41] |= ( in[41] << ( 32 - 22 ) ) & 0x7fffffff ;
	out[42] |= ( in[42] << ( 32 - 22 ) ) & 0x7fffffff ;
	out[43] |= ( in[43] << ( 32 - 22 ) ) & 0x7fffffff ;

	out[44] = ( in[40] >> 21 ) ;
	out[45] = ( in[41] >> 21 ) ;
	out[46] = ( in[42] >> 21 ) ;
	out[47] = ( in[43] >> 21 ) ;

	out[44] |= ( in[44] << ( 32 - 21 ) ) & 0x7fffffff ;
	out[45] |= ( in[45] << ( 32 - 21 ) ) & 0x7fffffff ;
	out[46] |= ( in[46] << ( 32 - 21 ) ) & 0x7fffffff ;
	out[47] |= ( in[47] << ( 32 - 21 ) ) & 0x7fffffff ;

	out[48] = ( in[44] >> 20 ) ;
	out[49] = ( in[45] >> 20 ) ;
	out[50] = ( in[46] >> 20 ) ;
	out[51] = ( in[47] >> 20 ) ;

	out[48] |= ( in[48] << ( 32 - 20 ) ) & 0x7fffffff ;
	out[49] |= ( in[49] << ( 32 - 20 ) ) & 0x7fffffff ;
	out[50] |= ( in[50] << ( 32 - 20 ) ) & 0x7fffffff ;
	out[51] |= ( in[51] << ( 32 - 20 ) ) & 0x7fffffff ;

	out[52] = ( in[48] >> 19 ) ;
	out[53] = ( in[49] >> 19 ) ;
	out[54] = ( in[50] >> 19 ) ;
	out[55] = ( in[51] >> 19 ) ;

	out[52] |= ( in[52] << ( 32 - 19 ) ) & 0x7fffffff ;
	out[53] |= ( in[53] << ( 32 - 19 ) ) & 0x7fffffff ;
	out[54] |= ( in[54] << ( 32 - 19 ) ) & 0x7fffffff ;
	out[55] |= ( in[55] << ( 32 - 19 ) ) & 0x7fffffff ;

	out[56] = ( in[52] >> 18 ) ;
	out[57] = ( in[53] >> 18 ) ;
	out[58] = ( in[54] >> 18 ) ;
	out[59] = ( in[55] >> 18 ) ;

	out[56] |= ( in[56] << ( 32 - 18 ) ) & 0x7fffffff ;
	out[57] |= ( in[57] << ( 32 - 18 ) ) & 0x7fffffff ;
	out[58] |= ( in[58] << ( 32 - 18 ) ) & 0x7fffffff ;
	out[59] |= ( in[59] << ( 32 - 18 ) ) & 0x7fffffff ;

	out[60] = ( in[56] >> 17 ) ;
	out[61] = ( in[57] >> 17 ) ;
	out[62] = ( in[58] >> 17 ) ;
	out[63] = ( in[59] >> 17 ) ;

	out[60] |= ( in[60] << ( 32 - 17 ) ) & 0x7fffffff ;
	out[61] |= ( in[61] << ( 32 - 17 ) ) & 0x7fffffff ;
	out[62] |= ( in[62] << ( 32 - 17 ) ) & 0x7fffffff ;
	out[63] |= ( in[63] << ( 32 - 17 ) ) & 0x7fffffff ;

	out[64] = ( in[60] >> 16 ) ;
	out[65] = ( in[61] >> 16 ) ;
	out[66] = ( in[62] >> 16 ) ;
	out[67] = ( in[63] >> 16 ) ;

	out[64] |= ( in[64] << ( 32 - 16 ) ) & 0x7fffffff ;
	out[65] |= ( in[65] << ( 32 - 16 ) ) & 0x7fffffff ;
	out[66] |= ( in[66] << ( 32 - 16 ) ) & 0x7fffffff ;
	out[67] |= ( in[67] << ( 32 - 16 ) ) & 0x7fffffff ;

	out[68] = ( in[64] >> 15 ) ;
	out[69] = ( in[65] >> 15 ) ;
	out[70] = ( in[66] >> 15 ) ;
	out[71] = ( in[67] >> 15 ) ;

	out[68] |= ( in[68] << ( 32 - 15 ) ) & 0x7fffffff ;
	out[69] |= ( in[69] << ( 32 - 15 ) ) & 0x7fffffff ;
	out[70] |= ( in[70] << ( 32 - 15 ) ) & 0x7fffffff ;
	out[71] |= ( in[71] << ( 32 - 15 ) ) & 0x7fffffff ;

	out[72] = ( in[68] >> 14 ) ;
	out[73] = ( in[69] >> 14 ) ;
	out[74] = ( in[70] >> 14 ) ;
	out[75] = ( in[71] >> 14 ) ;

	out[72] |= ( in[72] << ( 32 - 14 ) ) & 0x7fffffff ;
	out[73] |= ( in[73] << ( 32 - 14 ) ) & 0x7fffffff ;
	out[74] |= ( in[74] << ( 32 - 14 ) ) & 0x7fffffff ;
	out[75] |= ( in[75] << ( 32 - 14 ) ) & 0x7fffffff ;

	out[76] = ( in[72] >> 13 ) ;
	out[77] = ( in[73] >> 13 ) ;
	out[78] = ( in[74] >> 13 ) ;
	out[79] = ( in[75] >> 13 ) ;

	out[76] |= ( in[76] << ( 32 - 13 ) ) & 0x7fffffff ;
	out[77] |= ( in[77] << ( 32 - 13 ) ) & 0x7fffffff ;
	out[78] |= ( in[78] << ( 32 - 13 ) ) & 0x7fffffff ;
	out[79] |= ( in[79] << ( 32 - 13 ) ) & 0x7fffffff ;

	out[80] = ( in[76] >> 12 ) ;
	out[81] = ( in[77] >> 12 ) ;
	out[82] = ( in[78] >> 12 ) ;
	out[83] = ( in[79] >> 12 ) ;

	out[80] |= ( in[80] << ( 32 - 12 ) ) & 0x7fffffff ;
	out[81] |= ( in[81] << ( 32 - 12 ) ) & 0x7fffffff ;
	out[82] |= ( in[82] << ( 32 - 12 ) ) & 0x7fffffff ;
	out[83] |= ( in[83] << ( 32 - 12 ) ) & 0x7fffffff ;

	out[84] = ( in[80] >> 11 ) ;
	out[85] = ( in[81] >> 11 ) ;
	out[86] = ( in[82] >> 11 ) ;
	out[87] = ( in[83] >> 11 ) ;

	out[84] |= ( in[84] << ( 32 - 11 ) ) & 0x7fffffff ;
	out[85] |= ( in[85] << ( 32 - 11 ) ) & 0x7fffffff ;
	out[86] |= ( in[86] << ( 32 - 11 ) ) & 0x7fffffff ;
	out[87] |= ( in[87] << ( 32 - 11 ) ) & 0x7fffffff ;

	out[88] = ( in[84] >> 10 ) ;
	out[89] = ( in[85] >> 10 ) ;
	out[90] = ( in[86] >> 10 ) ;
	out[91] = ( in[87] >> 10 ) ;

	out[88] |= ( in[88] << ( 32 - 10 ) ) & 0x7fffffff ;
	out[89] |= ( in[89] << ( 32 - 10 ) ) & 0x7fffffff ;
	out[90] |= ( in[90] << ( 32 - 10 ) ) & 0x7fffffff ;
	out[91] |= ( in[91] << ( 32 - 10 ) ) & 0x7fffffff ;

	out[92] = ( in[88] >> 9 ) ;
	out[93] = ( in[89] >> 9 ) ;
	out[94] = ( in[90] >> 9 ) ;
	out[95] = ( in[91] >> 9 ) ;

	out[92] |= ( in[92] << ( 32 - 9 ) ) & 0x7fffffff ;
	out[93] |= ( in[93] << ( 32 - 9 ) ) & 0x7fffffff ;
	out[94] |= ( in[94] << ( 32 - 9 ) ) & 0x7fffffff ;
	out[95] |= ( in[95] << ( 32 - 9 ) ) & 0x7fffffff ;

	out[96] = ( in[92] >> 8 ) ;
	out[97] = ( in[93] >> 8 ) ;
	out[98] = ( in[94] >> 8 ) ;
	out[99] = ( in[95] >> 8 ) ;

	out[96] |= ( in[96] << ( 32 - 8 ) ) & 0x7fffffff ;
	out[97] |= ( in[97] << ( 32 - 8 ) ) & 0x7fffffff ;
	out[98] |= ( in[98] << ( 32 - 8 ) ) & 0x7fffffff ;
	out[99] |= ( in[99] << ( 32 - 8 ) ) & 0x7fffffff ;

	out[100] = ( in[96] >> 7 ) ;
	out[101] = ( in[97] >> 7 ) ;
	out[102] = ( in[98] >> 7 ) ;
	out[103] = ( in[99] >> 7 ) ;

	out[100] |= ( in[100] << ( 32 - 7 ) ) & 0x7fffffff ;
	out[101] |= ( in[101] << ( 32 - 7 ) ) & 0x7fffffff ;
	out[102] |= ( in[102] << ( 32 - 7 ) ) & 0x7fffffff ;
	out[103] |= ( in[103] << ( 32 - 7 ) ) & 0x7fffffff ;

	out[104] = ( in[100] >> 6 ) ;
	out[105] = ( in[101] >> 6 ) ;
	out[106] = ( in[102] >> 6 ) ;
	out[107] = ( in[103] >> 6 ) ;

	out[104] |= ( in[104] << ( 32 - 6 ) ) & 0x7fffffff ;
	out[105] |= ( in[105] << ( 32 - 6 ) ) & 0x7fffffff ;
	out[106] |= ( in[106] << ( 32 - 6 ) ) & 0x7fffffff ;
	out[107] |= ( in[107] << ( 32 - 6 ) ) & 0x7fffffff ;

	out[108] = ( in[104] >> 5 ) ;
	out[109] = ( in[105] >> 5 ) ;
	out[110] = ( in[106] >> 5 ) ;
	out[111] = ( in[107] >> 5 ) ;

	out[108] |= ( in[108] << ( 32 - 5 ) ) & 0x7fffffff ;
	out[109] |= ( in[109] << ( 32 - 5 ) ) & 0x7fffffff ;
	out[110] |= ( in[110] << ( 32 - 5 ) ) & 0x7fffffff ;
	out[111] |= ( in[111] << ( 32 - 5 ) ) & 0x7fffffff ;

	out[112] = ( in[108] >> 4 ) ;
	out[113] = ( in[109] >> 4 ) ;
	out[114] = ( in[110] >> 4 ) ;
	out[115] = ( in[111] >> 4 ) ;

	out[112] |= ( in[112] << ( 32 - 4 ) ) & 0x7fffffff ;
	out[113] |= ( in[113] << ( 32 - 4 ) ) & 0x7fffffff ;
	out[114] |= ( in[114] << ( 32 - 4 ) ) & 0x7fffffff ;
	out[115] |= ( in[115] << ( 32 - 4 ) ) & 0x7fffffff ;

	out[116] = ( in[112] >> 3 ) ;
	out[117] = ( in[113] >> 3 ) ;
	out[118] = ( in[114] >> 3 ) ;
	out[119] = ( in[115] >> 3 ) ;

	out[116] |= ( in[116] << ( 32 - 3 ) ) & 0x7fffffff ;
	out[117] |= ( in[117] << ( 32 - 3 ) ) & 0x7fffffff ;
	out[118] |= ( in[118] << ( 32 - 3 ) ) & 0x7fffffff ;
	out[119] |= ( in[119] << ( 32 - 3 ) ) & 0x7fffffff ;

	out[120] = ( in[116] >> 2 ) ;
	out[121] = ( in[117] >> 2 ) ;
	out[122] = ( in[118] >> 2 ) ;
	out[123] = ( in[119] >> 2 ) ;

	out[120] |= ( in[120] << ( 32 - 2 ) ) & 0x7fffffff ;
	out[121] |= ( in[121] << ( 32 - 2 ) ) & 0x7fffffff ;
	out[122] |= ( in[122] << ( 32 - 2 ) ) & 0x7fffffff ;
	out[123] |= ( in[123] << ( 32 - 2 ) ) & 0x7fffffff ;

	out[124] = ( in[120] >> 1 ) ;
	out[125] = ( in[121] >> 1 ) ;
	out[126] = ( in[122] >> 1 ) ;
	out[127] = ( in[123] >> 1 ) ;
}


// 32-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_unpack128_c32(const uint32_t *  __restrict__  in,
		uint32_t *  __restrict__  out) {
	memcpy(out, in, 128 * sizeof(uint32_t));
}


// 1-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c1(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 1 ;
	out[1] |= in[5] << 1 ;
	out[2] |= in[6] << 1 ;
	out[3] |= in[7] << 1 ;

	out[0] |= in[8] << 2 ;
	out[1] |= in[9] << 2 ;
	out[2] |= in[10] << 2 ;
	out[3] |= in[11] << 2 ;

	out[0] |= in[12] << 3 ;
	out[1] |= in[13] << 3 ;
	out[2] |= in[14] << 3 ;
	out[3] |= in[15] << 3 ;

	out[0] |= in[16] << 4 ;
	out[1] |= in[17] << 4 ;
	out[2] |= in[18] << 4 ;
	out[3] |= in[19] << 4 ;

	out[0] |= in[20] << 5 ;
	out[1] |= in[21] << 5 ;
	out[2] |= in[22] << 5 ;
	out[3] |= in[23] << 5 ;

	out[0] |= in[24] << 6 ;
	out[1] |= in[25] << 6 ;
	out[2] |= in[26] << 6 ;
	out[3] |= in[27] << 6 ;

	out[0] |= in[28] << 7 ;
	out[1] |= in[29] << 7 ;
	out[2] |= in[30] << 7 ;
	out[3] |= in[31] << 7 ;

	out[0] |= in[32] << 8 ;
	out[1] |= in[33] << 8 ;
	out[2] |= in[34] << 8 ;
	out[3] |= in[35] << 8 ;

	out[0] |= in[36] << 9 ;
	out[1] |= in[37] << 9 ;
	out[2] |= in[38] << 9 ;
	out[3] |= in[39] << 9 ;

	out[0] |= in[40] << 10 ;
	out[1] |= in[41] << 10 ;
	out[2] |= in[42] << 10 ;
	out[3] |= in[43] << 10 ;

	out[0] |= in[44] << 11 ;
	out[1] |= in[45] << 11 ;
	out[2] |= in[46] << 11 ;
	out[3] |= in[47] << 11 ;

	out[0] |= in[48] << 12 ;
	out[1] |= in[49] << 12 ;
	out[2] |= in[50] << 12 ;
	out[3] |= in[51] << 12 ;

	out[0] |= in[52] << 13 ;
	out[1] |= in[53] << 13 ;
	out[2] |= in[54] << 13 ;
	out[3] |= in[55] << 13 ;

	out[0] |= in[56] << 14 ;
	out[1] |= in[57] << 14 ;
	out[2] |= in[58] << 14 ;
	out[3] |= in[59] << 14 ;

	out[0] |= in[60] << 15 ;
	out[1] |= in[61] << 15 ;
	out[2] |= in[62] << 15 ;
	out[3] |= in[63] << 15 ;

	out[0] |= in[64] << 16 ;
	out[1] |= in[65] << 16 ;
	out[2] |= in[66] << 16 ;
	out[3] |= in[67] << 16 ;

	out[0] |= in[68] << 17 ;
	out[1] |= in[69] << 17 ;
	out[2] |= in[70] << 17 ;
	out[3] |= in[71] << 17 ;

	out[0] |= in[72] << 18 ;
	out[1] |= in[73] << 18 ;
	out[2] |= in[74] << 18 ;
	out[3] |= in[75] << 18 ;

	out[0] |= in[76] << 19 ;
	out[1] |= in[77] << 19 ;
	out[2] |= in[78] << 19 ;
	out[3] |= in[79] << 19 ;

	out[0] |= in[80] << 20 ;
	out[1] |= in[81] << 20 ;
	out[2] |= in[82] << 20 ;
	out[3] |= in[83] << 20 ;

	out[0] |= in[84] << 21 ;
	out[1] |= in[85] << 21 ;
	out[2] |= in[86] << 21 ;
	out[3] |= in[87] << 21 ;

	out[0] |= in[88] << 22 ;
	out[1] |= in[89] << 22 ;
	out[2] |= in[90] << 22 ;
	out[3] |= in[91] << 22 ;

	out[0] |= in[92] << 23 ;
	out[1] |= in[93] << 23 ;
	out[2] |= in[94] << 23 ;
	out[3] |= in[95] << 23 ;

	out[0] |= in[96] << 24 ;
	out[1] |= in[97] << 24 ;
	out[2] |= in[98] << 24 ;
	out[3] |= in[99] << 24 ;

	out[0] |= in[100] << 25 ;
	out[1] |= in[101] << 25 ;
	out[2] |= in[102] << 25 ;
	out[3] |= in[103] << 25 ;

	out[0] |= in[104] << 26 ;
	out[1] |= in[105] << 26 ;
	out[2] |= in[106] << 26 ;
	out[3] |= in[107] << 26 ;

	out[0] |= in[108] << 27 ;
	out[1] |= in[109] << 27 ;
	out[2] |= in[110] << 27 ;
	out[3] |= in[111] << 27 ;

	out[0] |= in[112] << 28 ;
	out[1] |= in[113] << 28 ;
	out[2] |= in[114] << 28 ;
	out[3] |= in[115] << 28 ;

	out[0] |= in[116] << 29 ;
	out[1] |= in[117] << 29 ;
	out[2] |= in[118] << 29 ;
	out[3] |= in[119] << 29 ;

	out[0] |= in[120] << 30 ;
	out[1] |= in[121] << 30 ;
	out[2] |= in[122] << 30 ;
	out[3] |= in[123] << 30 ;

	out[0] |= in[124] << 31 ;
	out[1] |= in[125] << 31 ;
	out[2] |= in[126] << 31 ;
	out[3] |= in[127] << 31 ;
}


// 2-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c2(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 2 ;
	out[1] |= in[5] << 2 ;
	out[2] |= in[6] << 2 ;
	out[3] |= in[7] << 2 ;

	out[0] |= in[8] << 4 ;
	out[1] |= in[9] << 4 ;
	out[2] |= in[10] << 4 ;
	out[3] |= in[11] << 4 ;

	out[0] |= in[12] << 6 ;
	out[1] |= in[13] << 6 ;
	out[2] |= in[14] << 6 ;
	out[3] |= in[15] << 6 ;

	out[0] |= in[16] << 8 ;
	out[1] |= in[17] << 8 ;
	out[2] |= in[18] << 8 ;
	out[3] |= in[19] << 8 ;

	out[0] |= in[20] << 10 ;
	out[1] |= in[21] << 10 ;
	out[2] |= in[22] << 10 ;
	out[3] |= in[23] << 10 ;

	out[0] |= in[24] << 12 ;
	out[1] |= in[25] << 12 ;
	out[2] |= in[26] << 12 ;
	out[3] |= in[27] << 12 ;

	out[0] |= in[28] << 14 ;
	out[1] |= in[29] << 14 ;
	out[2] |= in[30] << 14 ;
	out[3] |= in[31] << 14 ;

	out[0] |= in[32] << 16 ;
	out[1] |= in[33] << 16 ;
	out[2] |= in[34] << 16 ;
	out[3] |= in[35] << 16 ;

	out[0] |= in[36] << 18 ;
	out[1] |= in[37] << 18 ;
	out[2] |= in[38] << 18 ;
	out[3] |= in[39] << 18 ;

	out[0] |= in[40] << 20 ;
	out[1] |= in[41] << 20 ;
	out[2] |= in[42] << 20 ;
	out[3] |= in[43] << 20 ;

	out[0] |= in[44] << 22 ;
	out[1] |= in[45] << 22 ;
	out[2] |= in[46] << 22 ;
	out[3] |= in[47] << 22 ;

	out[0] |= in[48] << 24 ;
	out[1] |= in[49] << 24 ;
	out[2] |= in[50] << 24 ;
	out[3] |= in[51] << 24 ;

	out[0] |= in[52] << 26 ;
	out[1] |= in[53] << 26 ;
	out[2] |= in[54] << 26 ;
	out[3] |= in[55] << 26 ;

	out[0] |= in[56] << 28 ;
	out[1] |= in[57] << 28 ;
	out[2] |= in[58] << 28 ;
	out[3] |= in[59] << 28 ;

	out[0] |= in[60] << 30 ;
	out[1] |= in[61] << 30 ;
	out[2] |= in[62] << 30 ;
	out[3] |= in[63] << 30 ;

	out[4] = in[64] << 0 ;
	out[5] = in[65] << 0 ;
	out[6] = in[66] << 0 ;
	out[7] = in[67] << 0 ;

	out[4] |= in[68] << 2 ;
	out[5] |= in[69] << 2 ;
	out[6] |= in[70] << 2 ;
	out[7] |= in[71] << 2 ;

	out[4] |= in[72] << 4 ;
	out[5] |= in[73] << 4 ;
	out[6] |= in[74] << 4 ;
	out[7] |= in[75] << 4 ;

	out[4] |= in[76] << 6 ;
	out[5] |= in[77] << 6 ;
	out[6] |= in[78] << 6 ;
	out[7] |= in[79] << 6 ;

	out[4] |= in[80] << 8 ;
	out[5] |= in[81] << 8 ;
	out[6] |= in[82] << 8 ;
	out[7] |= in[83] << 8 ;

	out[4] |= in[84] << 10 ;
	out[5] |= in[85] << 10 ;
	out[6] |= in[86] << 10 ;
	out[7] |= in[87] << 10 ;

	out[4] |= in[88] << 12 ;
	out[5] |= in[89] << 12 ;
	out[6] |= in[90] << 12 ;
	out[7] |= in[91] << 12 ;

	out[4] |= in[92] << 14 ;
	out[5] |= in[93] << 14 ;
	out[6] |= in[94] << 14 ;
	out[7] |= in[95] << 14 ;

	out[4] |= in[96] << 16 ;
	out[5] |= in[97] << 16 ;
	out[6] |= in[98] << 16 ;
	out[7] |= in[99] << 16 ;

	out[4] |= in[100] << 18 ;
	out[5] |= in[101] << 18 ;
	out[6] |= in[102] << 18 ;
	out[7] |= in[103] << 18 ;

	out[4] |= in[104] << 20 ;
	out[5] |= in[105] << 20 ;
	out[6] |= in[106] << 20 ;
	out[7] |= in[107] << 20 ;

	out[4] |= in[108] << 22 ;
	out[5] |= in[109] << 22 ;
	out[6] |= in[110] << 22 ;
	out[7] |= in[111] << 22 ;

	out[4] |= in[112] << 24 ;
	out[5] |= in[113] << 24 ;
	out[6] |= in[114] << 24 ;
	out[7] |= in[115] << 24 ;

	out[4] |= in[116] << 26 ;
	out[5] |= in[117] << 26 ;
	out[6] |= in[118] << 26 ;
	out[7] |= in[119] << 26 ;

	out[4] |= in[120] << 28 ;
	out[5] |= in[121] << 28 ;
	out[6] |= in[122] << 28 ;
	out[7] |= in[123] << 28 ;

	out[4] |= in[124] << 30 ;
	out[5] |= in[125] << 30 ;
	out[6] |= in[126] << 30 ;
	out[7] |= in[127] << 30 ;
}


// 3-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c3(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 3 ;
	out[1] |= in[5] << 3 ;
	out[2] |= in[6] << 3 ;
	out[3] |= in[7] << 3 ;

	out[0] |= in[8] << 6 ;
	out[1] |= in[9] << 6 ;
	out[2] |= in[10] << 6 ;
	out[3] |= in[11] << 6 ;

	out[0] |= in[12] << 9 ;
	out[1] |= in[13] << 9 ;
	out[2] |= in[14] << 9 ;
	out[3] |= in[15] << 9 ;

	out[0] |= in[16] << 12 ;
	out[1] |= in[17] << 12 ;
	out[2] |= in[18] << 12 ;
	out[3] |= in[19] << 12 ;

	out[0] |= in[20] << 15 ;
	out[1] |= in[21] << 15 ;
	out[2] |= in[22] << 15 ;
	out[3] |= in[23] << 15 ;

	out[0] |= in[24] << 18 ;
	out[1] |= in[25] << 18 ;
	out[2] |= in[26] << 18 ;
	out[3] |= in[27] << 18 ;

	out[0] |= in[28] << 21 ;
	out[1] |= in[29] << 21 ;
	out[2] |= in[30] << 21 ;
	out[3] |= in[31] << 21 ;

	out[0] |= in[32] << 24 ;
	out[1] |= in[33] << 24 ;
	out[2] |= in[34] << 24 ;
	out[3] |= in[35] << 24 ;

	out[0] |= in[36] << 27 ;
	out[1] |= in[37] << 27 ;
	out[2] |= in[38] << 27 ;
	out[3] |= in[39] << 27 ;

	out[0] |= in[40] << 30 ;
	out[1] |= in[41] << 30 ;
	out[2] |= in[42] << 30 ;
	out[3] |= in[43] << 30 ;

	out[4] = in[40] >> ( 32 - 30 ) ;
	out[5] = in[41] >> ( 32 - 30 ) ;
	out[6] = in[42] >> ( 32 - 30 ) ;
	out[7] = in[43] >> ( 32 - 30 ) ;

	out[4] |= in[44] << 1 ;
	out[5] |= in[45] << 1 ;
	out[6] |= in[46] << 1 ;
	out[7] |= in[47] << 1 ;

	out[4] |= in[48] << 4 ;
	out[5] |= in[49] << 4 ;
	out[6] |= in[50] << 4 ;
	out[7] |= in[51] << 4 ;

	out[4] |= in[52] << 7 ;
	out[5] |= in[53] << 7 ;
	out[6] |= in[54] << 7 ;
	out[7] |= in[55] << 7 ;

	out[4] |= in[56] << 10 ;
	out[5] |= in[57] << 10 ;
	out[6] |= in[58] << 10 ;
	out[7] |= in[59] << 10 ;

	out[4] |= in[60] << 13 ;
	out[5] |= in[61] << 13 ;
	out[6] |= in[62] << 13 ;
	out[7] |= in[63] << 13 ;

	out[4] |= in[64] << 16 ;
	out[5] |= in[65] << 16 ;
	out[6] |= in[66] << 16 ;
	out[7] |= in[67] << 16 ;

	out[4] |= in[68] << 19 ;
	out[5] |= in[69] << 19 ;
	out[6] |= in[70] << 19 ;
	out[7] |= in[71] << 19 ;

	out[4] |= in[72] << 22 ;
	out[5] |= in[73] << 22 ;
	out[6] |= in[74] << 22 ;
	out[7] |= in[75] << 22 ;

	out[4] |= in[76] << 25 ;
	out[5] |= in[77] << 25 ;
	out[6] |= in[78] << 25 ;
	out[7] |= in[79] << 25 ;

	out[4] |= in[80] << 28 ;
	out[5] |= in[81] << 28 ;
	out[6] |= in[82] << 28 ;
	out[7] |= in[83] << 28 ;

	out[4] |= in[84] << 31 ;
	out[5] |= in[85] << 31 ;
	out[6] |= in[86] << 31 ;
	out[7] |= in[87] << 31 ;

	out[8] = in[84] >> ( 32 - 31 ) ;
	out[9] = in[85] >> ( 32 - 31 ) ;
	out[10] = in[86] >> ( 32 - 31 ) ;
	out[11] = in[87] >> ( 32 - 31 ) ;

	out[8] |= in[88] << 2 ;
	out[9] |= in[89] << 2 ;
	out[10] |= in[90] << 2 ;
	out[11] |= in[91] << 2 ;

	out[8] |= in[92] << 5 ;
	out[9] |= in[93] << 5 ;
	out[10] |= in[94] << 5 ;
	out[11] |= in[95] << 5 ;

	out[8] |= in[96] << 8 ;
	out[9] |= in[97] << 8 ;
	out[10] |= in[98] << 8 ;
	out[11] |= in[99] << 8 ;

	out[8] |= in[100] << 11 ;
	out[9] |= in[101] << 11 ;
	out[10] |= in[102] << 11 ;
	out[11] |= in[103] << 11 ;

	out[8] |= in[104] << 14 ;
	out[9] |= in[105] << 14 ;
	out[10] |= in[106] << 14 ;
	out[11] |= in[107] << 14 ;

	out[8] |= in[108] << 17 ;
	out[9] |= in[109] << 17 ;
	out[10] |= in[110] << 17 ;
	out[11] |= in[111] << 17 ;

	out[8] |= in[112] << 20 ;
	out[9] |= in[113] << 20 ;
	out[10] |= in[114] << 20 ;
	out[11] |= in[115] << 20 ;

	out[8] |= in[116] << 23 ;
	out[9] |= in[117] << 23 ;
	out[10] |= in[118] << 23 ;
	out[11] |= in[119] << 23 ;

	out[8] |= in[120] << 26 ;
	out[9] |= in[121] << 26 ;
	out[10] |= in[122] << 26 ;
	out[11] |= in[123] << 26 ;

	out[8] |= in[124] << 29 ;
	out[9] |= in[125] << 29 ;
	out[10] |= in[126] << 29 ;
	out[11] |= in[127] << 29 ;
}


// 4-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c4(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 4 ;
	out[1] |= in[5] << 4 ;
	out[2] |= in[6] << 4 ;
	out[3] |= in[7] << 4 ;

	out[0] |= in[8] << 8 ;
	out[1] |= in[9] << 8 ;
	out[2] |= in[10] << 8 ;
	out[3] |= in[11] << 8 ;

	out[0] |= in[12] << 12 ;
	out[1] |= in[13] << 12 ;
	out[2] |= in[14] << 12 ;
	out[3] |= in[15] << 12 ;

	out[0] |= in[16] << 16 ;
	out[1] |= in[17] << 16 ;
	out[2] |= in[18] << 16 ;
	out[3] |= in[19] << 16 ;

	out[0] |= in[20] << 20 ;
	out[1] |= in[21] << 20 ;
	out[2] |= in[22] << 20 ;
	out[3] |= in[23] << 20 ;

	out[0] |= in[24] << 24 ;
	out[1] |= in[25] << 24 ;
	out[2] |= in[26] << 24 ;
	out[3] |= in[27] << 24 ;

	out[0] |= in[28] << 28 ;
	out[1] |= in[29] << 28 ;
	out[2] |= in[30] << 28 ;
	out[3] |= in[31] << 28 ;

	out[4] = in[32] << 0 ;
	out[5] = in[33] << 0 ;
	out[6] = in[34] << 0 ;
	out[7] = in[35] << 0 ;

	out[4] |= in[36] << 4 ;
	out[5] |= in[37] << 4 ;
	out[6] |= in[38] << 4 ;
	out[7] |= in[39] << 4 ;

	out[4] |= in[40] << 8 ;
	out[5] |= in[41] << 8 ;
	out[6] |= in[42] << 8 ;
	out[7] |= in[43] << 8 ;

	out[4] |= in[44] << 12 ;
	out[5] |= in[45] << 12 ;
	out[6] |= in[46] << 12 ;
	out[7] |= in[47] << 12 ;

	out[4] |= in[48] << 16 ;
	out[5] |= in[49] << 16 ;
	out[6] |= in[50] << 16 ;
	out[7] |= in[51] << 16 ;

	out[4] |= in[52] << 20 ;
	out[5] |= in[53] << 20 ;
	out[6] |= in[54] << 20 ;
	out[7] |= in[55] << 20 ;

	out[4] |= in[56] << 24 ;
	out[5] |= in[57] << 24 ;
	out[6] |= in[58] << 24 ;
	out[7] |= in[59] << 24 ;

	out[4] |= in[60] << 28 ;
	out[5] |= in[61] << 28 ;
	out[6] |= in[62] << 28 ;
	out[7] |= in[63] << 28 ;

	out[8] = in[64] << 0 ;
	out[9] = in[65] << 0 ;
	out[10] = in[66] << 0 ;
	out[11] = in[67] << 0 ;

	out[8] |= in[68] << 4 ;
	out[9] |= in[69] << 4 ;
	out[10] |= in[70] << 4 ;
	out[11] |= in[71] << 4 ;

	out[8] |= in[72] << 8 ;
	out[9] |= in[73] << 8 ;
	out[10] |= in[74] << 8 ;
	out[11] |= in[75] << 8 ;

	out[8] |= in[76] << 12 ;
	out[9] |= in[77] << 12 ;
	out[10] |= in[78] << 12 ;
	out[11] |= in[79] << 12 ;

	out[8] |= in[80] << 16 ;
	out[9] |= in[81] << 16 ;
	out[10] |= in[82] << 16 ;
	out[11] |= in[83] << 16 ;

	out[8] |= in[84] << 20 ;
	out[9] |= in[85] << 20 ;
	out[10] |= in[86] << 20 ;
	out[11] |= in[87] << 20 ;

	out[8] |= in[88] << 24 ;
	out[9] |= in[89] << 24 ;
	out[10] |= in[90] << 24 ;
	out[11] |= in[91] << 24 ;

	out[8] |= in[92] << 28 ;
	out[9] |= in[93] << 28 ;
	out[10] |= in[94] << 28 ;
	out[11] |= in[95] << 28 ;

	out[12] = in[96] << 0 ;
	out[13] = in[97] << 0 ;
	out[14] = in[98] << 0 ;
	out[15] = in[99] << 0 ;

	out[12] |= in[100] << 4 ;
	out[13] |= in[101] << 4 ;
	out[14] |= in[102] << 4 ;
	out[15] |= in[103] << 4 ;

	out[12] |= in[104] << 8 ;
	out[13] |= in[105] << 8 ;
	out[14] |= in[106] << 8 ;
	out[15] |= in[107] << 8 ;

	out[12] |= in[108] << 12 ;
	out[13] |= in[109] << 12 ;
	out[14] |= in[110] << 12 ;
	out[15] |= in[111] << 12 ;

	out[12] |= in[112] << 16 ;
	out[13] |= in[113] << 16 ;
	out[14] |= in[114] << 16 ;
	out[15] |= in[115] << 16 ;

	out[12] |= in[116] << 20 ;
	out[13] |= in[117] << 20 ;
	out[14] |= in[118] << 20 ;
	out[15] |= in[119] << 20 ;

	out[12] |= in[120] << 24 ;
	out[13] |= in[121] << 24 ;
	out[14] |= in[122] << 24 ;
	out[15] |= in[123] << 24 ;

	out[12] |= in[124] << 28 ;
	out[13] |= in[125] << 28 ;
	out[14] |= in[126] << 28 ;
	out[15] |= in[127] << 28 ;
}


// 5-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c5(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 5 ;
	out[1] |= in[5] << 5 ;
	out[2] |= in[6] << 5 ;
	out[3] |= in[7] << 5 ;

	out[0] |= in[8] << 10 ;
	out[1] |= in[9] << 10 ;
	out[2] |= in[10] << 10 ;
	out[3] |= in[11] << 10 ;

	out[0] |= in[12] << 15 ;
	out[1] |= in[13] << 15 ;
	out[2] |= in[14] << 15 ;
	out[3] |= in[15] << 15 ;

	out[0] |= in[16] << 20 ;
	out[1] |= in[17] << 20 ;
	out[2] |= in[18] << 20 ;
	out[3] |= in[19] << 20 ;

	out[0] |= in[20] << 25 ;
	out[1] |= in[21] << 25 ;
	out[2] |= in[22] << 25 ;
	out[3] |= in[23] << 25 ;

	out[0] |= in[24] << 30 ;
	out[1] |= in[25] << 30 ;
	out[2] |= in[26] << 30 ;
	out[3] |= in[27] << 30 ;

	out[4] = in[24] >> ( 32 - 30 ) ;
	out[5] = in[25] >> ( 32 - 30 ) ;
	out[6] = in[26] >> ( 32 - 30 ) ;
	out[7] = in[27] >> ( 32 - 30 ) ;

	out[4] |= in[28] << 3 ;
	out[5] |= in[29] << 3 ;
	out[6] |= in[30] << 3 ;
	out[7] |= in[31] << 3 ;

	out[4] |= in[32] << 8 ;
	out[5] |= in[33] << 8 ;
	out[6] |= in[34] << 8 ;
	out[7] |= in[35] << 8 ;

	out[4] |= in[36] << 13 ;
	out[5] |= in[37] << 13 ;
	out[6] |= in[38] << 13 ;
	out[7] |= in[39] << 13 ;

	out[4] |= in[40] << 18 ;
	out[5] |= in[41] << 18 ;
	out[6] |= in[42] << 18 ;
	out[7] |= in[43] << 18 ;

	out[4] |= in[44] << 23 ;
	out[5] |= in[45] << 23 ;
	out[6] |= in[46] << 23 ;
	out[7] |= in[47] << 23 ;

	out[4] |= in[48] << 28 ;
	out[5] |= in[49] << 28 ;
	out[6] |= in[50] << 28 ;
	out[7] |= in[51] << 28 ;

	out[8] = in[48] >> ( 32 - 28 ) ;
	out[9] = in[49] >> ( 32 - 28 ) ;
	out[10] = in[50] >> ( 32 - 28 ) ;
	out[11] = in[51] >> ( 32 - 28 ) ;

	out[8] |= in[52] << 1 ;
	out[9] |= in[53] << 1 ;
	out[10] |= in[54] << 1 ;
	out[11] |= in[55] << 1 ;

	out[8] |= in[56] << 6 ;
	out[9] |= in[57] << 6 ;
	out[10] |= in[58] << 6 ;
	out[11] |= in[59] << 6 ;

	out[8] |= in[60] << 11 ;
	out[9] |= in[61] << 11 ;
	out[10] |= in[62] << 11 ;
	out[11] |= in[63] << 11 ;

	out[8] |= in[64] << 16 ;
	out[9] |= in[65] << 16 ;
	out[10] |= in[66] << 16 ;
	out[11] |= in[67] << 16 ;

	out[8] |= in[68] << 21 ;
	out[9] |= in[69] << 21 ;
	out[10] |= in[70] << 21 ;
	out[11] |= in[71] << 21 ;

	out[8] |= in[72] << 26 ;
	out[9] |= in[73] << 26 ;
	out[10] |= in[74] << 26 ;
	out[11] |= in[75] << 26 ;

	out[8] |= in[76] << 31 ;
	out[9] |= in[77] << 31 ;
	out[10] |= in[78] << 31 ;
	out[11] |= in[79] << 31 ;

	out[12] = in[76] >> ( 32 - 31 ) ;
	out[13] = in[77] >> ( 32 - 31 ) ;
	out[14] = in[78] >> ( 32 - 31 ) ;
	out[15] = in[79] >> ( 32 - 31 ) ;

	out[12] |= in[80] << 4 ;
	out[13] |= in[81] << 4 ;
	out[14] |= in[82] << 4 ;
	out[15] |= in[83] << 4 ;

	out[12] |= in[84] << 9 ;
	out[13] |= in[85] << 9 ;
	out[14] |= in[86] << 9 ;
	out[15] |= in[87] << 9 ;

	out[12] |= in[88] << 14 ;
	out[13] |= in[89] << 14 ;
	out[14] |= in[90] << 14 ;
	out[15] |= in[91] << 14 ;

	out[12] |= in[92] << 19 ;
	out[13] |= in[93] << 19 ;
	out[14] |= in[94] << 19 ;
	out[15] |= in[95] << 19 ;

	out[12] |= in[96] << 24 ;
	out[13] |= in[97] << 24 ;
	out[14] |= in[98] << 24 ;
	out[15] |= in[99] << 24 ;

	out[12] |= in[100] << 29 ;
	out[13] |= in[101] << 29 ;
	out[14] |= in[102] << 29 ;
	out[15] |= in[103] << 29 ;

	out[16] = in[100] >> ( 32 - 29 ) ;
	out[17] = in[101] >> ( 32 - 29 ) ;
	out[18] = in[102] >> ( 32 - 29 ) ;
	out[19] = in[103] >> ( 32 - 29 ) ;

	out[16] |= in[104] << 2 ;
	out[17] |= in[105] << 2 ;
	out[18] |= in[106] << 2 ;
	out[19] |= in[107] << 2 ;

	out[16] |= in[108] << 7 ;
	out[17] |= in[109] << 7 ;
	out[18] |= in[110] << 7 ;
	out[19] |= in[111] << 7 ;

	out[16] |= in[112] << 12 ;
	out[17] |= in[113] << 12 ;
	out[18] |= in[114] << 12 ;
	out[19] |= in[115] << 12 ;

	out[16] |= in[116] << 17 ;
	out[17] |= in[117] << 17 ;
	out[18] |= in[118] << 17 ;
	out[19] |= in[119] << 17 ;

	out[16] |= in[120] << 22 ;
	out[17] |= in[121] << 22 ;
	out[18] |= in[122] << 22 ;
	out[19] |= in[123] << 22 ;

	out[16] |= in[124] << 27 ;
	out[17] |= in[125] << 27 ;
	out[18] |= in[126] << 27 ;
	out[19] |= in[127] << 27 ;
}


// 6-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c6(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 6 ;
	out[1] |= in[5] << 6 ;
	out[2] |= in[6] << 6 ;
	out[3] |= in[7] << 6 ;

	out[0] |= in[8] << 12 ;
	out[1] |= in[9] << 12 ;
	out[2] |= in[10] << 12 ;
	out[3] |= in[11] << 12 ;

	out[0] |= in[12] << 18 ;
	out[1] |= in[13] << 18 ;
	out[2] |= in[14] << 18 ;
	out[3] |= in[15] << 18 ;

	out[0] |= in[16] << 24 ;
	out[1] |= in[17] << 24 ;
	out[2] |= in[18] << 24 ;
	out[3] |= in[19] << 24 ;

	out[0] |= in[20] << 30 ;
	out[1] |= in[21] << 30 ;
	out[2] |= in[22] << 30 ;
	out[3] |= in[23] << 30 ;

	out[4] = in[20] >> ( 32 - 30 ) ;
	out[5] = in[21] >> ( 32 - 30 ) ;
	out[6] = in[22] >> ( 32 - 30 ) ;
	out[7] = in[23] >> ( 32 - 30 ) ;

	out[4] |= in[24] << 4 ;
	out[5] |= in[25] << 4 ;
	out[6] |= in[26] << 4 ;
	out[7] |= in[27] << 4 ;

	out[4] |= in[28] << 10 ;
	out[5] |= in[29] << 10 ;
	out[6] |= in[30] << 10 ;
	out[7] |= in[31] << 10 ;

	out[4] |= in[32] << 16 ;
	out[5] |= in[33] << 16 ;
	out[6] |= in[34] << 16 ;
	out[7] |= in[35] << 16 ;

	out[4] |= in[36] << 22 ;
	out[5] |= in[37] << 22 ;
	out[6] |= in[38] << 22 ;
	out[7] |= in[39] << 22 ;

	out[4] |= in[40] << 28 ;
	out[5] |= in[41] << 28 ;
	out[6] |= in[42] << 28 ;
	out[7] |= in[43] << 28 ;

	out[8] = in[40] >> ( 32 - 28 ) ;
	out[9] = in[41] >> ( 32 - 28 ) ;
	out[10] = in[42] >> ( 32 - 28 ) ;
	out[11] = in[43] >> ( 32 - 28 ) ;

	out[8] |= in[44] << 2 ;
	out[9] |= in[45] << 2 ;
	out[10] |= in[46] << 2 ;
	out[11] |= in[47] << 2 ;

	out[8] |= in[48] << 8 ;
	out[9] |= in[49] << 8 ;
	out[10] |= in[50] << 8 ;
	out[11] |= in[51] << 8 ;

	out[8] |= in[52] << 14 ;
	out[9] |= in[53] << 14 ;
	out[10] |= in[54] << 14 ;
	out[11] |= in[55] << 14 ;

	out[8] |= in[56] << 20 ;
	out[9] |= in[57] << 20 ;
	out[10] |= in[58] << 20 ;
	out[11] |= in[59] << 20 ;

	out[8] |= in[60] << 26 ;
	out[9] |= in[61] << 26 ;
	out[10] |= in[62] << 26 ;
	out[11] |= in[63] << 26 ;

	out[12] = in[64] << 0 ;
	out[13] = in[65] << 0 ;
	out[14] = in[66] << 0 ;
	out[15] = in[67] << 0 ;

	out[12] |= in[68] << 6 ;
	out[13] |= in[69] << 6 ;
	out[14] |= in[70] << 6 ;
	out[15] |= in[71] << 6 ;

	out[12] |= in[72] << 12 ;
	out[13] |= in[73] << 12 ;
	out[14] |= in[74] << 12 ;
	out[15] |= in[75] << 12 ;

	out[12] |= in[76] << 18 ;
	out[13] |= in[77] << 18 ;
	out[14] |= in[78] << 18 ;
	out[15] |= in[79] << 18 ;

	out[12] |= in[80] << 24 ;
	out[13] |= in[81] << 24 ;
	out[14] |= in[82] << 24 ;
	out[15] |= in[83] << 24 ;

	out[12] |= in[84] << 30 ;
	out[13] |= in[85] << 30 ;
	out[14] |= in[86] << 30 ;
	out[15] |= in[87] << 30 ;

	out[16] = in[84] >> ( 32 - 30 ) ;
	out[17] = in[85] >> ( 32 - 30 ) ;
	out[18] = in[86] >> ( 32 - 30 ) ;
	out[19] = in[87] >> ( 32 - 30 ) ;

	out[16] |= in[88] << 4 ;
	out[17] |= in[89] << 4 ;
	out[18] |= in[90] << 4 ;
	out[19] |= in[91] << 4 ;

	out[16] |= in[92] << 10 ;
	out[17] |= in[93] << 10 ;
	out[18] |= in[94] << 10 ;
	out[19] |= in[95] << 10 ;

	out[16] |= in[96] << 16 ;
	out[17] |= in[97] << 16 ;
	out[18] |= in[98] << 16 ;
	out[19] |= in[99] << 16 ;

	out[16] |= in[100] << 22 ;
	out[17] |= in[101] << 22 ;
	out[18] |= in[102] << 22 ;
	out[19] |= in[103] << 22 ;

	out[16] |= in[104] << 28 ;
	out[17] |= in[105] << 28 ;
	out[18] |= in[106] << 28 ;
	out[19] |= in[107] << 28 ;

	out[20] = in[104] >> ( 32 - 28 ) ;
	out[21] = in[105] >> ( 32 - 28 ) ;
	out[22] = in[106] >> ( 32 - 28 ) ;
	out[23] = in[107] >> ( 32 - 28 ) ;

	out[20] |= in[108] << 2 ;
	out[21] |= in[109] << 2 ;
	out[22] |= in[110] << 2 ;
	out[23] |= in[111] << 2 ;

	out[20] |= in[112] << 8 ;
	out[21] |= in[113] << 8 ;
	out[22] |= in[114] << 8 ;
	out[23] |= in[115] << 8 ;

	out[20] |= in[116] << 14 ;
	out[21] |= in[117] << 14 ;
	out[22] |= in[118] << 14 ;
	out[23] |= in[119] << 14 ;

	out[20] |= in[120] << 20 ;
	out[21] |= in[121] << 20 ;
	out[22] |= in[122] << 20 ;
	out[23] |= in[123] << 20 ;

	out[20] |= in[124] << 26 ;
	out[21] |= in[125] << 26 ;
	out[22] |= in[126] << 26 ;
	out[23] |= in[127] << 26 ;
}


// 7-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c7(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 7 ;
	out[1] |= in[5] << 7 ;
	out[2] |= in[6] << 7 ;
	out[3] |= in[7] << 7 ;

	out[0] |= in[8] << 14 ;
	out[1] |= in[9] << 14 ;
	out[2] |= in[10] << 14 ;
	out[3] |= in[11] << 14 ;

	out[0] |= in[12] << 21 ;
	out[1] |= in[13] << 21 ;
	out[2] |= in[14] << 21 ;
	out[3] |= in[15] << 21 ;

	out[0] |= in[16] << 28 ;
	out[1] |= in[17] << 28 ;
	out[2] |= in[18] << 28 ;
	out[3] |= in[19] << 28 ;

	out[4] = in[16] >> ( 32 - 28 ) ;
	out[5] = in[17] >> ( 32 - 28 ) ;
	out[6] = in[18] >> ( 32 - 28 ) ;
	out[7] = in[19] >> ( 32 - 28 ) ;

	out[4] |= in[20] << 3 ;
	out[5] |= in[21] << 3 ;
	out[6] |= in[22] << 3 ;
	out[7] |= in[23] << 3 ;

	out[4] |= in[24] << 10 ;
	out[5] |= in[25] << 10 ;
	out[6] |= in[26] << 10 ;
	out[7] |= in[27] << 10 ;

	out[4] |= in[28] << 17 ;
	out[5] |= in[29] << 17 ;
	out[6] |= in[30] << 17 ;
	out[7] |= in[31] << 17 ;

	out[4] |= in[32] << 24 ;
	out[5] |= in[33] << 24 ;
	out[6] |= in[34] << 24 ;
	out[7] |= in[35] << 24 ;

	out[4] |= in[36] << 31 ;
	out[5] |= in[37] << 31 ;
	out[6] |= in[38] << 31 ;
	out[7] |= in[39] << 31 ;

	out[8] = in[36] >> ( 32 - 31 ) ;
	out[9] = in[37] >> ( 32 - 31 ) ;
	out[10] = in[38] >> ( 32 - 31 ) ;
	out[11] = in[39] >> ( 32 - 31 ) ;

	out[8] |= in[40] << 6 ;
	out[9] |= in[41] << 6 ;
	out[10] |= in[42] << 6 ;
	out[11] |= in[43] << 6 ;

	out[8] |= in[44] << 13 ;
	out[9] |= in[45] << 13 ;
	out[10] |= in[46] << 13 ;
	out[11] |= in[47] << 13 ;

	out[8] |= in[48] << 20 ;
	out[9] |= in[49] << 20 ;
	out[10] |= in[50] << 20 ;
	out[11] |= in[51] << 20 ;

	out[8] |= in[52] << 27 ;
	out[9] |= in[53] << 27 ;
	out[10] |= in[54] << 27 ;
	out[11] |= in[55] << 27 ;

	out[12] = in[52] >> ( 32 - 27 ) ;
	out[13] = in[53] >> ( 32 - 27 ) ;
	out[14] = in[54] >> ( 32 - 27 ) ;
	out[15] = in[55] >> ( 32 - 27 ) ;

	out[12] |= in[56] << 2 ;
	out[13] |= in[57] << 2 ;
	out[14] |= in[58] << 2 ;
	out[15] |= in[59] << 2 ;

	out[12] |= in[60] << 9 ;
	out[13] |= in[61] << 9 ;
	out[14] |= in[62] << 9 ;
	out[15] |= in[63] << 9 ;

	out[12] |= in[64] << 16 ;
	out[13] |= in[65] << 16 ;
	out[14] |= in[66] << 16 ;
	out[15] |= in[67] << 16 ;

	out[12] |= in[68] << 23 ;
	out[13] |= in[69] << 23 ;
	out[14] |= in[70] << 23 ;
	out[15] |= in[71] << 23 ;

	out[12] |= in[72] << 30 ;
	out[13] |= in[73] << 30 ;
	out[14] |= in[74] << 30 ;
	out[15] |= in[75] << 30 ;

	out[16] = in[72] >> ( 32 - 30 ) ;
	out[17] = in[73] >> ( 32 - 30 ) ;
	out[18] = in[74] >> ( 32 - 30 ) ;
	out[19] = in[75] >> ( 32 - 30 ) ;

	out[16] |= in[76] << 5 ;
	out[17] |= in[77] << 5 ;
	out[18] |= in[78] << 5 ;
	out[19] |= in[79] << 5 ;

	out[16] |= in[80] << 12 ;
	out[17] |= in[81] << 12 ;
	out[18] |= in[82] << 12 ;
	out[19] |= in[83] << 12 ;

	out[16] |= in[84] << 19 ;
	out[17] |= in[85] << 19 ;
	out[18] |= in[86] << 19 ;
	out[19] |= in[87] << 19 ;

	out[16] |= in[88] << 26 ;
	out[17] |= in[89] << 26 ;
	out[18] |= in[90] << 26 ;
	out[19] |= in[91] << 26 ;

	out[20] = in[88] >> ( 32 - 26 ) ;
	out[21] = in[89] >> ( 32 - 26 ) ;
	out[22] = in[90] >> ( 32 - 26 ) ;
	out[23] = in[91] >> ( 32 - 26 ) ;

	out[20] |= in[92] << 1 ;
	out[21] |= in[93] << 1 ;
	out[22] |= in[94] << 1 ;
	out[23] |= in[95] << 1 ;

	out[20] |= in[96] << 8 ;
	out[21] |= in[97] << 8 ;
	out[22] |= in[98] << 8 ;
	out[23] |= in[99] << 8 ;

	out[20] |= in[100] << 15 ;
	out[21] |= in[101] << 15 ;
	out[22] |= in[102] << 15 ;
	out[23] |= in[103] << 15 ;

	out[20] |= in[104] << 22 ;
	out[21] |= in[105] << 22 ;
	out[22] |= in[106] << 22 ;
	out[23] |= in[107] << 22 ;

	out[20] |= in[108] << 29 ;
	out[21] |= in[109] << 29 ;
	out[22] |= in[110] << 29 ;
	out[23] |= in[111] << 29 ;

	out[24] = in[108] >> ( 32 - 29 ) ;
	out[25] = in[109] >> ( 32 - 29 ) ;
	out[26] = in[110] >> ( 32 - 29 ) ;
	out[27] = in[111] >> ( 32 - 29 ) ;

	out[24] |= in[112] << 4 ;
	out[25] |= in[113] << 4 ;
	out[26] |= in[114] << 4 ;
	out[27] |= in[115] << 4 ;

	out[24] |= in[116] << 11 ;
	out[25] |= in[117] << 11 ;
	out[26] |= in[118] << 11 ;
	out[27] |= in[119] << 11 ;

	out[24] |= in[120] << 18 ;
	out[25] |= in[121] << 18 ;
	out[26] |= in[122] << 18 ;
	out[27] |= in[123] << 18 ;

	out[24] |= in[124] << 25 ;
	out[25] |= in[125] << 25 ;
	out[26] |= in[126] << 25 ;
	out[27] |= in[127] << 25 ;
}


// 8-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c8(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 8 ;
	out[1] |= in[5] << 8 ;
	out[2] |= in[6] << 8 ;
	out[3] |= in[7] << 8 ;

	out[0] |= in[8] << 16 ;
	out[1] |= in[9] << 16 ;
	out[2] |= in[10] << 16 ;
	out[3] |= in[11] << 16 ;

	out[0] |= in[12] << 24 ;
	out[1] |= in[13] << 24 ;
	out[2] |= in[14] << 24 ;
	out[3] |= in[15] << 24 ;

	out[4] = in[16] << 0 ;
	out[5] = in[17] << 0 ;
	out[6] = in[18] << 0 ;
	out[7] = in[19] << 0 ;

	out[4] |= in[20] << 8 ;
	out[5] |= in[21] << 8 ;
	out[6] |= in[22] << 8 ;
	out[7] |= in[23] << 8 ;

	out[4] |= in[24] << 16 ;
	out[5] |= in[25] << 16 ;
	out[6] |= in[26] << 16 ;
	out[7] |= in[27] << 16 ;

	out[4] |= in[28] << 24 ;
	out[5] |= in[29] << 24 ;
	out[6] |= in[30] << 24 ;
	out[7] |= in[31] << 24 ;

	out[8] = in[32] << 0 ;
	out[9] = in[33] << 0 ;
	out[10] = in[34] << 0 ;
	out[11] = in[35] << 0 ;

	out[8] |= in[36] << 8 ;
	out[9] |= in[37] << 8 ;
	out[10] |= in[38] << 8 ;
	out[11] |= in[39] << 8 ;

	out[8] |= in[40] << 16 ;
	out[9] |= in[41] << 16 ;
	out[10] |= in[42] << 16 ;
	out[11] |= in[43] << 16 ;

	out[8] |= in[44] << 24 ;
	out[9] |= in[45] << 24 ;
	out[10] |= in[46] << 24 ;
	out[11] |= in[47] << 24 ;

	out[12] = in[48] << 0 ;
	out[13] = in[49] << 0 ;
	out[14] = in[50] << 0 ;
	out[15] = in[51] << 0 ;

	out[12] |= in[52] << 8 ;
	out[13] |= in[53] << 8 ;
	out[14] |= in[54] << 8 ;
	out[15] |= in[55] << 8 ;

	out[12] |= in[56] << 16 ;
	out[13] |= in[57] << 16 ;
	out[14] |= in[58] << 16 ;
	out[15] |= in[59] << 16 ;

	out[12] |= in[60] << 24 ;
	out[13] |= in[61] << 24 ;
	out[14] |= in[62] << 24 ;
	out[15] |= in[63] << 24 ;

	out[16] = in[64] << 0 ;
	out[17] = in[65] << 0 ;
	out[18] = in[66] << 0 ;
	out[19] = in[67] << 0 ;

	out[16] |= in[68] << 8 ;
	out[17] |= in[69] << 8 ;
	out[18] |= in[70] << 8 ;
	out[19] |= in[71] << 8 ;

	out[16] |= in[72] << 16 ;
	out[17] |= in[73] << 16 ;
	out[18] |= in[74] << 16 ;
	out[19] |= in[75] << 16 ;

	out[16] |= in[76] << 24 ;
	out[17] |= in[77] << 24 ;
	out[18] |= in[78] << 24 ;
	out[19] |= in[79] << 24 ;

	out[20] = in[80] << 0 ;
	out[21] = in[81] << 0 ;
	out[22] = in[82] << 0 ;
	out[23] = in[83] << 0 ;

	out[20] |= in[84] << 8 ;
	out[21] |= in[85] << 8 ;
	out[22] |= in[86] << 8 ;
	out[23] |= in[87] << 8 ;

	out[20] |= in[88] << 16 ;
	out[21] |= in[89] << 16 ;
	out[22] |= in[90] << 16 ;
	out[23] |= in[91] << 16 ;

	out[20] |= in[92] << 24 ;
	out[21] |= in[93] << 24 ;
	out[22] |= in[94] << 24 ;
	out[23] |= in[95] << 24 ;

	out[24] = in[96] << 0 ;
	out[25] = in[97] << 0 ;
	out[26] = in[98] << 0 ;
	out[27] = in[99] << 0 ;

	out[24] |= in[100] << 8 ;
	out[25] |= in[101] << 8 ;
	out[26] |= in[102] << 8 ;
	out[27] |= in[103] << 8 ;

	out[24] |= in[104] << 16 ;
	out[25] |= in[105] << 16 ;
	out[26] |= in[106] << 16 ;
	out[27] |= in[107] << 16 ;

	out[24] |= in[108] << 24 ;
	out[25] |= in[109] << 24 ;
	out[26] |= in[110] << 24 ;
	out[27] |= in[111] << 24 ;

	out[28] = in[112] << 0 ;
	out[29] = in[113] << 0 ;
	out[30] = in[114] << 0 ;
	out[31] = in[115] << 0 ;

	out[28] |= in[116] << 8 ;
	out[29] |= in[117] << 8 ;
	out[30] |= in[118] << 8 ;
	out[31] |= in[119] << 8 ;

	out[28] |= in[120] << 16 ;
	out[29] |= in[121] << 16 ;
	out[30] |= in[122] << 16 ;
	out[31] |= in[123] << 16 ;

	out[28] |= in[124] << 24 ;
	out[29] |= in[125] << 24 ;
	out[30] |= in[126] << 24 ;
	out[31] |= in[127] << 24 ;
}


// 9-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c9(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 9 ;
	out[1] |= in[5] << 9 ;
	out[2] |= in[6] << 9 ;
	out[3] |= in[7] << 9 ;

	out[0] |= in[8] << 18 ;
	out[1] |= in[9] << 18 ;
	out[2] |= in[10] << 18 ;
	out[3] |= in[11] << 18 ;

	out[0] |= in[12] << 27 ;
	out[1] |= in[13] << 27 ;
	out[2] |= in[14] << 27 ;
	out[3] |= in[15] << 27 ;

	out[4] = in[12] >> ( 32 - 27 ) ;
	out[5] = in[13] >> ( 32 - 27 ) ;
	out[6] = in[14] >> ( 32 - 27 ) ;
	out[7] = in[15] >> ( 32 - 27 ) ;

	out[4] |= in[16] << 4 ;
	out[5] |= in[17] << 4 ;
	out[6] |= in[18] << 4 ;
	out[7] |= in[19] << 4 ;

	out[4] |= in[20] << 13 ;
	out[5] |= in[21] << 13 ;
	out[6] |= in[22] << 13 ;
	out[7] |= in[23] << 13 ;

	out[4] |= in[24] << 22 ;
	out[5] |= in[25] << 22 ;
	out[6] |= in[26] << 22 ;
	out[7] |= in[27] << 22 ;

	out[4] |= in[28] << 31 ;
	out[5] |= in[29] << 31 ;
	out[6] |= in[30] << 31 ;
	out[7] |= in[31] << 31 ;

	out[8] = in[28] >> ( 32 - 31 ) ;
	out[9] = in[29] >> ( 32 - 31 ) ;
	out[10] = in[30] >> ( 32 - 31 ) ;
	out[11] = in[31] >> ( 32 - 31 ) ;

	out[8] |= in[32] << 8 ;
	out[9] |= in[33] << 8 ;
	out[10] |= in[34] << 8 ;
	out[11] |= in[35] << 8 ;

	out[8] |= in[36] << 17 ;
	out[9] |= in[37] << 17 ;
	out[10] |= in[38] << 17 ;
	out[11] |= in[39] << 17 ;

	out[8] |= in[40] << 26 ;
	out[9] |= in[41] << 26 ;
	out[10] |= in[42] << 26 ;
	out[11] |= in[43] << 26 ;

	out[12] = in[40] >> ( 32 - 26 ) ;
	out[13] = in[41] >> ( 32 - 26 ) ;
	out[14] = in[42] >> ( 32 - 26 ) ;
	out[15] = in[43] >> ( 32 - 26 ) ;

	out[12] |= in[44] << 3 ;
	out[13] |= in[45] << 3 ;
	out[14] |= in[46] << 3 ;
	out[15] |= in[47] << 3 ;

	out[12] |= in[48] << 12 ;
	out[13] |= in[49] << 12 ;
	out[14] |= in[50] << 12 ;
	out[15] |= in[51] << 12 ;

	out[12] |= in[52] << 21 ;
	out[13] |= in[53] << 21 ;
	out[14] |= in[54] << 21 ;
	out[15] |= in[55] << 21 ;

	out[12] |= in[56] << 30 ;
	out[13] |= in[57] << 30 ;
	out[14] |= in[58] << 30 ;
	out[15] |= in[59] << 30 ;

	out[16] = in[56] >> ( 32 - 30 ) ;
	out[17] = in[57] >> ( 32 - 30 ) ;
	out[18] = in[58] >> ( 32 - 30 ) ;
	out[19] = in[59] >> ( 32 - 30 ) ;

	out[16] |= in[60] << 7 ;
	out[17] |= in[61] << 7 ;
	out[18] |= in[62] << 7 ;
	out[19] |= in[63] << 7 ;

	out[16] |= in[64] << 16 ;
	out[17] |= in[65] << 16 ;
	out[18] |= in[66] << 16 ;
	out[19] |= in[67] << 16 ;

	out[16] |= in[68] << 25 ;
	out[17] |= in[69] << 25 ;
	out[18] |= in[70] << 25 ;
	out[19] |= in[71] << 25 ;

	out[20] = in[68] >> ( 32 - 25 ) ;
	out[21] = in[69] >> ( 32 - 25 ) ;
	out[22] = in[70] >> ( 32 - 25 ) ;
	out[23] = in[71] >> ( 32 - 25 ) ;

	out[20] |= in[72] << 2 ;
	out[21] |= in[73] << 2 ;
	out[22] |= in[74] << 2 ;
	out[23] |= in[75] << 2 ;

	out[20] |= in[76] << 11 ;
	out[21] |= in[77] << 11 ;
	out[22] |= in[78] << 11 ;
	out[23] |= in[79] << 11 ;

	out[20] |= in[80] << 20 ;
	out[21] |= in[81] << 20 ;
	out[22] |= in[82] << 20 ;
	out[23] |= in[83] << 20 ;

	out[20] |= in[84] << 29 ;
	out[21] |= in[85] << 29 ;
	out[22] |= in[86] << 29 ;
	out[23] |= in[87] << 29 ;

	out[24] = in[84] >> ( 32 - 29 ) ;
	out[25] = in[85] >> ( 32 - 29 ) ;
	out[26] = in[86] >> ( 32 - 29 ) ;
	out[27] = in[87] >> ( 32 - 29 ) ;

	out[24] |= in[88] << 6 ;
	out[25] |= in[89] << 6 ;
	out[26] |= in[90] << 6 ;
	out[27] |= in[91] << 6 ;

	out[24] |= in[92] << 15 ;
	out[25] |= in[93] << 15 ;
	out[26] |= in[94] << 15 ;
	out[27] |= in[95] << 15 ;

	out[24] |= in[96] << 24 ;
	out[25] |= in[97] << 24 ;
	out[26] |= in[98] << 24 ;
	out[27] |= in[99] << 24 ;

	out[28] = in[96] >> ( 32 - 24 ) ;
	out[29] = in[97] >> ( 32 - 24 ) ;
	out[30] = in[98] >> ( 32 - 24 ) ;
	out[31] = in[99] >> ( 32 - 24 ) ;

	out[28] |= in[100] << 1 ;
	out[29] |= in[101] << 1 ;
	out[30] |= in[102] << 1 ;
	out[31] |= in[103] << 1 ;

	out[28] |= in[104] << 10 ;
	out[29] |= in[105] << 10 ;
	out[30] |= in[106] << 10 ;
	out[31] |= in[107] << 10 ;

	out[28] |= in[108] << 19 ;
	out[29] |= in[109] << 19 ;
	out[30] |= in[110] << 19 ;
	out[31] |= in[111] << 19 ;

	out[28] |= in[112] << 28 ;
	out[29] |= in[113] << 28 ;
	out[30] |= in[114] << 28 ;
	out[31] |= in[115] << 28 ;

	out[32] = in[112] >> ( 32 - 28 ) ;
	out[33] = in[113] >> ( 32 - 28 ) ;
	out[34] = in[114] >> ( 32 - 28 ) ;
	out[35] = in[115] >> ( 32 - 28 ) ;

	out[32] |= in[116] << 5 ;
	out[33] |= in[117] << 5 ;
	out[34] |= in[118] << 5 ;
	out[35] |= in[119] << 5 ;

	out[32] |= in[120] << 14 ;
	out[33] |= in[121] << 14 ;
	out[34] |= in[122] << 14 ;
	out[35] |= in[123] << 14 ;

	out[32] |= in[124] << 23 ;
	out[33] |= in[125] << 23 ;
	out[34] |= in[126] << 23 ;
	out[35] |= in[127] << 23 ;
}


// 10-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c10(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 10 ;
	out[1] |= in[5] << 10 ;
	out[2] |= in[6] << 10 ;
	out[3] |= in[7] << 10 ;

	out[0] |= in[8] << 20 ;
	out[1] |= in[9] << 20 ;
	out[2] |= in[10] << 20 ;
	out[3] |= in[11] << 20 ;

	out[0] |= in[12] << 30 ;
	out[1] |= in[13] << 30 ;
	out[2] |= in[14] << 30 ;
	out[3] |= in[15] << 30 ;

	out[4] = in[12] >> ( 32 - 30 ) ;
	out[5] = in[13] >> ( 32 - 30 ) ;
	out[6] = in[14] >> ( 32 - 30 ) ;
	out[7] = in[15] >> ( 32 - 30 ) ;

	out[4] |= in[16] << 8 ;
	out[5] |= in[17] << 8 ;
	out[6] |= in[18] << 8 ;
	out[7] |= in[19] << 8 ;

	out[4] |= in[20] << 18 ;
	out[5] |= in[21] << 18 ;
	out[6] |= in[22] << 18 ;
	out[7] |= in[23] << 18 ;

	out[4] |= in[24] << 28 ;
	out[5] |= in[25] << 28 ;
	out[6] |= in[26] << 28 ;
	out[7] |= in[27] << 28 ;

	out[8] = in[24] >> ( 32 - 28 ) ;
	out[9] = in[25] >> ( 32 - 28 ) ;
	out[10] = in[26] >> ( 32 - 28 ) ;
	out[11] = in[27] >> ( 32 - 28 ) ;

	out[8] |= in[28] << 6 ;
	out[9] |= in[29] << 6 ;
	out[10] |= in[30] << 6 ;
	out[11] |= in[31] << 6 ;

	out[8] |= in[32] << 16 ;
	out[9] |= in[33] << 16 ;
	out[10] |= in[34] << 16 ;
	out[11] |= in[35] << 16 ;

	out[8] |= in[36] << 26 ;
	out[9] |= in[37] << 26 ;
	out[10] |= in[38] << 26 ;
	out[11] |= in[39] << 26 ;

	out[12] = in[36] >> ( 32 - 26 ) ;
	out[13] = in[37] >> ( 32 - 26 ) ;
	out[14] = in[38] >> ( 32 - 26 ) ;
	out[15] = in[39] >> ( 32 - 26 ) ;

	out[12] |= in[40] << 4 ;
	out[13] |= in[41] << 4 ;
	out[14] |= in[42] << 4 ;
	out[15] |= in[43] << 4 ;

	out[12] |= in[44] << 14 ;
	out[13] |= in[45] << 14 ;
	out[14] |= in[46] << 14 ;
	out[15] |= in[47] << 14 ;

	out[12] |= in[48] << 24 ;
	out[13] |= in[49] << 24 ;
	out[14] |= in[50] << 24 ;
	out[15] |= in[51] << 24 ;

	out[16] = in[48] >> ( 32 - 24 ) ;
	out[17] = in[49] >> ( 32 - 24 ) ;
	out[18] = in[50] >> ( 32 - 24 ) ;
	out[19] = in[51] >> ( 32 - 24 ) ;

	out[16] |= in[52] << 2 ;
	out[17] |= in[53] << 2 ;
	out[18] |= in[54] << 2 ;
	out[19] |= in[55] << 2 ;

	out[16] |= in[56] << 12 ;
	out[17] |= in[57] << 12 ;
	out[18] |= in[58] << 12 ;
	out[19] |= in[59] << 12 ;

	out[16] |= in[60] << 22 ;
	out[17] |= in[61] << 22 ;
	out[18] |= in[62] << 22 ;
	out[19] |= in[63] << 22 ;

	out[20] = in[64] << 0 ;
	out[21] = in[65] << 0 ;
	out[22] = in[66] << 0 ;
	out[23] = in[67] << 0 ;

	out[20] |= in[68] << 10 ;
	out[21] |= in[69] << 10 ;
	out[22] |= in[70] << 10 ;
	out[23] |= in[71] << 10 ;

	out[20] |= in[72] << 20 ;
	out[21] |= in[73] << 20 ;
	out[22] |= in[74] << 20 ;
	out[23] |= in[75] << 20 ;

	out[20] |= in[76] << 30 ;
	out[21] |= in[77] << 30 ;
	out[22] |= in[78] << 30 ;
	out[23] |= in[79] << 30 ;

	out[24] = in[76] >> ( 32 - 30 ) ;
	out[25] = in[77] >> ( 32 - 30 ) ;
	out[26] = in[78] >> ( 32 - 30 ) ;
	out[27] = in[79] >> ( 32 - 30 ) ;

	out[24] |= in[80] << 8 ;
	out[25] |= in[81] << 8 ;
	out[26] |= in[82] << 8 ;
	out[27] |= in[83] << 8 ;

	out[24] |= in[84] << 18 ;
	out[25] |= in[85] << 18 ;
	out[26] |= in[86] << 18 ;
	out[27] |= in[87] << 18 ;

	out[24] |= in[88] << 28 ;
	out[25] |= in[89] << 28 ;
	out[26] |= in[90] << 28 ;
	out[27] |= in[91] << 28 ;

	out[28] = in[88] >> ( 32 - 28 ) ;
	out[29] = in[89] >> ( 32 - 28 ) ;
	out[30] = in[90] >> ( 32 - 28 ) ;
	out[31] = in[91] >> ( 32 - 28 ) ;

	out[28] |= in[92] << 6 ;
	out[29] |= in[93] << 6 ;
	out[30] |= in[94] << 6 ;
	out[31] |= in[95] << 6 ;

	out[28] |= in[96] << 16 ;
	out[29] |= in[97] << 16 ;
	out[30] |= in[98] << 16 ;
	out[31] |= in[99] << 16 ;

	out[28] |= in[100] << 26 ;
	out[29] |= in[101] << 26 ;
	out[30] |= in[102] << 26 ;
	out[31] |= in[103] << 26 ;

	out[32] = in[100] >> ( 32 - 26 ) ;
	out[33] = in[101] >> ( 32 - 26 ) ;
	out[34] = in[102] >> ( 32 - 26 ) ;
	out[35] = in[103] >> ( 32 - 26 ) ;

	out[32] |= in[104] << 4 ;
	out[33] |= in[105] << 4 ;
	out[34] |= in[106] << 4 ;
	out[35] |= in[107] << 4 ;

	out[32] |= in[108] << 14 ;
	out[33] |= in[109] << 14 ;
	out[34] |= in[110] << 14 ;
	out[35] |= in[111] << 14 ;

	out[32] |= in[112] << 24 ;
	out[33] |= in[113] << 24 ;
	out[34] |= in[114] << 24 ;
	out[35] |= in[115] << 24 ;

	out[36] = in[112] >> ( 32 - 24 ) ;
	out[37] = in[113] >> ( 32 - 24 ) ;
	out[38] = in[114] >> ( 32 - 24 ) ;
	out[39] = in[115] >> ( 32 - 24 ) ;

	out[36] |= in[116] << 2 ;
	out[37] |= in[117] << 2 ;
	out[38] |= in[118] << 2 ;
	out[39] |= in[119] << 2 ;

	out[36] |= in[120] << 12 ;
	out[37] |= in[121] << 12 ;
	out[38] |= in[122] << 12 ;
	out[39] |= in[123] << 12 ;

	out[36] |= in[124] << 22 ;
	out[37] |= in[125] << 22 ;
	out[38] |= in[126] << 22 ;
	out[39] |= in[127] << 22 ;
}


// 11-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c11(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 11 ;
	out[1] |= in[5] << 11 ;
	out[2] |= in[6] << 11 ;
	out[3] |= in[7] << 11 ;

	out[0] |= in[8] << 22 ;
	out[1] |= in[9] << 22 ;
	out[2] |= in[10] << 22 ;
	out[3] |= in[11] << 22 ;

	out[4] = in[8] >> ( 32 - 22 ) ;
	out[5] = in[9] >> ( 32 - 22 ) ;
	out[6] = in[10] >> ( 32 - 22 ) ;
	out[7] = in[11] >> ( 32 - 22 ) ;

	out[4] |= in[12] << 1 ;
	out[5] |= in[13] << 1 ;
	out[6] |= in[14] << 1 ;
	out[7] |= in[15] << 1 ;

	out[4] |= in[16] << 12 ;
	out[5] |= in[17] << 12 ;
	out[6] |= in[18] << 12 ;
	out[7] |= in[19] << 12 ;

	out[4] |= in[20] << 23 ;
	out[5] |= in[21] << 23 ;
	out[6] |= in[22] << 23 ;
	out[7] |= in[23] << 23 ;

	out[8] = in[20] >> ( 32 - 23 ) ;
	out[9] = in[21] >> ( 32 - 23 ) ;
	out[10] = in[22] >> ( 32 - 23 ) ;
	out[11] = in[23] >> ( 32 - 23 ) ;

	out[8] |= in[24] << 2 ;
	out[9] |= in[25] << 2 ;
	out[10] |= in[26] << 2 ;
	out[11] |= in[27] << 2 ;

	out[8] |= in[28] << 13 ;
	out[9] |= in[29] << 13 ;
	out[10] |= in[30] << 13 ;
	out[11] |= in[31] << 13 ;

	out[8] |= in[32] << 24 ;
	out[9] |= in[33] << 24 ;
	out[10] |= in[34] << 24 ;
	out[11] |= in[35] << 24 ;

	out[12] = in[32] >> ( 32 - 24 ) ;
	out[13] = in[33] >> ( 32 - 24 ) ;
	out[14] = in[34] >> ( 32 - 24 ) ;
	out[15] = in[35] >> ( 32 - 24 ) ;

	out[12] |= in[36] << 3 ;
	out[13] |= in[37] << 3 ;
	out[14] |= in[38] << 3 ;
	out[15] |= in[39] << 3 ;

	out[12] |= in[40] << 14 ;
	out[13] |= in[41] << 14 ;
	out[14] |= in[42] << 14 ;
	out[15] |= in[43] << 14 ;

	out[12] |= in[44] << 25 ;
	out[13] |= in[45] << 25 ;
	out[14] |= in[46] << 25 ;
	out[15] |= in[47] << 25 ;

	out[16] = in[44] >> ( 32 - 25 ) ;
	out[17] = in[45] >> ( 32 - 25 ) ;
	out[18] = in[46] >> ( 32 - 25 ) ;
	out[19] = in[47] >> ( 32 - 25 ) ;

	out[16] |= in[48] << 4 ;
	out[17] |= in[49] << 4 ;
	out[18] |= in[50] << 4 ;
	out[19] |= in[51] << 4 ;

	out[16] |= in[52] << 15 ;
	out[17] |= in[53] << 15 ;
	out[18] |= in[54] << 15 ;
	out[19] |= in[55] << 15 ;

	out[16] |= in[56] << 26 ;
	out[17] |= in[57] << 26 ;
	out[18] |= in[58] << 26 ;
	out[19] |= in[59] << 26 ;

	out[20] = in[56] >> ( 32 - 26 ) ;
	out[21] = in[57] >> ( 32 - 26 ) ;
	out[22] = in[58] >> ( 32 - 26 ) ;
	out[23] = in[59] >> ( 32 - 26 ) ;

	out[20] |= in[60] << 5 ;
	out[21] |= in[61] << 5 ;
	out[22] |= in[62] << 5 ;
	out[23] |= in[63] << 5 ;

	out[20] |= in[64] << 16 ;
	out[21] |= in[65] << 16 ;
	out[22] |= in[66] << 16 ;
	out[23] |= in[67] << 16 ;

	out[20] |= in[68] << 27 ;
	out[21] |= in[69] << 27 ;
	out[22] |= in[70] << 27 ;
	out[23] |= in[71] << 27 ;

	out[24] = in[68] >> ( 32 - 27 ) ;
	out[25] = in[69] >> ( 32 - 27 ) ;
	out[26] = in[70] >> ( 32 - 27 ) ;
	out[27] = in[71] >> ( 32 - 27 ) ;

	out[24] |= in[72] << 6 ;
	out[25] |= in[73] << 6 ;
	out[26] |= in[74] << 6 ;
	out[27] |= in[75] << 6 ;

	out[24] |= in[76] << 17 ;
	out[25] |= in[77] << 17 ;
	out[26] |= in[78] << 17 ;
	out[27] |= in[79] << 17 ;

	out[24] |= in[80] << 28 ;
	out[25] |= in[81] << 28 ;
	out[26] |= in[82] << 28 ;
	out[27] |= in[83] << 28 ;

	out[28] = in[80] >> ( 32 - 28 ) ;
	out[29] = in[81] >> ( 32 - 28 ) ;
	out[30] = in[82] >> ( 32 - 28 ) ;
	out[31] = in[83] >> ( 32 - 28 ) ;

	out[28] |= in[84] << 7 ;
	out[29] |= in[85] << 7 ;
	out[30] |= in[86] << 7 ;
	out[31] |= in[87] << 7 ;

	out[28] |= in[88] << 18 ;
	out[29] |= in[89] << 18 ;
	out[30] |= in[90] << 18 ;
	out[31] |= in[91] << 18 ;

	out[28] |= in[92] << 29 ;
	out[29] |= in[93] << 29 ;
	out[30] |= in[94] << 29 ;
	out[31] |= in[95] << 29 ;

	out[32] = in[92] >> ( 32 - 29 ) ;
	out[33] = in[93] >> ( 32 - 29 ) ;
	out[34] = in[94] >> ( 32 - 29 ) ;
	out[35] = in[95] >> ( 32 - 29 ) ;

	out[32] |= in[96] << 8 ;
	out[33] |= in[97] << 8 ;
	out[34] |= in[98] << 8 ;
	out[35] |= in[99] << 8 ;

	out[32] |= in[100] << 19 ;
	out[33] |= in[101] << 19 ;
	out[34] |= in[102] << 19 ;
	out[35] |= in[103] << 19 ;

	out[32] |= in[104] << 30 ;
	out[33] |= in[105] << 30 ;
	out[34] |= in[106] << 30 ;
	out[35] |= in[107] << 30 ;

	out[36] = in[104] >> ( 32 - 30 ) ;
	out[37] = in[105] >> ( 32 - 30 ) ;
	out[38] = in[106] >> ( 32 - 30 ) ;
	out[39] = in[107] >> ( 32 - 30 ) ;

	out[36] |= in[108] << 9 ;
	out[37] |= in[109] << 9 ;
	out[38] |= in[110] << 9 ;
	out[39] |= in[111] << 9 ;

	out[36] |= in[112] << 20 ;
	out[37] |= in[113] << 20 ;
	out[38] |= in[114] << 20 ;
	out[39] |= in[115] << 20 ;

	out[36] |= in[116] << 31 ;
	out[37] |= in[117] << 31 ;
	out[38] |= in[118] << 31 ;
	out[39] |= in[119] << 31 ;

	out[40] = in[116] >> ( 32 - 31 ) ;
	out[41] = in[117] >> ( 32 - 31 ) ;
	out[42] = in[118] >> ( 32 - 31 ) ;
	out[43] = in[119] >> ( 32 - 31 ) ;

	out[40] |= in[120] << 10 ;
	out[41] |= in[121] << 10 ;
	out[42] |= in[122] << 10 ;
	out[43] |= in[123] << 10 ;

	out[40] |= in[124] << 21 ;
	out[41] |= in[125] << 21 ;
	out[42] |= in[126] << 21 ;
	out[43] |= in[127] << 21 ;
}


// 12-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c12(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 12 ;
	out[1] |= in[5] << 12 ;
	out[2] |= in[6] << 12 ;
	out[3] |= in[7] << 12 ;

	out[0] |= in[8] << 24 ;
	out[1] |= in[9] << 24 ;
	out[2] |= in[10] << 24 ;
	out[3] |= in[11] << 24 ;

	out[4] = in[8] >> ( 32 - 24 ) ;
	out[5] = in[9] >> ( 32 - 24 ) ;
	out[6] = in[10] >> ( 32 - 24 ) ;
	out[7] = in[11] >> ( 32 - 24 ) ;

	out[4] |= in[12] << 4 ;
	out[5] |= in[13] << 4 ;
	out[6] |= in[14] << 4 ;
	out[7] |= in[15] << 4 ;

	out[4] |= in[16] << 16 ;
	out[5] |= in[17] << 16 ;
	out[6] |= in[18] << 16 ;
	out[7] |= in[19] << 16 ;

	out[4] |= in[20] << 28 ;
	out[5] |= in[21] << 28 ;
	out[6] |= in[22] << 28 ;
	out[7] |= in[23] << 28 ;

	out[8] = in[20] >> ( 32 - 28 ) ;
	out[9] = in[21] >> ( 32 - 28 ) ;
	out[10] = in[22] >> ( 32 - 28 ) ;
	out[11] = in[23] >> ( 32 - 28 ) ;

	out[8] |= in[24] << 8 ;
	out[9] |= in[25] << 8 ;
	out[10] |= in[26] << 8 ;
	out[11] |= in[27] << 8 ;

	out[8] |= in[28] << 20 ;
	out[9] |= in[29] << 20 ;
	out[10] |= in[30] << 20 ;
	out[11] |= in[31] << 20 ;

	out[12] = in[32] << 0 ;
	out[13] = in[33] << 0 ;
	out[14] = in[34] << 0 ;
	out[15] = in[35] << 0 ;

	out[12] |= in[36] << 12 ;
	out[13] |= in[37] << 12 ;
	out[14] |= in[38] << 12 ;
	out[15] |= in[39] << 12 ;

	out[12] |= in[40] << 24 ;
	out[13] |= in[41] << 24 ;
	out[14] |= in[42] << 24 ;
	out[15] |= in[43] << 24 ;

	out[16] = in[40] >> ( 32 - 24 ) ;
	out[17] = in[41] >> ( 32 - 24 ) ;
	out[18] = in[42] >> ( 32 - 24 ) ;
	out[19] = in[43] >> ( 32 - 24 ) ;

	out[16] |= in[44] << 4 ;
	out[17] |= in[45] << 4 ;
	out[18] |= in[46] << 4 ;
	out[19] |= in[47] << 4 ;

	out[16] |= in[48] << 16 ;
	out[17] |= in[49] << 16 ;
	out[18] |= in[50] << 16 ;
	out[19] |= in[51] << 16 ;

	out[16] |= in[52] << 28 ;
	out[17] |= in[53] << 28 ;
	out[18] |= in[54] << 28 ;
	out[19] |= in[55] << 28 ;

	out[20] = in[52] >> ( 32 - 28 ) ;
	out[21] = in[53] >> ( 32 - 28 ) ;
	out[22] = in[54] >> ( 32 - 28 ) ;
	out[23] = in[55] >> ( 32 - 28 ) ;

	out[20] |= in[56] << 8 ;
	out[21] |= in[57] << 8 ;
	out[22] |= in[58] << 8 ;
	out[23] |= in[59] << 8 ;

	out[20] |= in[60] << 20 ;
	out[21] |= in[61] << 20 ;
	out[22] |= in[62] << 20 ;
	out[23] |= in[63] << 20 ;

	out[24] = in[64] << 0 ;
	out[25] = in[65] << 0 ;
	out[26] = in[66] << 0 ;
	out[27] = in[67] << 0 ;

	out[24] |= in[68] << 12 ;
	out[25] |= in[69] << 12 ;
	out[26] |= in[70] << 12 ;
	out[27] |= in[71] << 12 ;

	out[24] |= in[72] << 24 ;
	out[25] |= in[73] << 24 ;
	out[26] |= in[74] << 24 ;
	out[27] |= in[75] << 24 ;

	out[28] = in[72] >> ( 32 - 24 ) ;
	out[29] = in[73] >> ( 32 - 24 ) ;
	out[30] = in[74] >> ( 32 - 24 ) ;
	out[31] = in[75] >> ( 32 - 24 ) ;

	out[28] |= in[76] << 4 ;
	out[29] |= in[77] << 4 ;
	out[30] |= in[78] << 4 ;
	out[31] |= in[79] << 4 ;

	out[28] |= in[80] << 16 ;
	out[29] |= in[81] << 16 ;
	out[30] |= in[82] << 16 ;
	out[31] |= in[83] << 16 ;

	out[28] |= in[84] << 28 ;
	out[29] |= in[85] << 28 ;
	out[30] |= in[86] << 28 ;
	out[31] |= in[87] << 28 ;

	out[32] = in[84] >> ( 32 - 28 ) ;
	out[33] = in[85] >> ( 32 - 28 ) ;
	out[34] = in[86] >> ( 32 - 28 ) ;
	out[35] = in[87] >> ( 32 - 28 ) ;

	out[32] |= in[88] << 8 ;
	out[33] |= in[89] << 8 ;
	out[34] |= in[90] << 8 ;
	out[35] |= in[91] << 8 ;

	out[32] |= in[92] << 20 ;
	out[33] |= in[93] << 20 ;
	out[34] |= in[94] << 20 ;
	out[35] |= in[95] << 20 ;

	out[36] = in[96] << 0 ;
	out[37] = in[97] << 0 ;
	out[38] = in[98] << 0 ;
	out[39] = in[99] << 0 ;

	out[36] |= in[100] << 12 ;
	out[37] |= in[101] << 12 ;
	out[38] |= in[102] << 12 ;
	out[39] |= in[103] << 12 ;

	out[36] |= in[104] << 24 ;
	out[37] |= in[105] << 24 ;
	out[38] |= in[106] << 24 ;
	out[39] |= in[107] << 24 ;

	out[40] = in[104] >> ( 32 - 24 ) ;
	out[41] = in[105] >> ( 32 - 24 ) ;
	out[42] = in[106] >> ( 32 - 24 ) ;
	out[43] = in[107] >> ( 32 - 24 ) ;

	out[40] |= in[108] << 4 ;
	out[41] |= in[109] << 4 ;
	out[42] |= in[110] << 4 ;
	out[43] |= in[111] << 4 ;

	out[40] |= in[112] << 16 ;
	out[41] |= in[113] << 16 ;
	out[42] |= in[114] << 16 ;
	out[43] |= in[115] << 16 ;

	out[40] |= in[116] << 28 ;
	out[41] |= in[117] << 28 ;
	out[42] |= in[118] << 28 ;
	out[43] |= in[119] << 28 ;

	out[44] = in[116] >> ( 32 - 28 ) ;
	out[45] = in[117] >> ( 32 - 28 ) ;
	out[46] = in[118] >> ( 32 - 28 ) ;
	out[47] = in[119] >> ( 32 - 28 ) ;

	out[44] |= in[120] << 8 ;
	out[45] |= in[121] << 8 ;
	out[46] |= in[122] << 8 ;
	out[47] |= in[123] << 8 ;

	out[44] |= in[124] << 20 ;
	out[45] |= in[125] << 20 ;
	out[46] |= in[126] << 20 ;
	out[47] |= in[127] << 20 ;
}


// 13-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c13(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 13 ;
	out[1] |= in[5] << 13 ;
	out[2] |= in[6] << 13 ;
	out[3] |= in[7] << 13 ;

	out[0] |= in[8] << 26 ;
	out[1] |= in[9] << 26 ;
	out[2] |= in[10] << 26 ;
	out[3] |= in[11] << 26 ;

	out[4] = in[8] >> ( 32 - 26 ) ;
	out[5] = in[9] >> ( 32 - 26 ) ;
	out[6] = in[10] >> ( 32 - 26 ) ;
	out[7] = in[11] >> ( 32 - 26 ) ;

	out[4] |= in[12] << 7 ;
	out[5] |= in[13] << 7 ;
	out[6] |= in[14] << 7 ;
	out[7] |= in[15] << 7 ;

	out[4] |= in[16] << 20 ;
	out[5] |= in[17] << 20 ;
	out[6] |= in[18] << 20 ;
	out[7] |= in[19] << 20 ;

	out[8] = in[16] >> ( 32 - 20 ) ;
	out[9] = in[17] >> ( 32 - 20 ) ;
	out[10] = in[18] >> ( 32 - 20 ) ;
	out[11] = in[19] >> ( 32 - 20 ) ;

	out[8] |= in[20] << 1 ;
	out[9] |= in[21] << 1 ;
	out[10] |= in[22] << 1 ;
	out[11] |= in[23] << 1 ;

	out[8] |= in[24] << 14 ;
	out[9] |= in[25] << 14 ;
	out[10] |= in[26] << 14 ;
	out[11] |= in[27] << 14 ;

	out[8] |= in[28] << 27 ;
	out[9] |= in[29] << 27 ;
	out[10] |= in[30] << 27 ;
	out[11] |= in[31] << 27 ;

	out[12] = in[28] >> ( 32 - 27 ) ;
	out[13] = in[29] >> ( 32 - 27 ) ;
	out[14] = in[30] >> ( 32 - 27 ) ;
	out[15] = in[31] >> ( 32 - 27 ) ;

	out[12] |= in[32] << 8 ;
	out[13] |= in[33] << 8 ;
	out[14] |= in[34] << 8 ;
	out[15] |= in[35] << 8 ;

	out[12] |= in[36] << 21 ;
	out[13] |= in[37] << 21 ;
	out[14] |= in[38] << 21 ;
	out[15] |= in[39] << 21 ;

	out[16] = in[36] >> ( 32 - 21 ) ;
	out[17] = in[37] >> ( 32 - 21 ) ;
	out[18] = in[38] >> ( 32 - 21 ) ;
	out[19] = in[39] >> ( 32 - 21 ) ;

	out[16] |= in[40] << 2 ;
	out[17] |= in[41] << 2 ;
	out[18] |= in[42] << 2 ;
	out[19] |= in[43] << 2 ;

	out[16] |= in[44] << 15 ;
	out[17] |= in[45] << 15 ;
	out[18] |= in[46] << 15 ;
	out[19] |= in[47] << 15 ;

	out[16] |= in[48] << 28 ;
	out[17] |= in[49] << 28 ;
	out[18] |= in[50] << 28 ;
	out[19] |= in[51] << 28 ;

	out[20] = in[48] >> ( 32 - 28 ) ;
	out[21] = in[49] >> ( 32 - 28 ) ;
	out[22] = in[50] >> ( 32 - 28 ) ;
	out[23] = in[51] >> ( 32 - 28 ) ;

	out[20] |= in[52] << 9 ;
	out[21] |= in[53] << 9 ;
	out[22] |= in[54] << 9 ;
	out[23] |= in[55] << 9 ;

	out[20] |= in[56] << 22 ;
	out[21] |= in[57] << 22 ;
	out[22] |= in[58] << 22 ;
	out[23] |= in[59] << 22 ;

	out[24] = in[56] >> ( 32 - 22 ) ;
	out[25] = in[57] >> ( 32 - 22 ) ;
	out[26] = in[58] >> ( 32 - 22 ) ;
	out[27] = in[59] >> ( 32 - 22 ) ;

	out[24] |= in[60] << 3 ;
	out[25] |= in[61] << 3 ;
	out[26] |= in[62] << 3 ;
	out[27] |= in[63] << 3 ;

	out[24] |= in[64] << 16 ;
	out[25] |= in[65] << 16 ;
	out[26] |= in[66] << 16 ;
	out[27] |= in[67] << 16 ;

	out[24] |= in[68] << 29 ;
	out[25] |= in[69] << 29 ;
	out[26] |= in[70] << 29 ;
	out[27] |= in[71] << 29 ;

	out[28] = in[68] >> ( 32 - 29 ) ;
	out[29] = in[69] >> ( 32 - 29 ) ;
	out[30] = in[70] >> ( 32 - 29 ) ;
	out[31] = in[71] >> ( 32 - 29 ) ;

	out[28] |= in[72] << 10 ;
	out[29] |= in[73] << 10 ;
	out[30] |= in[74] << 10 ;
	out[31] |= in[75] << 10 ;

	out[28] |= in[76] << 23 ;
	out[29] |= in[77] << 23 ;
	out[30] |= in[78] << 23 ;
	out[31] |= in[79] << 23 ;

	out[32] = in[76] >> ( 32 - 23 ) ;
	out[33] = in[77] >> ( 32 - 23 ) ;
	out[34] = in[78] >> ( 32 - 23 ) ;
	out[35] = in[79] >> ( 32 - 23 ) ;

	out[32] |= in[80] << 4 ;
	out[33] |= in[81] << 4 ;
	out[34] |= in[82] << 4 ;
	out[35] |= in[83] << 4 ;

	out[32] |= in[84] << 17 ;
	out[33] |= in[85] << 17 ;
	out[34] |= in[86] << 17 ;
	out[35] |= in[87] << 17 ;

	out[32] |= in[88] << 30 ;
	out[33] |= in[89] << 30 ;
	out[34] |= in[90] << 30 ;
	out[35] |= in[91] << 30 ;

	out[36] = in[88] >> ( 32 - 30 ) ;
	out[37] = in[89] >> ( 32 - 30 ) ;
	out[38] = in[90] >> ( 32 - 30 ) ;
	out[39] = in[91] >> ( 32 - 30 ) ;

	out[36] |= in[92] << 11 ;
	out[37] |= in[93] << 11 ;
	out[38] |= in[94] << 11 ;
	out[39] |= in[95] << 11 ;

	out[36] |= in[96] << 24 ;
	out[37] |= in[97] << 24 ;
	out[38] |= in[98] << 24 ;
	out[39] |= in[99] << 24 ;

	out[40] = in[96] >> ( 32 - 24 ) ;
	out[41] = in[97] >> ( 32 - 24 ) ;
	out[42] = in[98] >> ( 32 - 24 ) ;
	out[43] = in[99] >> ( 32 - 24 ) ;

	out[40] |= in[100] << 5 ;
	out[41] |= in[101] << 5 ;
	out[42] |= in[102] << 5 ;
	out[43] |= in[103] << 5 ;

	out[40] |= in[104] << 18 ;
	out[41] |= in[105] << 18 ;
	out[42] |= in[106] << 18 ;
	out[43] |= in[107] << 18 ;

	out[40] |= in[108] << 31 ;
	out[41] |= in[109] << 31 ;
	out[42] |= in[110] << 31 ;
	out[43] |= in[111] << 31 ;

	out[44] = in[108] >> ( 32 - 31 ) ;
	out[45] = in[109] >> ( 32 - 31 ) ;
	out[46] = in[110] >> ( 32 - 31 ) ;
	out[47] = in[111] >> ( 32 - 31 ) ;

	out[44] |= in[112] << 12 ;
	out[45] |= in[113] << 12 ;
	out[46] |= in[114] << 12 ;
	out[47] |= in[115] << 12 ;

	out[44] |= in[116] << 25 ;
	out[45] |= in[117] << 25 ;
	out[46] |= in[118] << 25 ;
	out[47] |= in[119] << 25 ;

	out[48] = in[116] >> ( 32 - 25 ) ;
	out[49] = in[117] >> ( 32 - 25 ) ;
	out[50] = in[118] >> ( 32 - 25 ) ;
	out[51] = in[119] >> ( 32 - 25 ) ;

	out[48] |= in[120] << 6 ;
	out[49] |= in[121] << 6 ;
	out[50] |= in[122] << 6 ;
	out[51] |= in[123] << 6 ;

	out[48] |= in[124] << 19 ;
	out[49] |= in[125] << 19 ;
	out[50] |= in[126] << 19 ;
	out[51] |= in[127] << 19 ;
}


// 14-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c14(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 14 ;
	out[1] |= in[5] << 14 ;
	out[2] |= in[6] << 14 ;
	out[3] |= in[7] << 14 ;

	out[0] |= in[8] << 28 ;
	out[1] |= in[9] << 28 ;
	out[2] |= in[10] << 28 ;
	out[3] |= in[11] << 28 ;

	out[4] = in[8] >> ( 32 - 28 ) ;
	out[5] = in[9] >> ( 32 - 28 ) ;
	out[6] = in[10] >> ( 32 - 28 ) ;
	out[7] = in[11] >> ( 32 - 28 ) ;

	out[4] |= in[12] << 10 ;
	out[5] |= in[13] << 10 ;
	out[6] |= in[14] << 10 ;
	out[7] |= in[15] << 10 ;

	out[4] |= in[16] << 24 ;
	out[5] |= in[17] << 24 ;
	out[6] |= in[18] << 24 ;
	out[7] |= in[19] << 24 ;

	out[8] = in[16] >> ( 32 - 24 ) ;
	out[9] = in[17] >> ( 32 - 24 ) ;
	out[10] = in[18] >> ( 32 - 24 ) ;
	out[11] = in[19] >> ( 32 - 24 ) ;

	out[8] |= in[20] << 6 ;
	out[9] |= in[21] << 6 ;
	out[10] |= in[22] << 6 ;
	out[11] |= in[23] << 6 ;

	out[8] |= in[24] << 20 ;
	out[9] |= in[25] << 20 ;
	out[10] |= in[26] << 20 ;
	out[11] |= in[27] << 20 ;

	out[12] = in[24] >> ( 32 - 20 ) ;
	out[13] = in[25] >> ( 32 - 20 ) ;
	out[14] = in[26] >> ( 32 - 20 ) ;
	out[15] = in[27] >> ( 32 - 20 ) ;

	out[12] |= in[28] << 2 ;
	out[13] |= in[29] << 2 ;
	out[14] |= in[30] << 2 ;
	out[15] |= in[31] << 2 ;

	out[12] |= in[32] << 16 ;
	out[13] |= in[33] << 16 ;
	out[14] |= in[34] << 16 ;
	out[15] |= in[35] << 16 ;

	out[12] |= in[36] << 30 ;
	out[13] |= in[37] << 30 ;
	out[14] |= in[38] << 30 ;
	out[15] |= in[39] << 30 ;

	out[16] = in[36] >> ( 32 - 30 ) ;
	out[17] = in[37] >> ( 32 - 30 ) ;
	out[18] = in[38] >> ( 32 - 30 ) ;
	out[19] = in[39] >> ( 32 - 30 ) ;

	out[16] |= in[40] << 12 ;
	out[17] |= in[41] << 12 ;
	out[18] |= in[42] << 12 ;
	out[19] |= in[43] << 12 ;

	out[16] |= in[44] << 26 ;
	out[17] |= in[45] << 26 ;
	out[18] |= in[46] << 26 ;
	out[19] |= in[47] << 26 ;

	out[20] = in[44] >> ( 32 - 26 ) ;
	out[21] = in[45] >> ( 32 - 26 ) ;
	out[22] = in[46] >> ( 32 - 26 ) ;
	out[23] = in[47] >> ( 32 - 26 ) ;

	out[20] |= in[48] << 8 ;
	out[21] |= in[49] << 8 ;
	out[22] |= in[50] << 8 ;
	out[23] |= in[51] << 8 ;

	out[20] |= in[52] << 22 ;
	out[21] |= in[53] << 22 ;
	out[22] |= in[54] << 22 ;
	out[23] |= in[55] << 22 ;

	out[24] = in[52] >> ( 32 - 22 ) ;
	out[25] = in[53] >> ( 32 - 22 ) ;
	out[26] = in[54] >> ( 32 - 22 ) ;
	out[27] = in[55] >> ( 32 - 22 ) ;

	out[24] |= in[56] << 4 ;
	out[25] |= in[57] << 4 ;
	out[26] |= in[58] << 4 ;
	out[27] |= in[59] << 4 ;

	out[24] |= in[60] << 18 ;
	out[25] |= in[61] << 18 ;
	out[26] |= in[62] << 18 ;
	out[27] |= in[63] << 18 ;

	out[28] = in[64] << 0 ;
	out[29] = in[65] << 0 ;
	out[30] = in[66] << 0 ;
	out[31] = in[67] << 0 ;

	out[28] |= in[68] << 14 ;
	out[29] |= in[69] << 14 ;
	out[30] |= in[70] << 14 ;
	out[31] |= in[71] << 14 ;

	out[28] |= in[72] << 28 ;
	out[29] |= in[73] << 28 ;
	out[30] |= in[74] << 28 ;
	out[31] |= in[75] << 28 ;

	out[32] = in[72] >> ( 32 - 28 ) ;
	out[33] = in[73] >> ( 32 - 28 ) ;
	out[34] = in[74] >> ( 32 - 28 ) ;
	out[35] = in[75] >> ( 32 - 28 ) ;

	out[32] |= in[76] << 10 ;
	out[33] |= in[77] << 10 ;
	out[34] |= in[78] << 10 ;
	out[35] |= in[79] << 10 ;

	out[32] |= in[80] << 24 ;
	out[33] |= in[81] << 24 ;
	out[34] |= in[82] << 24 ;
	out[35] |= in[83] << 24 ;

	out[36] = in[80] >> ( 32 - 24 ) ;
	out[37] = in[81] >> ( 32 - 24 ) ;
	out[38] = in[82] >> ( 32 - 24 ) ;
	out[39] = in[83] >> ( 32 - 24 ) ;

	out[36] |= in[84] << 6 ;
	out[37] |= in[85] << 6 ;
	out[38] |= in[86] << 6 ;
	out[39] |= in[87] << 6 ;

	out[36] |= in[88] << 20 ;
	out[37] |= in[89] << 20 ;
	out[38] |= in[90] << 20 ;
	out[39] |= in[91] << 20 ;

	out[40] = in[88] >> ( 32 - 20 ) ;
	out[41] = in[89] >> ( 32 - 20 ) ;
	out[42] = in[90] >> ( 32 - 20 ) ;
	out[43] = in[91] >> ( 32 - 20 ) ;

	out[40] |= in[92] << 2 ;
	out[41] |= in[93] << 2 ;
	out[42] |= in[94] << 2 ;
	out[43] |= in[95] << 2 ;

	out[40] |= in[96] << 16 ;
	out[41] |= in[97] << 16 ;
	out[42] |= in[98] << 16 ;
	out[43] |= in[99] << 16 ;

	out[40] |= in[100] << 30 ;
	out[41] |= in[101] << 30 ;
	out[42] |= in[102] << 30 ;
	out[43] |= in[103] << 30 ;

	out[44] = in[100] >> ( 32 - 30 ) ;
	out[45] = in[101] >> ( 32 - 30 ) ;
	out[46] = in[102] >> ( 32 - 30 ) ;
	out[47] = in[103] >> ( 32 - 30 ) ;

	out[44] |= in[104] << 12 ;
	out[45] |= in[105] << 12 ;
	out[46] |= in[106] << 12 ;
	out[47] |= in[107] << 12 ;

	out[44] |= in[108] << 26 ;
	out[45] |= in[109] << 26 ;
	out[46] |= in[110] << 26 ;
	out[47] |= in[111] << 26 ;

	out[48] = in[108] >> ( 32 - 26 ) ;
	out[49] = in[109] >> ( 32 - 26 ) ;
	out[50] = in[110] >> ( 32 - 26 ) ;
	out[51] = in[111] >> ( 32 - 26 ) ;

	out[48] |= in[112] << 8 ;
	out[49] |= in[113] << 8 ;
	out[50] |= in[114] << 8 ;
	out[51] |= in[115] << 8 ;

	out[48] |= in[116] << 22 ;
	out[49] |= in[117] << 22 ;
	out[50] |= in[118] << 22 ;
	out[51] |= in[119] << 22 ;

	out[52] = in[116] >> ( 32 - 22 ) ;
	out[53] = in[117] >> ( 32 - 22 ) ;
	out[54] = in[118] >> ( 32 - 22 ) ;
	out[55] = in[119] >> ( 32 - 22 ) ;

	out[52] |= in[120] << 4 ;
	out[53] |= in[121] << 4 ;
	out[54] |= in[122] << 4 ;
	out[55] |= in[123] << 4 ;

	out[52] |= in[124] << 18 ;
	out[53] |= in[125] << 18 ;
	out[54] |= in[126] << 18 ;
	out[55] |= in[127] << 18 ;
}


// 15-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c15(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 15 ;
	out[1] |= in[5] << 15 ;
	out[2] |= in[6] << 15 ;
	out[3] |= in[7] << 15 ;

	out[0] |= in[8] << 30 ;
	out[1] |= in[9] << 30 ;
	out[2] |= in[10] << 30 ;
	out[3] |= in[11] << 30 ;

	out[4] = in[8] >> ( 32 - 30 ) ;
	out[5] = in[9] >> ( 32 - 30 ) ;
	out[6] = in[10] >> ( 32 - 30 ) ;
	out[7] = in[11] >> ( 32 - 30 ) ;

	out[4] |= in[12] << 13 ;
	out[5] |= in[13] << 13 ;
	out[6] |= in[14] << 13 ;
	out[7] |= in[15] << 13 ;

	out[4] |= in[16] << 28 ;
	out[5] |= in[17] << 28 ;
	out[6] |= in[18] << 28 ;
	out[7] |= in[19] << 28 ;

	out[8] = in[16] >> ( 32 - 28 ) ;
	out[9] = in[17] >> ( 32 - 28 ) ;
	out[10] = in[18] >> ( 32 - 28 ) ;
	out[11] = in[19] >> ( 32 - 28 ) ;

	out[8] |= in[20] << 11 ;
	out[9] |= in[21] << 11 ;
	out[10] |= in[22] << 11 ;
	out[11] |= in[23] << 11 ;

	out[8] |= in[24] << 26 ;
	out[9] |= in[25] << 26 ;
	out[10] |= in[26] << 26 ;
	out[11] |= in[27] << 26 ;

	out[12] = in[24] >> ( 32 - 26 ) ;
	out[13] = in[25] >> ( 32 - 26 ) ;
	out[14] = in[26] >> ( 32 - 26 ) ;
	out[15] = in[27] >> ( 32 - 26 ) ;

	out[12] |= in[28] << 9 ;
	out[13] |= in[29] << 9 ;
	out[14] |= in[30] << 9 ;
	out[15] |= in[31] << 9 ;

	out[12] |= in[32] << 24 ;
	out[13] |= in[33] << 24 ;
	out[14] |= in[34] << 24 ;
	out[15] |= in[35] << 24 ;

	out[16] = in[32] >> ( 32 - 24 ) ;
	out[17] = in[33] >> ( 32 - 24 ) ;
	out[18] = in[34] >> ( 32 - 24 ) ;
	out[19] = in[35] >> ( 32 - 24 ) ;

	out[16] |= in[36] << 7 ;
	out[17] |= in[37] << 7 ;
	out[18] |= in[38] << 7 ;
	out[19] |= in[39] << 7 ;

	out[16] |= in[40] << 22 ;
	out[17] |= in[41] << 22 ;
	out[18] |= in[42] << 22 ;
	out[19] |= in[43] << 22 ;

	out[20] = in[40] >> ( 32 - 22 ) ;
	out[21] = in[41] >> ( 32 - 22 ) ;
	out[22] = in[42] >> ( 32 - 22 ) ;
	out[23] = in[43] >> ( 32 - 22 ) ;

	out[20] |= in[44] << 5 ;
	out[21] |= in[45] << 5 ;
	out[22] |= in[46] << 5 ;
	out[23] |= in[47] << 5 ;

	out[20] |= in[48] << 20 ;
	out[21] |= in[49] << 20 ;
	out[22] |= in[50] << 20 ;
	out[23] |= in[51] << 20 ;

	out[24] = in[48] >> ( 32 - 20 ) ;
	out[25] = in[49] >> ( 32 - 20 ) ;
	out[26] = in[50] >> ( 32 - 20 ) ;
	out[27] = in[51] >> ( 32 - 20 ) ;

	out[24] |= in[52] << 3 ;
	out[25] |= in[53] << 3 ;
	out[26] |= in[54] << 3 ;
	out[27] |= in[55] << 3 ;

	out[24] |= in[56] << 18 ;
	out[25] |= in[57] << 18 ;
	out[26] |= in[58] << 18 ;
	out[27] |= in[59] << 18 ;

	out[28] = in[56] >> ( 32 - 18 ) ;
	out[29] = in[57] >> ( 32 - 18 ) ;
	out[30] = in[58] >> ( 32 - 18 ) ;
	out[31] = in[59] >> ( 32 - 18 ) ;

	out[28] |= in[60] << 1 ;
	out[29] |= in[61] << 1 ;
	out[30] |= in[62] << 1 ;
	out[31] |= in[63] << 1 ;

	out[28] |= in[64] << 16 ;
	out[29] |= in[65] << 16 ;
	out[30] |= in[66] << 16 ;
	out[31] |= in[67] << 16 ;

	out[28] |= in[68] << 31 ;
	out[29] |= in[69] << 31 ;
	out[30] |= in[70] << 31 ;
	out[31] |= in[71] << 31 ;

	out[32] = in[68] >> ( 32 - 31 ) ;
	out[33] = in[69] >> ( 32 - 31 ) ;
	out[34] = in[70] >> ( 32 - 31 ) ;
	out[35] = in[71] >> ( 32 - 31 ) ;

	out[32] |= in[72] << 14 ;
	out[33] |= in[73] << 14 ;
	out[34] |= in[74] << 14 ;
	out[35] |= in[75] << 14 ;

	out[32] |= in[76] << 29 ;
	out[33] |= in[77] << 29 ;
	out[34] |= in[78] << 29 ;
	out[35] |= in[79] << 29 ;

	out[36] = in[76] >> ( 32 - 29 ) ;
	out[37] = in[77] >> ( 32 - 29 ) ;
	out[38] = in[78] >> ( 32 - 29 ) ;
	out[39] = in[79] >> ( 32 - 29 ) ;

	out[36] |= in[80] << 12 ;
	out[37] |= in[81] << 12 ;
	out[38] |= in[82] << 12 ;
	out[39] |= in[83] << 12 ;

	out[36] |= in[84] << 27 ;
	out[37] |= in[85] << 27 ;
	out[38] |= in[86] << 27 ;
	out[39] |= in[87] << 27 ;

	out[40] = in[84] >> ( 32 - 27 ) ;
	out[41] = in[85] >> ( 32 - 27 ) ;
	out[42] = in[86] >> ( 32 - 27 ) ;
	out[43] = in[87] >> ( 32 - 27 ) ;

	out[40] |= in[88] << 10 ;
	out[41] |= in[89] << 10 ;
	out[42] |= in[90] << 10 ;
	out[43] |= in[91] << 10 ;

	out[40] |= in[92] << 25 ;
	out[41] |= in[93] << 25 ;
	out[42] |= in[94] << 25 ;
	out[43] |= in[95] << 25 ;

	out[44] = in[92] >> ( 32 - 25 ) ;
	out[45] = in[93] >> ( 32 - 25 ) ;
	out[46] = in[94] >> ( 32 - 25 ) ;
	out[47] = in[95] >> ( 32 - 25 ) ;

	out[44] |= in[96] << 8 ;
	out[45] |= in[97] << 8 ;
	out[46] |= in[98] << 8 ;
	out[47] |= in[99] << 8 ;

	out[44] |= in[100] << 23 ;
	out[45] |= in[101] << 23 ;
	out[46] |= in[102] << 23 ;
	out[47] |= in[103] << 23 ;

	out[48] = in[100] >> ( 32 - 23 ) ;
	out[49] = in[101] >> ( 32 - 23 ) ;
	out[50] = in[102] >> ( 32 - 23 ) ;
	out[51] = in[103] >> ( 32 - 23 ) ;

	out[48] |= in[104] << 6 ;
	out[49] |= in[105] << 6 ;
	out[50] |= in[106] << 6 ;
	out[51] |= in[107] << 6 ;

	out[48] |= in[108] << 21 ;
	out[49] |= in[109] << 21 ;
	out[50] |= in[110] << 21 ;
	out[51] |= in[111] << 21 ;

	out[52] = in[108] >> ( 32 - 21 ) ;
	out[53] = in[109] >> ( 32 - 21 ) ;
	out[54] = in[110] >> ( 32 - 21 ) ;
	out[55] = in[111] >> ( 32 - 21 ) ;

	out[52] |= in[112] << 4 ;
	out[53] |= in[113] << 4 ;
	out[54] |= in[114] << 4 ;
	out[55] |= in[115] << 4 ;

	out[52] |= in[116] << 19 ;
	out[53] |= in[117] << 19 ;
	out[54] |= in[118] << 19 ;
	out[55] |= in[119] << 19 ;

	out[56] = in[116] >> ( 32 - 19 ) ;
	out[57] = in[117] >> ( 32 - 19 ) ;
	out[58] = in[118] >> ( 32 - 19 ) ;
	out[59] = in[119] >> ( 32 - 19 ) ;

	out[56] |= in[120] << 2 ;
	out[57] |= in[121] << 2 ;
	out[58] |= in[122] << 2 ;
	out[59] |= in[123] << 2 ;

	out[56] |= in[124] << 17 ;
	out[57] |= in[125] << 17 ;
	out[58] |= in[126] << 17 ;
	out[59] |= in[127] << 17 ;
}


// 16-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c16(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 16 ;
	out[1] |= in[5] << 16 ;
	out[2] |= in[6] << 16 ;
	out[3] |= in[7] << 16 ;

	out[4] = in[8] << 0 ;
	out[5] = in[9] << 0 ;
	out[6] = in[10] << 0 ;
	out[7] = in[11] << 0 ;

	out[4] |= in[12] << 16 ;
	out[5] |= in[13] << 16 ;
	out[6] |= in[14] << 16 ;
	out[7] |= in[15] << 16 ;

	out[8] = in[16] << 0 ;
	out[9] = in[17] << 0 ;
	out[10] = in[18] << 0 ;
	out[11] = in[19] << 0 ;

	out[8] |= in[20] << 16 ;
	out[9] |= in[21] << 16 ;
	out[10] |= in[22] << 16 ;
	out[11] |= in[23] << 16 ;

	out[12] = in[24] << 0 ;
	out[13] = in[25] << 0 ;
	out[14] = in[26] << 0 ;
	out[15] = in[27] << 0 ;

	out[12] |= in[28] << 16 ;
	out[13] |= in[29] << 16 ;
	out[14] |= in[30] << 16 ;
	out[15] |= in[31] << 16 ;

	out[16] = in[32] << 0 ;
	out[17] = in[33] << 0 ;
	out[18] = in[34] << 0 ;
	out[19] = in[35] << 0 ;

	out[16] |= in[36] << 16 ;
	out[17] |= in[37] << 16 ;
	out[18] |= in[38] << 16 ;
	out[19] |= in[39] << 16 ;

	out[20] = in[40] << 0 ;
	out[21] = in[41] << 0 ;
	out[22] = in[42] << 0 ;
	out[23] = in[43] << 0 ;

	out[20] |= in[44] << 16 ;
	out[21] |= in[45] << 16 ;
	out[22] |= in[46] << 16 ;
	out[23] |= in[47] << 16 ;

	out[24] = in[48] << 0 ;
	out[25] = in[49] << 0 ;
	out[26] = in[50] << 0 ;
	out[27] = in[51] << 0 ;

	out[24] |= in[52] << 16 ;
	out[25] |= in[53] << 16 ;
	out[26] |= in[54] << 16 ;
	out[27] |= in[55] << 16 ;

	out[28] = in[56] << 0 ;
	out[29] = in[57] << 0 ;
	out[30] = in[58] << 0 ;
	out[31] = in[59] << 0 ;

	out[28] |= in[60] << 16 ;
	out[29] |= in[61] << 16 ;
	out[30] |= in[62] << 16 ;
	out[31] |= in[63] << 16 ;

	out[32] = in[64] << 0 ;
	out[33] = in[65] << 0 ;
	out[34] = in[66] << 0 ;
	out[35] = in[67] << 0 ;

	out[32] |= in[68] << 16 ;
	out[33] |= in[69] << 16 ;
	out[34] |= in[70] << 16 ;
	out[35] |= in[71] << 16 ;

	out[36] = in[72] << 0 ;
	out[37] = in[73] << 0 ;
	out[38] = in[74] << 0 ;
	out[39] = in[75] << 0 ;

	out[36] |= in[76] << 16 ;
	out[37] |= in[77] << 16 ;
	out[38] |= in[78] << 16 ;
	out[39] |= in[79] << 16 ;

	out[40] = in[80] << 0 ;
	out[41] = in[81] << 0 ;
	out[42] = in[82] << 0 ;
	out[43] = in[83] << 0 ;

	out[40] |= in[84] << 16 ;
	out[41] |= in[85] << 16 ;
	out[42] |= in[86] << 16 ;
	out[43] |= in[87] << 16 ;

	out[44] = in[88] << 0 ;
	out[45] = in[89] << 0 ;
	out[46] = in[90] << 0 ;
	out[47] = in[91] << 0 ;

	out[44] |= in[92] << 16 ;
	out[45] |= in[93] << 16 ;
	out[46] |= in[94] << 16 ;
	out[47] |= in[95] << 16 ;

	out[48] = in[96] << 0 ;
	out[49] = in[97] << 0 ;
	out[50] = in[98] << 0 ;
	out[51] = in[99] << 0 ;

	out[48] |= in[100] << 16 ;
	out[49] |= in[101] << 16 ;
	out[50] |= in[102] << 16 ;
	out[51] |= in[103] << 16 ;

	out[52] = in[104] << 0 ;
	out[53] = in[105] << 0 ;
	out[54] = in[106] << 0 ;
	out[55] = in[107] << 0 ;

	out[52] |= in[108] << 16 ;
	out[53] |= in[109] << 16 ;
	out[54] |= in[110] << 16 ;
	out[55] |= in[111] << 16 ;

	out[56] = in[112] << 0 ;
	out[57] = in[113] << 0 ;
	out[58] = in[114] << 0 ;
	out[59] = in[115] << 0 ;

	out[56] |= in[116] << 16 ;
	out[57] |= in[117] << 16 ;
	out[58] |= in[118] << 16 ;
	out[59] |= in[119] << 16 ;

	out[60] = in[120] << 0 ;
	out[61] = in[121] << 0 ;
	out[62] = in[122] << 0 ;
	out[63] = in[123] << 0 ;

	out[60] |= in[124] << 16 ;
	out[61] |= in[125] << 16 ;
	out[62] |= in[126] << 16 ;
	out[63] |= in[127] << 16 ;
}


// 17-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c17(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 17 ;
	out[1] |= in[5] << 17 ;
	out[2] |= in[6] << 17 ;
	out[3] |= in[7] << 17 ;

	out[4] = in[4] >> ( 32 - 17 ) ;
	out[5] = in[5] >> ( 32 - 17 ) ;
	out[6] = in[6] >> ( 32 - 17 ) ;
	out[7] = in[7] >> ( 32 - 17 ) ;

	out[4] |= in[8] << 2 ;
	out[5] |= in[9] << 2 ;
	out[6] |= in[10] << 2 ;
	out[7] |= in[11] << 2 ;

	out[4] |= in[12] << 19 ;
	out[5] |= in[13] << 19 ;
	out[6] |= in[14] << 19 ;
	out[7] |= in[15] << 19 ;

	out[8] = in[12] >> ( 32 - 19 ) ;
	out[9] = in[13] >> ( 32 - 19 ) ;
	out[10] = in[14] >> ( 32 - 19 ) ;
	out[11] = in[15] >> ( 32 - 19 ) ;

	out[8] |= in[16] << 4 ;
	out[9] |= in[17] << 4 ;
	out[10] |= in[18] << 4 ;
	out[11] |= in[19] << 4 ;

	out[8] |= in[20] << 21 ;
	out[9] |= in[21] << 21 ;
	out[10] |= in[22] << 21 ;
	out[11] |= in[23] << 21 ;

	out[12] = in[20] >> ( 32 - 21 ) ;
	out[13] = in[21] >> ( 32 - 21 ) ;
	out[14] = in[22] >> ( 32 - 21 ) ;
	out[15] = in[23] >> ( 32 - 21 ) ;

	out[12] |= in[24] << 6 ;
	out[13] |= in[25] << 6 ;
	out[14] |= in[26] << 6 ;
	out[15] |= in[27] << 6 ;

	out[12] |= in[28] << 23 ;
	out[13] |= in[29] << 23 ;
	out[14] |= in[30] << 23 ;
	out[15] |= in[31] << 23 ;

	out[16] = in[28] >> ( 32 - 23 ) ;
	out[17] = in[29] >> ( 32 - 23 ) ;
	out[18] = in[30] >> ( 32 - 23 ) ;
	out[19] = in[31] >> ( 32 - 23 ) ;

	out[16] |= in[32] << 8 ;
	out[17] |= in[33] << 8 ;
	out[18] |= in[34] << 8 ;
	out[19] |= in[35] << 8 ;

	out[16] |= in[36] << 25 ;
	out[17] |= in[37] << 25 ;
	out[18] |= in[38] << 25 ;
	out[19] |= in[39] << 25 ;

	out[20] = in[36] >> ( 32 - 25 ) ;
	out[21] = in[37] >> ( 32 - 25 ) ;
	out[22] = in[38] >> ( 32 - 25 ) ;
	out[23] = in[39] >> ( 32 - 25 ) ;

	out[20] |= in[40] << 10 ;
	out[21] |= in[41] << 10 ;
	out[22] |= in[42] << 10 ;
	out[23] |= in[43] << 10 ;

	out[20] |= in[44] << 27 ;
	out[21] |= in[45] << 27 ;
	out[22] |= in[46] << 27 ;
	out[23] |= in[47] << 27 ;

	out[24] = in[44] >> ( 32 - 27 ) ;
	out[25] = in[45] >> ( 32 - 27 ) ;
	out[26] = in[46] >> ( 32 - 27 ) ;
	out[27] = in[47] >> ( 32 - 27 ) ;

	out[24] |= in[48] << 12 ;
	out[25] |= in[49] << 12 ;
	out[26] |= in[50] << 12 ;
	out[27] |= in[51] << 12 ;

	out[24] |= in[52] << 29 ;
	out[25] |= in[53] << 29 ;
	out[26] |= in[54] << 29 ;
	out[27] |= in[55] << 29 ;

	out[28] = in[52] >> ( 32 - 29 ) ;
	out[29] = in[53] >> ( 32 - 29 ) ;
	out[30] = in[54] >> ( 32 - 29 ) ;
	out[31] = in[55] >> ( 32 - 29 ) ;

	out[28] |= in[56] << 14 ;
	out[29] |= in[57] << 14 ;
	out[30] |= in[58] << 14 ;
	out[31] |= in[59] << 14 ;

	out[28] |= in[60] << 31 ;
	out[29] |= in[61] << 31 ;
	out[30] |= in[62] << 31 ;
	out[31] |= in[63] << 31 ;

	out[32] = in[60] >> ( 32 - 31 ) ;
	out[33] = in[61] >> ( 32 - 31 ) ;
	out[34] = in[62] >> ( 32 - 31 ) ;
	out[35] = in[63] >> ( 32 - 31 ) ;

	out[32] |= in[64] << 16 ;
	out[33] |= in[65] << 16 ;
	out[34] |= in[66] << 16 ;
	out[35] |= in[67] << 16 ;

	out[36] = in[64] >> ( 32 - 16 ) ;
	out[37] = in[65] >> ( 32 - 16 ) ;
	out[38] = in[66] >> ( 32 - 16 ) ;
	out[39] = in[67] >> ( 32 - 16 ) ;

	out[36] |= in[68] << 1 ;
	out[37] |= in[69] << 1 ;
	out[38] |= in[70] << 1 ;
	out[39] |= in[71] << 1 ;

	out[36] |= in[72] << 18 ;
	out[37] |= in[73] << 18 ;
	out[38] |= in[74] << 18 ;
	out[39] |= in[75] << 18 ;

	out[40] = in[72] >> ( 32 - 18 ) ;
	out[41] = in[73] >> ( 32 - 18 ) ;
	out[42] = in[74] >> ( 32 - 18 ) ;
	out[43] = in[75] >> ( 32 - 18 ) ;

	out[40] |= in[76] << 3 ;
	out[41] |= in[77] << 3 ;
	out[42] |= in[78] << 3 ;
	out[43] |= in[79] << 3 ;

	out[40] |= in[80] << 20 ;
	out[41] |= in[81] << 20 ;
	out[42] |= in[82] << 20 ;
	out[43] |= in[83] << 20 ;

	out[44] = in[80] >> ( 32 - 20 ) ;
	out[45] = in[81] >> ( 32 - 20 ) ;
	out[46] = in[82] >> ( 32 - 20 ) ;
	out[47] = in[83] >> ( 32 - 20 ) ;

	out[44] |= in[84] << 5 ;
	out[45] |= in[85] << 5 ;
	out[46] |= in[86] << 5 ;
	out[47] |= in[87] << 5 ;

	out[44] |= in[88] << 22 ;
	out[45] |= in[89] << 22 ;
	out[46] |= in[90] << 22 ;
	out[47] |= in[91] << 22 ;

	out[48] = in[88] >> ( 32 - 22 ) ;
	out[49] = in[89] >> ( 32 - 22 ) ;
	out[50] = in[90] >> ( 32 - 22 ) ;
	out[51] = in[91] >> ( 32 - 22 ) ;

	out[48] |= in[92] << 7 ;
	out[49] |= in[93] << 7 ;
	out[50] |= in[94] << 7 ;
	out[51] |= in[95] << 7 ;

	out[48] |= in[96] << 24 ;
	out[49] |= in[97] << 24 ;
	out[50] |= in[98] << 24 ;
	out[51] |= in[99] << 24 ;

	out[52] = in[96] >> ( 32 - 24 ) ;
	out[53] = in[97] >> ( 32 - 24 ) ;
	out[54] = in[98] >> ( 32 - 24 ) ;
	out[55] = in[99] >> ( 32 - 24 ) ;

	out[52] |= in[100] << 9 ;
	out[53] |= in[101] << 9 ;
	out[54] |= in[102] << 9 ;
	out[55] |= in[103] << 9 ;

	out[52] |= in[104] << 26 ;
	out[53] |= in[105] << 26 ;
	out[54] |= in[106] << 26 ;
	out[55] |= in[107] << 26 ;

	out[56] = in[104] >> ( 32 - 26 ) ;
	out[57] = in[105] >> ( 32 - 26 ) ;
	out[58] = in[106] >> ( 32 - 26 ) ;
	out[59] = in[107] >> ( 32 - 26 ) ;

	out[56] |= in[108] << 11 ;
	out[57] |= in[109] << 11 ;
	out[58] |= in[110] << 11 ;
	out[59] |= in[111] << 11 ;

	out[56] |= in[112] << 28 ;
	out[57] |= in[113] << 28 ;
	out[58] |= in[114] << 28 ;
	out[59] |= in[115] << 28 ;

	out[60] = in[112] >> ( 32 - 28 ) ;
	out[61] = in[113] >> ( 32 - 28 ) ;
	out[62] = in[114] >> ( 32 - 28 ) ;
	out[63] = in[115] >> ( 32 - 28 ) ;

	out[60] |= in[116] << 13 ;
	out[61] |= in[117] << 13 ;
	out[62] |= in[118] << 13 ;
	out[63] |= in[119] << 13 ;

	out[60] |= in[120] << 30 ;
	out[61] |= in[121] << 30 ;
	out[62] |= in[122] << 30 ;
	out[63] |= in[123] << 30 ;

	out[64] = in[120] >> ( 32 - 30 ) ;
	out[65] = in[121] >> ( 32 - 30 ) ;
	out[66] = in[122] >> ( 32 - 30 ) ;
	out[67] = in[123] >> ( 32 - 30 ) ;

	out[64] |= in[124] << 15 ;
	out[65] |= in[125] << 15 ;
	out[66] |= in[126] << 15 ;
	out[67] |= in[127] << 15 ;
}


// 18-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c18(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 18 ;
	out[1] |= in[5] << 18 ;
	out[2] |= in[6] << 18 ;
	out[3] |= in[7] << 18 ;

	out[4] = in[4] >> ( 32 - 18 ) ;
	out[5] = in[5] >> ( 32 - 18 ) ;
	out[6] = in[6] >> ( 32 - 18 ) ;
	out[7] = in[7] >> ( 32 - 18 ) ;

	out[4] |= in[8] << 4 ;
	out[5] |= in[9] << 4 ;
	out[6] |= in[10] << 4 ;
	out[7] |= in[11] << 4 ;

	out[4] |= in[12] << 22 ;
	out[5] |= in[13] << 22 ;
	out[6] |= in[14] << 22 ;
	out[7] |= in[15] << 22 ;

	out[8] = in[12] >> ( 32 - 22 ) ;
	out[9] = in[13] >> ( 32 - 22 ) ;
	out[10] = in[14] >> ( 32 - 22 ) ;
	out[11] = in[15] >> ( 32 - 22 ) ;

	out[8] |= in[16] << 8 ;
	out[9] |= in[17] << 8 ;
	out[10] |= in[18] << 8 ;
	out[11] |= in[19] << 8 ;

	out[8] |= in[20] << 26 ;
	out[9] |= in[21] << 26 ;
	out[10] |= in[22] << 26 ;
	out[11] |= in[23] << 26 ;

	out[12] = in[20] >> ( 32 - 26 ) ;
	out[13] = in[21] >> ( 32 - 26 ) ;
	out[14] = in[22] >> ( 32 - 26 ) ;
	out[15] = in[23] >> ( 32 - 26 ) ;

	out[12] |= in[24] << 12 ;
	out[13] |= in[25] << 12 ;
	out[14] |= in[26] << 12 ;
	out[15] |= in[27] << 12 ;

	out[12] |= in[28] << 30 ;
	out[13] |= in[29] << 30 ;
	out[14] |= in[30] << 30 ;
	out[15] |= in[31] << 30 ;

	out[16] = in[28] >> ( 32 - 30 ) ;
	out[17] = in[29] >> ( 32 - 30 ) ;
	out[18] = in[30] >> ( 32 - 30 ) ;
	out[19] = in[31] >> ( 32 - 30 ) ;

	out[16] |= in[32] << 16 ;
	out[17] |= in[33] << 16 ;
	out[18] |= in[34] << 16 ;
	out[19] |= in[35] << 16 ;

	out[20] = in[32] >> ( 32 - 16 ) ;
	out[21] = in[33] >> ( 32 - 16 ) ;
	out[22] = in[34] >> ( 32 - 16 ) ;
	out[23] = in[35] >> ( 32 - 16 ) ;

	out[20] |= in[36] << 2 ;
	out[21] |= in[37] << 2 ;
	out[22] |= in[38] << 2 ;
	out[23] |= in[39] << 2 ;

	out[20] |= in[40] << 20 ;
	out[21] |= in[41] << 20 ;
	out[22] |= in[42] << 20 ;
	out[23] |= in[43] << 20 ;

	out[24] = in[40] >> ( 32 - 20 ) ;
	out[25] = in[41] >> ( 32 - 20 ) ;
	out[26] = in[42] >> ( 32 - 20 ) ;
	out[27] = in[43] >> ( 32 - 20 ) ;

	out[24] |= in[44] << 6 ;
	out[25] |= in[45] << 6 ;
	out[26] |= in[46] << 6 ;
	out[27] |= in[47] << 6 ;

	out[24] |= in[48] << 24 ;
	out[25] |= in[49] << 24 ;
	out[26] |= in[50] << 24 ;
	out[27] |= in[51] << 24 ;

	out[28] = in[48] >> ( 32 - 24 ) ;
	out[29] = in[49] >> ( 32 - 24 ) ;
	out[30] = in[50] >> ( 32 - 24 ) ;
	out[31] = in[51] >> ( 32 - 24 ) ;

	out[28] |= in[52] << 10 ;
	out[29] |= in[53] << 10 ;
	out[30] |= in[54] << 10 ;
	out[31] |= in[55] << 10 ;

	out[28] |= in[56] << 28 ;
	out[29] |= in[57] << 28 ;
	out[30] |= in[58] << 28 ;
	out[31] |= in[59] << 28 ;

	out[32] = in[56] >> ( 32 - 28 ) ;
	out[33] = in[57] >> ( 32 - 28 ) ;
	out[34] = in[58] >> ( 32 - 28 ) ;
	out[35] = in[59] >> ( 32 - 28 ) ;

	out[32] |= in[60] << 14 ;
	out[33] |= in[61] << 14 ;
	out[34] |= in[62] << 14 ;
	out[35] |= in[63] << 14 ;

	out[36] = in[64] << 0 ;
	out[37] = in[65] << 0 ;
	out[38] = in[66] << 0 ;
	out[39] = in[67] << 0 ;

	out[36] |= in[68] << 18 ;
	out[37] |= in[69] << 18 ;
	out[38] |= in[70] << 18 ;
	out[39] |= in[71] << 18 ;

	out[40] = in[68] >> ( 32 - 18 ) ;
	out[41] = in[69] >> ( 32 - 18 ) ;
	out[42] = in[70] >> ( 32 - 18 ) ;
	out[43] = in[71] >> ( 32 - 18 ) ;

	out[40] |= in[72] << 4 ;
	out[41] |= in[73] << 4 ;
	out[42] |= in[74] << 4 ;
	out[43] |= in[75] << 4 ;

	out[40] |= in[76] << 22 ;
	out[41] |= in[77] << 22 ;
	out[42] |= in[78] << 22 ;
	out[43] |= in[79] << 22 ;

	out[44] = in[76] >> ( 32 - 22 ) ;
	out[45] = in[77] >> ( 32 - 22 ) ;
	out[46] = in[78] >> ( 32 - 22 ) ;
	out[47] = in[79] >> ( 32 - 22 ) ;

	out[44] |= in[80] << 8 ;
	out[45] |= in[81] << 8 ;
	out[46] |= in[82] << 8 ;
	out[47] |= in[83] << 8 ;

	out[44] |= in[84] << 26 ;
	out[45] |= in[85] << 26 ;
	out[46] |= in[86] << 26 ;
	out[47] |= in[87] << 26 ;

	out[48] = in[84] >> ( 32 - 26 ) ;
	out[49] = in[85] >> ( 32 - 26 ) ;
	out[50] = in[86] >> ( 32 - 26 ) ;
	out[51] = in[87] >> ( 32 - 26 ) ;

	out[48] |= in[88] << 12 ;
	out[49] |= in[89] << 12 ;
	out[50] |= in[90] << 12 ;
	out[51] |= in[91] << 12 ;

	out[48] |= in[92] << 30 ;
	out[49] |= in[93] << 30 ;
	out[50] |= in[94] << 30 ;
	out[51] |= in[95] << 30 ;

	out[52] = in[92] >> ( 32 - 30 ) ;
	out[53] = in[93] >> ( 32 - 30 ) ;
	out[54] = in[94] >> ( 32 - 30 ) ;
	out[55] = in[95] >> ( 32 - 30 ) ;

	out[52] |= in[96] << 16 ;
	out[53] |= in[97] << 16 ;
	out[54] |= in[98] << 16 ;
	out[55] |= in[99] << 16 ;

	out[56] = in[96] >> ( 32 - 16 ) ;
	out[57] = in[97] >> ( 32 - 16 ) ;
	out[58] = in[98] >> ( 32 - 16 ) ;
	out[59] = in[99] >> ( 32 - 16 ) ;

	out[56] |= in[100] << 2 ;
	out[57] |= in[101] << 2 ;
	out[58] |= in[102] << 2 ;
	out[59] |= in[103] << 2 ;

	out[56] |= in[104] << 20 ;
	out[57] |= in[105] << 20 ;
	out[58] |= in[106] << 20 ;
	out[59] |= in[107] << 20 ;

	out[60] = in[104] >> ( 32 - 20 ) ;
	out[61] = in[105] >> ( 32 - 20 ) ;
	out[62] = in[106] >> ( 32 - 20 ) ;
	out[63] = in[107] >> ( 32 - 20 ) ;

	out[60] |= in[108] << 6 ;
	out[61] |= in[109] << 6 ;
	out[62] |= in[110] << 6 ;
	out[63] |= in[111] << 6 ;

	out[60] |= in[112] << 24 ;
	out[61] |= in[113] << 24 ;
	out[62] |= in[114] << 24 ;
	out[63] |= in[115] << 24 ;

	out[64] = in[112] >> ( 32 - 24 ) ;
	out[65] = in[113] >> ( 32 - 24 ) ;
	out[66] = in[114] >> ( 32 - 24 ) ;
	out[67] = in[115] >> ( 32 - 24 ) ;

	out[64] |= in[116] << 10 ;
	out[65] |= in[117] << 10 ;
	out[66] |= in[118] << 10 ;
	out[67] |= in[119] << 10 ;

	out[64] |= in[120] << 28 ;
	out[65] |= in[121] << 28 ;
	out[66] |= in[122] << 28 ;
	out[67] |= in[123] << 28 ;

	out[68] = in[120] >> ( 32 - 28 ) ;
	out[69] = in[121] >> ( 32 - 28 ) ;
	out[70] = in[122] >> ( 32 - 28 ) ;
	out[71] = in[123] >> ( 32 - 28 ) ;

	out[68] |= in[124] << 14 ;
	out[69] |= in[125] << 14 ;
	out[70] |= in[126] << 14 ;
	out[71] |= in[127] << 14 ;
}


// 19-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c19(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 19 ;
	out[1] |= in[5] << 19 ;
	out[2] |= in[6] << 19 ;
	out[3] |= in[7] << 19 ;

	out[4] = in[4] >> ( 32 - 19 ) ;
	out[5] = in[5] >> ( 32 - 19 ) ;
	out[6] = in[6] >> ( 32 - 19 ) ;
	out[7] = in[7] >> ( 32 - 19 ) ;

	out[4] |= in[8] << 6 ;
	out[5] |= in[9] << 6 ;
	out[6] |= in[10] << 6 ;
	out[7] |= in[11] << 6 ;

	out[4] |= in[12] << 25 ;
	out[5] |= in[13] << 25 ;
	out[6] |= in[14] << 25 ;
	out[7] |= in[15] << 25 ;

	out[8] = in[12] >> ( 32 - 25 ) ;
	out[9] = in[13] >> ( 32 - 25 ) ;
	out[10] = in[14] >> ( 32 - 25 ) ;
	out[11] = in[15] >> ( 32 - 25 ) ;

	out[8] |= in[16] << 12 ;
	out[9] |= in[17] << 12 ;
	out[10] |= in[18] << 12 ;
	out[11] |= in[19] << 12 ;

	out[8] |= in[20] << 31 ;
	out[9] |= in[21] << 31 ;
	out[10] |= in[22] << 31 ;
	out[11] |= in[23] << 31 ;

	out[12] = in[20] >> ( 32 - 31 ) ;
	out[13] = in[21] >> ( 32 - 31 ) ;
	out[14] = in[22] >> ( 32 - 31 ) ;
	out[15] = in[23] >> ( 32 - 31 ) ;

	out[12] |= in[24] << 18 ;
	out[13] |= in[25] << 18 ;
	out[14] |= in[26] << 18 ;
	out[15] |= in[27] << 18 ;

	out[16] = in[24] >> ( 32 - 18 ) ;
	out[17] = in[25] >> ( 32 - 18 ) ;
	out[18] = in[26] >> ( 32 - 18 ) ;
	out[19] = in[27] >> ( 32 - 18 ) ;

	out[16] |= in[28] << 5 ;
	out[17] |= in[29] << 5 ;
	out[18] |= in[30] << 5 ;
	out[19] |= in[31] << 5 ;

	out[16] |= in[32] << 24 ;
	out[17] |= in[33] << 24 ;
	out[18] |= in[34] << 24 ;
	out[19] |= in[35] << 24 ;

	out[20] = in[32] >> ( 32 - 24 ) ;
	out[21] = in[33] >> ( 32 - 24 ) ;
	out[22] = in[34] >> ( 32 - 24 ) ;
	out[23] = in[35] >> ( 32 - 24 ) ;

	out[20] |= in[36] << 11 ;
	out[21] |= in[37] << 11 ;
	out[22] |= in[38] << 11 ;
	out[23] |= in[39] << 11 ;

	out[20] |= in[40] << 30 ;
	out[21] |= in[41] << 30 ;
	out[22] |= in[42] << 30 ;
	out[23] |= in[43] << 30 ;

	out[24] = in[40] >> ( 32 - 30 ) ;
	out[25] = in[41] >> ( 32 - 30 ) ;
	out[26] = in[42] >> ( 32 - 30 ) ;
	out[27] = in[43] >> ( 32 - 30 ) ;

	out[24] |= in[44] << 17 ;
	out[25] |= in[45] << 17 ;
	out[26] |= in[46] << 17 ;
	out[27] |= in[47] << 17 ;

	out[28] = in[44] >> ( 32 - 17 ) ;
	out[29] = in[45] >> ( 32 - 17 ) ;
	out[30] = in[46] >> ( 32 - 17 ) ;
	out[31] = in[47] >> ( 32 - 17 ) ;

	out[28] |= in[48] << 4 ;
	out[29] |= in[49] << 4 ;
	out[30] |= in[50] << 4 ;
	out[31] |= in[51] << 4 ;

	out[28] |= in[52] << 23 ;
	out[29] |= in[53] << 23 ;
	out[30] |= in[54] << 23 ;
	out[31] |= in[55] << 23 ;

	out[32] = in[52] >> ( 32 - 23 ) ;
	out[33] = in[53] >> ( 32 - 23 ) ;
	out[34] = in[54] >> ( 32 - 23 ) ;
	out[35] = in[55] >> ( 32 - 23 ) ;

	out[32] |= in[56] << 10 ;
	out[33] |= in[57] << 10 ;
	out[34] |= in[58] << 10 ;
	out[35] |= in[59] << 10 ;

	out[32] |= in[60] << 29 ;
	out[33] |= in[61] << 29 ;
	out[34] |= in[62] << 29 ;
	out[35] |= in[63] << 29 ;

	out[36] = in[60] >> ( 32 - 29 ) ;
	out[37] = in[61] >> ( 32 - 29 ) ;
	out[38] = in[62] >> ( 32 - 29 ) ;
	out[39] = in[63] >> ( 32 - 29 ) ;

	out[36] |= in[64] << 16 ;
	out[37] |= in[65] << 16 ;
	out[38] |= in[66] << 16 ;
	out[39] |= in[67] << 16 ;

	out[40] = in[64] >> ( 32 - 16 ) ;
	out[41] = in[65] >> ( 32 - 16 ) ;
	out[42] = in[66] >> ( 32 - 16 ) ;
	out[43] = in[67] >> ( 32 - 16 ) ;

	out[40] |= in[68] << 3 ;
	out[41] |= in[69] << 3 ;
	out[42] |= in[70] << 3 ;
	out[43] |= in[71] << 3 ;

	out[40] |= in[72] << 22 ;
	out[41] |= in[73] << 22 ;
	out[42] |= in[74] << 22 ;
	out[43] |= in[75] << 22 ;

	out[44] = in[72] >> ( 32 - 22 ) ;
	out[45] = in[73] >> ( 32 - 22 ) ;
	out[46] = in[74] >> ( 32 - 22 ) ;
	out[47] = in[75] >> ( 32 - 22 ) ;

	out[44] |= in[76] << 9 ;
	out[45] |= in[77] << 9 ;
	out[46] |= in[78] << 9 ;
	out[47] |= in[79] << 9 ;

	out[44] |= in[80] << 28 ;
	out[45] |= in[81] << 28 ;
	out[46] |= in[82] << 28 ;
	out[47] |= in[83] << 28 ;

	out[48] = in[80] >> ( 32 - 28 ) ;
	out[49] = in[81] >> ( 32 - 28 ) ;
	out[50] = in[82] >> ( 32 - 28 ) ;
	out[51] = in[83] >> ( 32 - 28 ) ;

	out[48] |= in[84] << 15 ;
	out[49] |= in[85] << 15 ;
	out[50] |= in[86] << 15 ;
	out[51] |= in[87] << 15 ;

	out[52] = in[84] >> ( 32 - 15 ) ;
	out[53] = in[85] >> ( 32 - 15 ) ;
	out[54] = in[86] >> ( 32 - 15 ) ;
	out[55] = in[87] >> ( 32 - 15 ) ;

	out[52] |= in[88] << 2 ;
	out[53] |= in[89] << 2 ;
	out[54] |= in[90] << 2 ;
	out[55] |= in[91] << 2 ;

	out[52] |= in[92] << 21 ;
	out[53] |= in[93] << 21 ;
	out[54] |= in[94] << 21 ;
	out[55] |= in[95] << 21 ;

	out[56] = in[92] >> ( 32 - 21 ) ;
	out[57] = in[93] >> ( 32 - 21 ) ;
	out[58] = in[94] >> ( 32 - 21 ) ;
	out[59] = in[95] >> ( 32 - 21 ) ;

	out[56] |= in[96] << 8 ;
	out[57] |= in[97] << 8 ;
	out[58] |= in[98] << 8 ;
	out[59] |= in[99] << 8 ;

	out[56] |= in[100] << 27 ;
	out[57] |= in[101] << 27 ;
	out[58] |= in[102] << 27 ;
	out[59] |= in[103] << 27 ;

	out[60] = in[100] >> ( 32 - 27 ) ;
	out[61] = in[101] >> ( 32 - 27 ) ;
	out[62] = in[102] >> ( 32 - 27 ) ;
	out[63] = in[103] >> ( 32 - 27 ) ;

	out[60] |= in[104] << 14 ;
	out[61] |= in[105] << 14 ;
	out[62] |= in[106] << 14 ;
	out[63] |= in[107] << 14 ;

	out[64] = in[104] >> ( 32 - 14 ) ;
	out[65] = in[105] >> ( 32 - 14 ) ;
	out[66] = in[106] >> ( 32 - 14 ) ;
	out[67] = in[107] >> ( 32 - 14 ) ;

	out[64] |= in[108] << 1 ;
	out[65] |= in[109] << 1 ;
	out[66] |= in[110] << 1 ;
	out[67] |= in[111] << 1 ;

	out[64] |= in[112] << 20 ;
	out[65] |= in[113] << 20 ;
	out[66] |= in[114] << 20 ;
	out[67] |= in[115] << 20 ;

	out[68] = in[112] >> ( 32 - 20 ) ;
	out[69] = in[113] >> ( 32 - 20 ) ;
	out[70] = in[114] >> ( 32 - 20 ) ;
	out[71] = in[115] >> ( 32 - 20 ) ;

	out[68] |= in[116] << 7 ;
	out[69] |= in[117] << 7 ;
	out[70] |= in[118] << 7 ;
	out[71] |= in[119] << 7 ;

	out[68] |= in[120] << 26 ;
	out[69] |= in[121] << 26 ;
	out[70] |= in[122] << 26 ;
	out[71] |= in[123] << 26 ;

	out[72] = in[120] >> ( 32 - 26 ) ;
	out[73] = in[121] >> ( 32 - 26 ) ;
	out[74] = in[122] >> ( 32 - 26 ) ;
	out[75] = in[123] >> ( 32 - 26 ) ;

	out[72] |= in[124] << 13 ;
	out[73] |= in[125] << 13 ;
	out[74] |= in[126] << 13 ;
	out[75] |= in[127] << 13 ;
}


// 20-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c20(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 20 ;
	out[1] |= in[5] << 20 ;
	out[2] |= in[6] << 20 ;
	out[3] |= in[7] << 20 ;

	out[4] = in[4] >> ( 32 - 20 ) ;
	out[5] = in[5] >> ( 32 - 20 ) ;
	out[6] = in[6] >> ( 32 - 20 ) ;
	out[7] = in[7] >> ( 32 - 20 ) ;

	out[4] |= in[8] << 8 ;
	out[5] |= in[9] << 8 ;
	out[6] |= in[10] << 8 ;
	out[7] |= in[11] << 8 ;

	out[4] |= in[12] << 28 ;
	out[5] |= in[13] << 28 ;
	out[6] |= in[14] << 28 ;
	out[7] |= in[15] << 28 ;

	out[8] = in[12] >> ( 32 - 28 ) ;
	out[9] = in[13] >> ( 32 - 28 ) ;
	out[10] = in[14] >> ( 32 - 28 ) ;
	out[11] = in[15] >> ( 32 - 28 ) ;

	out[8] |= in[16] << 16 ;
	out[9] |= in[17] << 16 ;
	out[10] |= in[18] << 16 ;
	out[11] |= in[19] << 16 ;

	out[12] = in[16] >> ( 32 - 16 ) ;
	out[13] = in[17] >> ( 32 - 16 ) ;
	out[14] = in[18] >> ( 32 - 16 ) ;
	out[15] = in[19] >> ( 32 - 16 ) ;

	out[12] |= in[20] << 4 ;
	out[13] |= in[21] << 4 ;
	out[14] |= in[22] << 4 ;
	out[15] |= in[23] << 4 ;

	out[12] |= in[24] << 24 ;
	out[13] |= in[25] << 24 ;
	out[14] |= in[26] << 24 ;
	out[15] |= in[27] << 24 ;

	out[16] = in[24] >> ( 32 - 24 ) ;
	out[17] = in[25] >> ( 32 - 24 ) ;
	out[18] = in[26] >> ( 32 - 24 ) ;
	out[19] = in[27] >> ( 32 - 24 ) ;

	out[16] |= in[28] << 12 ;
	out[17] |= in[29] << 12 ;
	out[18] |= in[30] << 12 ;
	out[19] |= in[31] << 12 ;

	out[20] = in[32] << 0 ;
	out[21] = in[33] << 0 ;
	out[22] = in[34] << 0 ;
	out[23] = in[35] << 0 ;

	out[20] |= in[36] << 20 ;
	out[21] |= in[37] << 20 ;
	out[22] |= in[38] << 20 ;
	out[23] |= in[39] << 20 ;

	out[24] = in[36] >> ( 32 - 20 ) ;
	out[25] = in[37] >> ( 32 - 20 ) ;
	out[26] = in[38] >> ( 32 - 20 ) ;
	out[27] = in[39] >> ( 32 - 20 ) ;

	out[24] |= in[40] << 8 ;
	out[25] |= in[41] << 8 ;
	out[26] |= in[42] << 8 ;
	out[27] |= in[43] << 8 ;

	out[24] |= in[44] << 28 ;
	out[25] |= in[45] << 28 ;
	out[26] |= in[46] << 28 ;
	out[27] |= in[47] << 28 ;

	out[28] = in[44] >> ( 32 - 28 ) ;
	out[29] = in[45] >> ( 32 - 28 ) ;
	out[30] = in[46] >> ( 32 - 28 ) ;
	out[31] = in[47] >> ( 32 - 28 ) ;

	out[28] |= in[48] << 16 ;
	out[29] |= in[49] << 16 ;
	out[30] |= in[50] << 16 ;
	out[31] |= in[51] << 16 ;

	out[32] = in[48] >> ( 32 - 16 ) ;
	out[33] = in[49] >> ( 32 - 16 ) ;
	out[34] = in[50] >> ( 32 - 16 ) ;
	out[35] = in[51] >> ( 32 - 16 ) ;

	out[32] |= in[52] << 4 ;
	out[33] |= in[53] << 4 ;
	out[34] |= in[54] << 4 ;
	out[35] |= in[55] << 4 ;

	out[32] |= in[56] << 24 ;
	out[33] |= in[57] << 24 ;
	out[34] |= in[58] << 24 ;
	out[35] |= in[59] << 24 ;

	out[36] = in[56] >> ( 32 - 24 ) ;
	out[37] = in[57] >> ( 32 - 24 ) ;
	out[38] = in[58] >> ( 32 - 24 ) ;
	out[39] = in[59] >> ( 32 - 24 ) ;

	out[36] |= in[60] << 12 ;
	out[37] |= in[61] << 12 ;
	out[38] |= in[62] << 12 ;
	out[39] |= in[63] << 12 ;

	out[40] = in[64] << 0 ;
	out[41] = in[65] << 0 ;
	out[42] = in[66] << 0 ;
	out[43] = in[67] << 0 ;

	out[40] |= in[68] << 20 ;
	out[41] |= in[69] << 20 ;
	out[42] |= in[70] << 20 ;
	out[43] |= in[71] << 20 ;

	out[44] = in[68] >> ( 32 - 20 ) ;
	out[45] = in[69] >> ( 32 - 20 ) ;
	out[46] = in[70] >> ( 32 - 20 ) ;
	out[47] = in[71] >> ( 32 - 20 ) ;

	out[44] |= in[72] << 8 ;
	out[45] |= in[73] << 8 ;
	out[46] |= in[74] << 8 ;
	out[47] |= in[75] << 8 ;

	out[44] |= in[76] << 28 ;
	out[45] |= in[77] << 28 ;
	out[46] |= in[78] << 28 ;
	out[47] |= in[79] << 28 ;

	out[48] = in[76] >> ( 32 - 28 ) ;
	out[49] = in[77] >> ( 32 - 28 ) ;
	out[50] = in[78] >> ( 32 - 28 ) ;
	out[51] = in[79] >> ( 32 - 28 ) ;

	out[48] |= in[80] << 16 ;
	out[49] |= in[81] << 16 ;
	out[50] |= in[82] << 16 ;
	out[51] |= in[83] << 16 ;

	out[52] = in[80] >> ( 32 - 16 ) ;
	out[53] = in[81] >> ( 32 - 16 ) ;
	out[54] = in[82] >> ( 32 - 16 ) ;
	out[55] = in[83] >> ( 32 - 16 ) ;

	out[52] |= in[84] << 4 ;
	out[53] |= in[85] << 4 ;
	out[54] |= in[86] << 4 ;
	out[55] |= in[87] << 4 ;

	out[52] |= in[88] << 24 ;
	out[53] |= in[89] << 24 ;
	out[54] |= in[90] << 24 ;
	out[55] |= in[91] << 24 ;

	out[56] = in[88] >> ( 32 - 24 ) ;
	out[57] = in[89] >> ( 32 - 24 ) ;
	out[58] = in[90] >> ( 32 - 24 ) ;
	out[59] = in[91] >> ( 32 - 24 ) ;

	out[56] |= in[92] << 12 ;
	out[57] |= in[93] << 12 ;
	out[58] |= in[94] << 12 ;
	out[59] |= in[95] << 12 ;

	out[60] = in[96] << 0 ;
	out[61] = in[97] << 0 ;
	out[62] = in[98] << 0 ;
	out[63] = in[99] << 0 ;

	out[60] |= in[100] << 20 ;
	out[61] |= in[101] << 20 ;
	out[62] |= in[102] << 20 ;
	out[63] |= in[103] << 20 ;

	out[64] = in[100] >> ( 32 - 20 ) ;
	out[65] = in[101] >> ( 32 - 20 ) ;
	out[66] = in[102] >> ( 32 - 20 ) ;
	out[67] = in[103] >> ( 32 - 20 ) ;

	out[64] |= in[104] << 8 ;
	out[65] |= in[105] << 8 ;
	out[66] |= in[106] << 8 ;
	out[67] |= in[107] << 8 ;

	out[64] |= in[108] << 28 ;
	out[65] |= in[109] << 28 ;
	out[66] |= in[110] << 28 ;
	out[67] |= in[111] << 28 ;

	out[68] = in[108] >> ( 32 - 28 ) ;
	out[69] = in[109] >> ( 32 - 28 ) ;
	out[70] = in[110] >> ( 32 - 28 ) ;
	out[71] = in[111] >> ( 32 - 28 ) ;

	out[68] |= in[112] << 16 ;
	out[69] |= in[113] << 16 ;
	out[70] |= in[114] << 16 ;
	out[71] |= in[115] << 16 ;

	out[72] = in[112] >> ( 32 - 16 ) ;
	out[73] = in[113] >> ( 32 - 16 ) ;
	out[74] = in[114] >> ( 32 - 16 ) ;
	out[75] = in[115] >> ( 32 - 16 ) ;

	out[72] |= in[116] << 4 ;
	out[73] |= in[117] << 4 ;
	out[74] |= in[118] << 4 ;
	out[75] |= in[119] << 4 ;

	out[72] |= in[120] << 24 ;
	out[73] |= in[121] << 24 ;
	out[74] |= in[122] << 24 ;
	out[75] |= in[123] << 24 ;

	out[76] = in[120] >> ( 32 - 24 ) ;
	out[77] = in[121] >> ( 32 - 24 ) ;
	out[78] = in[122] >> ( 32 - 24 ) ;
	out[79] = in[123] >> ( 32 - 24 ) ;

	out[76] |= in[124] << 12 ;
	out[77] |= in[125] << 12 ;
	out[78] |= in[126] << 12 ;
	out[79] |= in[127] << 12 ;
}


// 21-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c21(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 21 ;
	out[1] |= in[5] << 21 ;
	out[2] |= in[6] << 21 ;
	out[3] |= in[7] << 21 ;

	out[4] = in[4] >> ( 32 - 21 ) ;
	out[5] = in[5] >> ( 32 - 21 ) ;
	out[6] = in[6] >> ( 32 - 21 ) ;
	out[7] = in[7] >> ( 32 - 21 ) ;

	out[4] |= in[8] << 10 ;
	out[5] |= in[9] << 10 ;
	out[6] |= in[10] << 10 ;
	out[7] |= in[11] << 10 ;

	out[4] |= in[12] << 31 ;
	out[5] |= in[13] << 31 ;
	out[6] |= in[14] << 31 ;
	out[7] |= in[15] << 31 ;

	out[8] = in[12] >> ( 32 - 31 ) ;
	out[9] = in[13] >> ( 32 - 31 ) ;
	out[10] = in[14] >> ( 32 - 31 ) ;
	out[11] = in[15] >> ( 32 - 31 ) ;

	out[8] |= in[16] << 20 ;
	out[9] |= in[17] << 20 ;
	out[10] |= in[18] << 20 ;
	out[11] |= in[19] << 20 ;

	out[12] = in[16] >> ( 32 - 20 ) ;
	out[13] = in[17] >> ( 32 - 20 ) ;
	out[14] = in[18] >> ( 32 - 20 ) ;
	out[15] = in[19] >> ( 32 - 20 ) ;

	out[12] |= in[20] << 9 ;
	out[13] |= in[21] << 9 ;
	out[14] |= in[22] << 9 ;
	out[15] |= in[23] << 9 ;

	out[12] |= in[24] << 30 ;
	out[13] |= in[25] << 30 ;
	out[14] |= in[26] << 30 ;
	out[15] |= in[27] << 30 ;

	out[16] = in[24] >> ( 32 - 30 ) ;
	out[17] = in[25] >> ( 32 - 30 ) ;
	out[18] = in[26] >> ( 32 - 30 ) ;
	out[19] = in[27] >> ( 32 - 30 ) ;

	out[16] |= in[28] << 19 ;
	out[17] |= in[29] << 19 ;
	out[18] |= in[30] << 19 ;
	out[19] |= in[31] << 19 ;

	out[20] = in[28] >> ( 32 - 19 ) ;
	out[21] = in[29] >> ( 32 - 19 ) ;
	out[22] = in[30] >> ( 32 - 19 ) ;
	out[23] = in[31] >> ( 32 - 19 ) ;

	out[20] |= in[32] << 8 ;
	out[21] |= in[33] << 8 ;
	out[22] |= in[34] << 8 ;
	out[23] |= in[35] << 8 ;

	out[20] |= in[36] << 29 ;
	out[21] |= in[37] << 29 ;
	out[22] |= in[38] << 29 ;
	out[23] |= in[39] << 29 ;

	out[24] = in[36] >> ( 32 - 29 ) ;
	out[25] = in[37] >> ( 32 - 29 ) ;
	out[26] = in[38] >> ( 32 - 29 ) ;
	out[27] = in[39] >> ( 32 - 29 ) ;

	out[24] |= in[40] << 18 ;
	out[25] |= in[41] << 18 ;
	out[26] |= in[42] << 18 ;
	out[27] |= in[43] << 18 ;

	out[28] = in[40] >> ( 32 - 18 ) ;
	out[29] = in[41] >> ( 32 - 18 ) ;
	out[30] = in[42] >> ( 32 - 18 ) ;
	out[31] = in[43] >> ( 32 - 18 ) ;

	out[28] |= in[44] << 7 ;
	out[29] |= in[45] << 7 ;
	out[30] |= in[46] << 7 ;
	out[31] |= in[47] << 7 ;

	out[28] |= in[48] << 28 ;
	out[29] |= in[49] << 28 ;
	out[30] |= in[50] << 28 ;
	out[31] |= in[51] << 28 ;

	out[32] = in[48] >> ( 32 - 28 ) ;
	out[33] = in[49] >> ( 32 - 28 ) ;
	out[34] = in[50] >> ( 32 - 28 ) ;
	out[35] = in[51] >> ( 32 - 28 ) ;

	out[32] |= in[52] << 17 ;
	out[33] |= in[53] << 17 ;
	out[34] |= in[54] << 17 ;
	out[35] |= in[55] << 17 ;

	out[36] = in[52] >> ( 32 - 17 ) ;
	out[37] = in[53] >> ( 32 - 17 ) ;
	out[38] = in[54] >> ( 32 - 17 ) ;
	out[39] = in[55] >> ( 32 - 17 ) ;

	out[36] |= in[56] << 6 ;
	out[37] |= in[57] << 6 ;
	out[38] |= in[58] << 6 ;
	out[39] |= in[59] << 6 ;

	out[36] |= in[60] << 27 ;
	out[37] |= in[61] << 27 ;
	out[38] |= in[62] << 27 ;
	out[39] |= in[63] << 27 ;

	out[40] = in[60] >> ( 32 - 27 ) ;
	out[41] = in[61] >> ( 32 - 27 ) ;
	out[42] = in[62] >> ( 32 - 27 ) ;
	out[43] = in[63] >> ( 32 - 27 ) ;

	out[40] |= in[64] << 16 ;
	out[41] |= in[65] << 16 ;
	out[42] |= in[66] << 16 ;
	out[43] |= in[67] << 16 ;

	out[44] = in[64] >> ( 32 - 16 ) ;
	out[45] = in[65] >> ( 32 - 16 ) ;
	out[46] = in[66] >> ( 32 - 16 ) ;
	out[47] = in[67] >> ( 32 - 16 ) ;

	out[44] |= in[68] << 5 ;
	out[45] |= in[69] << 5 ;
	out[46] |= in[70] << 5 ;
	out[47] |= in[71] << 5 ;

	out[44] |= in[72] << 26 ;
	out[45] |= in[73] << 26 ;
	out[46] |= in[74] << 26 ;
	out[47] |= in[75] << 26 ;

	out[48] = in[72] >> ( 32 - 26 ) ;
	out[49] = in[73] >> ( 32 - 26 ) ;
	out[50] = in[74] >> ( 32 - 26 ) ;
	out[51] = in[75] >> ( 32 - 26 ) ;

	out[48] |= in[76] << 15 ;
	out[49] |= in[77] << 15 ;
	out[50] |= in[78] << 15 ;
	out[51] |= in[79] << 15 ;

	out[52] = in[76] >> ( 32 - 15 ) ;
	out[53] = in[77] >> ( 32 - 15 ) ;
	out[54] = in[78] >> ( 32 - 15 ) ;
	out[55] = in[79] >> ( 32 - 15 ) ;

	out[52] |= in[80] << 4 ;
	out[53] |= in[81] << 4 ;
	out[54] |= in[82] << 4 ;
	out[55] |= in[83] << 4 ;

	out[52] |= in[84] << 25 ;
	out[53] |= in[85] << 25 ;
	out[54] |= in[86] << 25 ;
	out[55] |= in[87] << 25 ;

	out[56] = in[84] >> ( 32 - 25 ) ;
	out[57] = in[85] >> ( 32 - 25 ) ;
	out[58] = in[86] >> ( 32 - 25 ) ;
	out[59] = in[87] >> ( 32 - 25 ) ;

	out[56] |= in[88] << 14 ;
	out[57] |= in[89] << 14 ;
	out[58] |= in[90] << 14 ;
	out[59] |= in[91] << 14 ;

	out[60] = in[88] >> ( 32 - 14 ) ;
	out[61] = in[89] >> ( 32 - 14 ) ;
	out[62] = in[90] >> ( 32 - 14 ) ;
	out[63] = in[91] >> ( 32 - 14 ) ;

	out[60] |= in[92] << 3 ;
	out[61] |= in[93] << 3 ;
	out[62] |= in[94] << 3 ;
	out[63] |= in[95] << 3 ;

	out[60] |= in[96] << 24 ;
	out[61] |= in[97] << 24 ;
	out[62] |= in[98] << 24 ;
	out[63] |= in[99] << 24 ;

	out[64] = in[96] >> ( 32 - 24 ) ;
	out[65] = in[97] >> ( 32 - 24 ) ;
	out[66] = in[98] >> ( 32 - 24 ) ;
	out[67] = in[99] >> ( 32 - 24 ) ;

	out[64] |= in[100] << 13 ;
	out[65] |= in[101] << 13 ;
	out[66] |= in[102] << 13 ;
	out[67] |= in[103] << 13 ;

	out[68] = in[100] >> ( 32 - 13 ) ;
	out[69] = in[101] >> ( 32 - 13 ) ;
	out[70] = in[102] >> ( 32 - 13 ) ;
	out[71] = in[103] >> ( 32 - 13 ) ;

	out[68] |= in[104] << 2 ;
	out[69] |= in[105] << 2 ;
	out[70] |= in[106] << 2 ;
	out[71] |= in[107] << 2 ;

	out[68] |= in[108] << 23 ;
	out[69] |= in[109] << 23 ;
	out[70] |= in[110] << 23 ;
	out[71] |= in[111] << 23 ;

	out[72] = in[108] >> ( 32 - 23 ) ;
	out[73] = in[109] >> ( 32 - 23 ) ;
	out[74] = in[110] >> ( 32 - 23 ) ;
	out[75] = in[111] >> ( 32 - 23 ) ;

	out[72] |= in[112] << 12 ;
	out[73] |= in[113] << 12 ;
	out[74] |= in[114] << 12 ;
	out[75] |= in[115] << 12 ;

	out[76] = in[112] >> ( 32 - 12 ) ;
	out[77] = in[113] >> ( 32 - 12 ) ;
	out[78] = in[114] >> ( 32 - 12 ) ;
	out[79] = in[115] >> ( 32 - 12 ) ;

	out[76] |= in[116] << 1 ;
	out[77] |= in[117] << 1 ;
	out[78] |= in[118] << 1 ;
	out[79] |= in[119] << 1 ;

	out[76] |= in[120] << 22 ;
	out[77] |= in[121] << 22 ;
	out[78] |= in[122] << 22 ;
	out[79] |= in[123] << 22 ;

	out[80] = in[120] >> ( 32 - 22 ) ;
	out[81] = in[121] >> ( 32 - 22 ) ;
	out[82] = in[122] >> ( 32 - 22 ) ;
	out[83] = in[123] >> ( 32 - 22 ) ;

	out[80] |= in[124] << 11 ;
	out[81] |= in[125] << 11 ;
	out[82] |= in[126] << 11 ;
	out[83] |= in[127] << 11 ;
}


// 22-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c22(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 22 ;
	out[1] |= in[5] << 22 ;
	out[2] |= in[6] << 22 ;
	out[3] |= in[7] << 22 ;

	out[4] = in[4] >> ( 32 - 22 ) ;
	out[5] = in[5] >> ( 32 - 22 ) ;
	out[6] = in[6] >> ( 32 - 22 ) ;
	out[7] = in[7] >> ( 32 - 22 ) ;

	out[4] |= in[8] << 12 ;
	out[5] |= in[9] << 12 ;
	out[6] |= in[10] << 12 ;
	out[7] |= in[11] << 12 ;

	out[8] = in[8] >> ( 32 - 12 ) ;
	out[9] = in[9] >> ( 32 - 12 ) ;
	out[10] = in[10] >> ( 32 - 12 ) ;
	out[11] = in[11] >> ( 32 - 12 ) ;

	out[8] |= in[12] << 2 ;
	out[9] |= in[13] << 2 ;
	out[10] |= in[14] << 2 ;
	out[11] |= in[15] << 2 ;

	out[8] |= in[16] << 24 ;
	out[9] |= in[17] << 24 ;
	out[10] |= in[18] << 24 ;
	out[11] |= in[19] << 24 ;

	out[12] = in[16] >> ( 32 - 24 ) ;
	out[13] = in[17] >> ( 32 - 24 ) ;
	out[14] = in[18] >> ( 32 - 24 ) ;
	out[15] = in[19] >> ( 32 - 24 ) ;

	out[12] |= in[20] << 14 ;
	out[13] |= in[21] << 14 ;
	out[14] |= in[22] << 14 ;
	out[15] |= in[23] << 14 ;

	out[16] = in[20] >> ( 32 - 14 ) ;
	out[17] = in[21] >> ( 32 - 14 ) ;
	out[18] = in[22] >> ( 32 - 14 ) ;
	out[19] = in[23] >> ( 32 - 14 ) ;

	out[16] |= in[24] << 4 ;
	out[17] |= in[25] << 4 ;
	out[18] |= in[26] << 4 ;
	out[19] |= in[27] << 4 ;

	out[16] |= in[28] << 26 ;
	out[17] |= in[29] << 26 ;
	out[18] |= in[30] << 26 ;
	out[19] |= in[31] << 26 ;

	out[20] = in[28] >> ( 32 - 26 ) ;
	out[21] = in[29] >> ( 32 - 26 ) ;
	out[22] = in[30] >> ( 32 - 26 ) ;
	out[23] = in[31] >> ( 32 - 26 ) ;

	out[20] |= in[32] << 16 ;
	out[21] |= in[33] << 16 ;
	out[22] |= in[34] << 16 ;
	out[23] |= in[35] << 16 ;

	out[24] = in[32] >> ( 32 - 16 ) ;
	out[25] = in[33] >> ( 32 - 16 ) ;
	out[26] = in[34] >> ( 32 - 16 ) ;
	out[27] = in[35] >> ( 32 - 16 ) ;

	out[24] |= in[36] << 6 ;
	out[25] |= in[37] << 6 ;
	out[26] |= in[38] << 6 ;
	out[27] |= in[39] << 6 ;

	out[24] |= in[40] << 28 ;
	out[25] |= in[41] << 28 ;
	out[26] |= in[42] << 28 ;
	out[27] |= in[43] << 28 ;

	out[28] = in[40] >> ( 32 - 28 ) ;
	out[29] = in[41] >> ( 32 - 28 ) ;
	out[30] = in[42] >> ( 32 - 28 ) ;
	out[31] = in[43] >> ( 32 - 28 ) ;

	out[28] |= in[44] << 18 ;
	out[29] |= in[45] << 18 ;
	out[30] |= in[46] << 18 ;
	out[31] |= in[47] << 18 ;

	out[32] = in[44] >> ( 32 - 18 ) ;
	out[33] = in[45] >> ( 32 - 18 ) ;
	out[34] = in[46] >> ( 32 - 18 ) ;
	out[35] = in[47] >> ( 32 - 18 ) ;

	out[32] |= in[48] << 8 ;
	out[33] |= in[49] << 8 ;
	out[34] |= in[50] << 8 ;
	out[35] |= in[51] << 8 ;

	out[32] |= in[52] << 30 ;
	out[33] |= in[53] << 30 ;
	out[34] |= in[54] << 30 ;
	out[35] |= in[55] << 30 ;

	out[36] = in[52] >> ( 32 - 30 ) ;
	out[37] = in[53] >> ( 32 - 30 ) ;
	out[38] = in[54] >> ( 32 - 30 ) ;
	out[39] = in[55] >> ( 32 - 30 ) ;

	out[36] |= in[56] << 20 ;
	out[37] |= in[57] << 20 ;
	out[38] |= in[58] << 20 ;
	out[39] |= in[59] << 20 ;

	out[40] = in[56] >> ( 32 - 20 ) ;
	out[41] = in[57] >> ( 32 - 20 ) ;
	out[42] = in[58] >> ( 32 - 20 ) ;
	out[43] = in[59] >> ( 32 - 20 ) ;

	out[40] |= in[60] << 10 ;
	out[41] |= in[61] << 10 ;
	out[42] |= in[62] << 10 ;
	out[43] |= in[63] << 10 ;

	out[44] = in[64] << 0 ;
	out[45] = in[65] << 0 ;
	out[46] = in[66] << 0 ;
	out[47] = in[67] << 0 ;

	out[44] |= in[68] << 22 ;
	out[45] |= in[69] << 22 ;
	out[46] |= in[70] << 22 ;
	out[47] |= in[71] << 22 ;

	out[48] = in[68] >> ( 32 - 22 ) ;
	out[49] = in[69] >> ( 32 - 22 ) ;
	out[50] = in[70] >> ( 32 - 22 ) ;
	out[51] = in[71] >> ( 32 - 22 ) ;

	out[48] |= in[72] << 12 ;
	out[49] |= in[73] << 12 ;
	out[50] |= in[74] << 12 ;
	out[51] |= in[75] << 12 ;

	out[52] = in[72] >> ( 32 - 12 ) ;
	out[53] = in[73] >> ( 32 - 12 ) ;
	out[54] = in[74] >> ( 32 - 12 ) ;
	out[55] = in[75] >> ( 32 - 12 ) ;

	out[52] |= in[76] << 2 ;
	out[53] |= in[77] << 2 ;
	out[54] |= in[78] << 2 ;
	out[55] |= in[79] << 2 ;

	out[52] |= in[80] << 24 ;
	out[53] |= in[81] << 24 ;
	out[54] |= in[82] << 24 ;
	out[55] |= in[83] << 24 ;

	out[56] = in[80] >> ( 32 - 24 ) ;
	out[57] = in[81] >> ( 32 - 24 ) ;
	out[58] = in[82] >> ( 32 - 24 ) ;
	out[59] = in[83] >> ( 32 - 24 ) ;

	out[56] |= in[84] << 14 ;
	out[57] |= in[85] << 14 ;
	out[58] |= in[86] << 14 ;
	out[59] |= in[87] << 14 ;

	out[60] = in[84] >> ( 32 - 14 ) ;
	out[61] = in[85] >> ( 32 - 14 ) ;
	out[62] = in[86] >> ( 32 - 14 ) ;
	out[63] = in[87] >> ( 32 - 14 ) ;

	out[60] |= in[88] << 4 ;
	out[61] |= in[89] << 4 ;
	out[62] |= in[90] << 4 ;
	out[63] |= in[91] << 4 ;

	out[60] |= in[92] << 26 ;
	out[61] |= in[93] << 26 ;
	out[62] |= in[94] << 26 ;
	out[63] |= in[95] << 26 ;

	out[64] = in[92] >> ( 32 - 26 ) ;
	out[65] = in[93] >> ( 32 - 26 ) ;
	out[66] = in[94] >> ( 32 - 26 ) ;
	out[67] = in[95] >> ( 32 - 26 ) ;

	out[64] |= in[96] << 16 ;
	out[65] |= in[97] << 16 ;
	out[66] |= in[98] << 16 ;
	out[67] |= in[99] << 16 ;

	out[68] = in[96] >> ( 32 - 16 ) ;
	out[69] = in[97] >> ( 32 - 16 ) ;
	out[70] = in[98] >> ( 32 - 16 ) ;
	out[71] = in[99] >> ( 32 - 16 ) ;

	out[68] |= in[100] << 6 ;
	out[69] |= in[101] << 6 ;
	out[70] |= in[102] << 6 ;
	out[71] |= in[103] << 6 ;

	out[68] |= in[104] << 28 ;
	out[69] |= in[105] << 28 ;
	out[70] |= in[106] << 28 ;
	out[71] |= in[107] << 28 ;

	out[72] = in[104] >> ( 32 - 28 ) ;
	out[73] = in[105] >> ( 32 - 28 ) ;
	out[74] = in[106] >> ( 32 - 28 ) ;
	out[75] = in[107] >> ( 32 - 28 ) ;

	out[72] |= in[108] << 18 ;
	out[73] |= in[109] << 18 ;
	out[74] |= in[110] << 18 ;
	out[75] |= in[111] << 18 ;

	out[76] = in[108] >> ( 32 - 18 ) ;
	out[77] = in[109] >> ( 32 - 18 ) ;
	out[78] = in[110] >> ( 32 - 18 ) ;
	out[79] = in[111] >> ( 32 - 18 ) ;

	out[76] |= in[112] << 8 ;
	out[77] |= in[113] << 8 ;
	out[78] |= in[114] << 8 ;
	out[79] |= in[115] << 8 ;

	out[76] |= in[116] << 30 ;
	out[77] |= in[117] << 30 ;
	out[78] |= in[118] << 30 ;
	out[79] |= in[119] << 30 ;

	out[80] = in[116] >> ( 32 - 30 ) ;
	out[81] = in[117] >> ( 32 - 30 ) ;
	out[82] = in[118] >> ( 32 - 30 ) ;
	out[83] = in[119] >> ( 32 - 30 ) ;

	out[80] |= in[120] << 20 ;
	out[81] |= in[121] << 20 ;
	out[82] |= in[122] << 20 ;
	out[83] |= in[123] << 20 ;

	out[84] = in[120] >> ( 32 - 20 ) ;
	out[85] = in[121] >> ( 32 - 20 ) ;
	out[86] = in[122] >> ( 32 - 20 ) ;
	out[87] = in[123] >> ( 32 - 20 ) ;

	out[84] |= in[124] << 10 ;
	out[85] |= in[125] << 10 ;
	out[86] |= in[126] << 10 ;
	out[87] |= in[127] << 10 ;
}


// 23-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c23(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 23 ;
	out[1] |= in[5] << 23 ;
	out[2] |= in[6] << 23 ;
	out[3] |= in[7] << 23 ;

	out[4] = in[4] >> ( 32 - 23 ) ;
	out[5] = in[5] >> ( 32 - 23 ) ;
	out[6] = in[6] >> ( 32 - 23 ) ;
	out[7] = in[7] >> ( 32 - 23 ) ;

	out[4] |= in[8] << 14 ;
	out[5] |= in[9] << 14 ;
	out[6] |= in[10] << 14 ;
	out[7] |= in[11] << 14 ;

	out[8] = in[8] >> ( 32 - 14 ) ;
	out[9] = in[9] >> ( 32 - 14 ) ;
	out[10] = in[10] >> ( 32 - 14 ) ;
	out[11] = in[11] >> ( 32 - 14 ) ;

	out[8] |= in[12] << 5 ;
	out[9] |= in[13] << 5 ;
	out[10] |= in[14] << 5 ;
	out[11] |= in[15] << 5 ;

	out[8] |= in[16] << 28 ;
	out[9] |= in[17] << 28 ;
	out[10] |= in[18] << 28 ;
	out[11] |= in[19] << 28 ;

	out[12] = in[16] >> ( 32 - 28 ) ;
	out[13] = in[17] >> ( 32 - 28 ) ;
	out[14] = in[18] >> ( 32 - 28 ) ;
	out[15] = in[19] >> ( 32 - 28 ) ;

	out[12] |= in[20] << 19 ;
	out[13] |= in[21] << 19 ;
	out[14] |= in[22] << 19 ;
	out[15] |= in[23] << 19 ;

	out[16] = in[20] >> ( 32 - 19 ) ;
	out[17] = in[21] >> ( 32 - 19 ) ;
	out[18] = in[22] >> ( 32 - 19 ) ;
	out[19] = in[23] >> ( 32 - 19 ) ;

	out[16] |= in[24] << 10 ;
	out[17] |= in[25] << 10 ;
	out[18] |= in[26] << 10 ;
	out[19] |= in[27] << 10 ;

	out[20] = in[24] >> ( 32 - 10 ) ;
	out[21] = in[25] >> ( 32 - 10 ) ;
	out[22] = in[26] >> ( 32 - 10 ) ;
	out[23] = in[27] >> ( 32 - 10 ) ;

	out[20] |= in[28] << 1 ;
	out[21] |= in[29] << 1 ;
	out[22] |= in[30] << 1 ;
	out[23] |= in[31] << 1 ;

	out[20] |= in[32] << 24 ;
	out[21] |= in[33] << 24 ;
	out[22] |= in[34] << 24 ;
	out[23] |= in[35] << 24 ;

	out[24] = in[32] >> ( 32 - 24 ) ;
	out[25] = in[33] >> ( 32 - 24 ) ;
	out[26] = in[34] >> ( 32 - 24 ) ;
	out[27] = in[35] >> ( 32 - 24 ) ;

	out[24] |= in[36] << 15 ;
	out[25] |= in[37] << 15 ;
	out[26] |= in[38] << 15 ;
	out[27] |= in[39] << 15 ;

	out[28] = in[36] >> ( 32 - 15 ) ;
	out[29] = in[37] >> ( 32 - 15 ) ;
	out[30] = in[38] >> ( 32 - 15 ) ;
	out[31] = in[39] >> ( 32 - 15 ) ;

	out[28] |= in[40] << 6 ;
	out[29] |= in[41] << 6 ;
	out[30] |= in[42] << 6 ;
	out[31] |= in[43] << 6 ;

	out[28] |= in[44] << 29 ;
	out[29] |= in[45] << 29 ;
	out[30] |= in[46] << 29 ;
	out[31] |= in[47] << 29 ;

	out[32] = in[44] >> ( 32 - 29 ) ;
	out[33] = in[45] >> ( 32 - 29 ) ;
	out[34] = in[46] >> ( 32 - 29 ) ;
	out[35] = in[47] >> ( 32 - 29 ) ;

	out[32] |= in[48] << 20 ;
	out[33] |= in[49] << 20 ;
	out[34] |= in[50] << 20 ;
	out[35] |= in[51] << 20 ;

	out[36] = in[48] >> ( 32 - 20 ) ;
	out[37] = in[49] >> ( 32 - 20 ) ;
	out[38] = in[50] >> ( 32 - 20 ) ;
	out[39] = in[51] >> ( 32 - 20 ) ;

	out[36] |= in[52] << 11 ;
	out[37] |= in[53] << 11 ;
	out[38] |= in[54] << 11 ;
	out[39] |= in[55] << 11 ;

	out[40] = in[52] >> ( 32 - 11 ) ;
	out[41] = in[53] >> ( 32 - 11 ) ;
	out[42] = in[54] >> ( 32 - 11 ) ;
	out[43] = in[55] >> ( 32 - 11 ) ;

	out[40] |= in[56] << 2 ;
	out[41] |= in[57] << 2 ;
	out[42] |= in[58] << 2 ;
	out[43] |= in[59] << 2 ;

	out[40] |= in[60] << 25 ;
	out[41] |= in[61] << 25 ;
	out[42] |= in[62] << 25 ;
	out[43] |= in[63] << 25 ;

	out[44] = in[60] >> ( 32 - 25 ) ;
	out[45] = in[61] >> ( 32 - 25 ) ;
	out[46] = in[62] >> ( 32 - 25 ) ;
	out[47] = in[63] >> ( 32 - 25 ) ;

	out[44] |= in[64] << 16 ;
	out[45] |= in[65] << 16 ;
	out[46] |= in[66] << 16 ;
	out[47] |= in[67] << 16 ;

	out[48] = in[64] >> ( 32 - 16 ) ;
	out[49] = in[65] >> ( 32 - 16 ) ;
	out[50] = in[66] >> ( 32 - 16 ) ;
	out[51] = in[67] >> ( 32 - 16 ) ;

	out[48] |= in[68] << 7 ;
	out[49] |= in[69] << 7 ;
	out[50] |= in[70] << 7 ;
	out[51] |= in[71] << 7 ;

	out[48] |= in[72] << 30 ;
	out[49] |= in[73] << 30 ;
	out[50] |= in[74] << 30 ;
	out[51] |= in[75] << 30 ;

	out[52] = in[72] >> ( 32 - 30 ) ;
	out[53] = in[73] >> ( 32 - 30 ) ;
	out[54] = in[74] >> ( 32 - 30 ) ;
	out[55] = in[75] >> ( 32 - 30 ) ;

	out[52] |= in[76] << 21 ;
	out[53] |= in[77] << 21 ;
	out[54] |= in[78] << 21 ;
	out[55] |= in[79] << 21 ;

	out[56] = in[76] >> ( 32 - 21 ) ;
	out[57] = in[77] >> ( 32 - 21 ) ;
	out[58] = in[78] >> ( 32 - 21 ) ;
	out[59] = in[79] >> ( 32 - 21 ) ;

	out[56] |= in[80] << 12 ;
	out[57] |= in[81] << 12 ;
	out[58] |= in[82] << 12 ;
	out[59] |= in[83] << 12 ;

	out[60] = in[80] >> ( 32 - 12 ) ;
	out[61] = in[81] >> ( 32 - 12 ) ;
	out[62] = in[82] >> ( 32 - 12 ) ;
	out[63] = in[83] >> ( 32 - 12 ) ;

	out[60] |= in[84] << 3 ;
	out[61] |= in[85] << 3 ;
	out[62] |= in[86] << 3 ;
	out[63] |= in[87] << 3 ;

	out[60] |= in[88] << 26 ;
	out[61] |= in[89] << 26 ;
	out[62] |= in[90] << 26 ;
	out[63] |= in[91] << 26 ;

	out[64] = in[88] >> ( 32 - 26 ) ;
	out[65] = in[89] >> ( 32 - 26 ) ;
	out[66] = in[90] >> ( 32 - 26 ) ;
	out[67] = in[91] >> ( 32 - 26 ) ;

	out[64] |= in[92] << 17 ;
	out[65] |= in[93] << 17 ;
	out[66] |= in[94] << 17 ;
	out[67] |= in[95] << 17 ;

	out[68] = in[92] >> ( 32 - 17 ) ;
	out[69] = in[93] >> ( 32 - 17 ) ;
	out[70] = in[94] >> ( 32 - 17 ) ;
	out[71] = in[95] >> ( 32 - 17 ) ;

	out[68] |= in[96] << 8 ;
	out[69] |= in[97] << 8 ;
	out[70] |= in[98] << 8 ;
	out[71] |= in[99] << 8 ;

	out[68] |= in[100] << 31 ;
	out[69] |= in[101] << 31 ;
	out[70] |= in[102] << 31 ;
	out[71] |= in[103] << 31 ;

	out[72] = in[100] >> ( 32 - 31 ) ;
	out[73] = in[101] >> ( 32 - 31 ) ;
	out[74] = in[102] >> ( 32 - 31 ) ;
	out[75] = in[103] >> ( 32 - 31 ) ;

	out[72] |= in[104] << 22 ;
	out[73] |= in[105] << 22 ;
	out[74] |= in[106] << 22 ;
	out[75] |= in[107] << 22 ;

	out[76] = in[104] >> ( 32 - 22 ) ;
	out[77] = in[105] >> ( 32 - 22 ) ;
	out[78] = in[106] >> ( 32 - 22 ) ;
	out[79] = in[107] >> ( 32 - 22 ) ;

	out[76] |= in[108] << 13 ;
	out[77] |= in[109] << 13 ;
	out[78] |= in[110] << 13 ;
	out[79] |= in[111] << 13 ;

	out[80] = in[108] >> ( 32 - 13 ) ;
	out[81] = in[109] >> ( 32 - 13 ) ;
	out[82] = in[110] >> ( 32 - 13 ) ;
	out[83] = in[111] >> ( 32 - 13 ) ;

	out[80] |= in[112] << 4 ;
	out[81] |= in[113] << 4 ;
	out[82] |= in[114] << 4 ;
	out[83] |= in[115] << 4 ;

	out[80] |= in[116] << 27 ;
	out[81] |= in[117] << 27 ;
	out[82] |= in[118] << 27 ;
	out[83] |= in[119] << 27 ;

	out[84] = in[116] >> ( 32 - 27 ) ;
	out[85] = in[117] >> ( 32 - 27 ) ;
	out[86] = in[118] >> ( 32 - 27 ) ;
	out[87] = in[119] >> ( 32 - 27 ) ;

	out[84] |= in[120] << 18 ;
	out[85] |= in[121] << 18 ;
	out[86] |= in[122] << 18 ;
	out[87] |= in[123] << 18 ;

	out[88] = in[120] >> ( 32 - 18 ) ;
	out[89] = in[121] >> ( 32 - 18 ) ;
	out[90] = in[122] >> ( 32 - 18 ) ;
	out[91] = in[123] >> ( 32 - 18 ) ;

	out[88] |= in[124] << 9 ;
	out[89] |= in[125] << 9 ;
	out[90] |= in[126] << 9 ;
	out[91] |= in[127] << 9 ;
}


// 24-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c24(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 24 ;
	out[1] |= in[5] << 24 ;
	out[2] |= in[6] << 24 ;
	out[3] |= in[7] << 24 ;

	out[4] = in[4] >> ( 32 - 24 ) ;
	out[5] = in[5] >> ( 32 - 24 ) ;
	out[6] = in[6] >> ( 32 - 24 ) ;
	out[7] = in[7] >> ( 32 - 24 ) ;

	out[4] |= in[8] << 16 ;
	out[5] |= in[9] << 16 ;
	out[6] |= in[10] << 16 ;
	out[7] |= in[11] << 16 ;

	out[8] = in[8] >> ( 32 - 16 ) ;
	out[9] = in[9] >> ( 32 - 16 ) ;
	out[10] = in[10] >> ( 32 - 16 ) ;
	out[11] = in[11] >> ( 32 - 16 ) ;

	out[8] |= in[12] << 8 ;
	out[9] |= in[13] << 8 ;
	out[10] |= in[14] << 8 ;
	out[11] |= in[15] << 8 ;

	out[12] = in[16] << 0 ;
	out[13] = in[17] << 0 ;
	out[14] = in[18] << 0 ;
	out[15] = in[19] << 0 ;

	out[12] |= in[20] << 24 ;
	out[13] |= in[21] << 24 ;
	out[14] |= in[22] << 24 ;
	out[15] |= in[23] << 24 ;

	out[16] = in[20] >> ( 32 - 24 ) ;
	out[17] = in[21] >> ( 32 - 24 ) ;
	out[18] = in[22] >> ( 32 - 24 ) ;
	out[19] = in[23] >> ( 32 - 24 ) ;

	out[16] |= in[24] << 16 ;
	out[17] |= in[25] << 16 ;
	out[18] |= in[26] << 16 ;
	out[19] |= in[27] << 16 ;

	out[20] = in[24] >> ( 32 - 16 ) ;
	out[21] = in[25] >> ( 32 - 16 ) ;
	out[22] = in[26] >> ( 32 - 16 ) ;
	out[23] = in[27] >> ( 32 - 16 ) ;

	out[20] |= in[28] << 8 ;
	out[21] |= in[29] << 8 ;
	out[22] |= in[30] << 8 ;
	out[23] |= in[31] << 8 ;

	out[24] = in[32] << 0 ;
	out[25] = in[33] << 0 ;
	out[26] = in[34] << 0 ;
	out[27] = in[35] << 0 ;

	out[24] |= in[36] << 24 ;
	out[25] |= in[37] << 24 ;
	out[26] |= in[38] << 24 ;
	out[27] |= in[39] << 24 ;

	out[28] = in[36] >> ( 32 - 24 ) ;
	out[29] = in[37] >> ( 32 - 24 ) ;
	out[30] = in[38] >> ( 32 - 24 ) ;
	out[31] = in[39] >> ( 32 - 24 ) ;

	out[28] |= in[40] << 16 ;
	out[29] |= in[41] << 16 ;
	out[30] |= in[42] << 16 ;
	out[31] |= in[43] << 16 ;

	out[32] = in[40] >> ( 32 - 16 ) ;
	out[33] = in[41] >> ( 32 - 16 ) ;
	out[34] = in[42] >> ( 32 - 16 ) ;
	out[35] = in[43] >> ( 32 - 16 ) ;

	out[32] |= in[44] << 8 ;
	out[33] |= in[45] << 8 ;
	out[34] |= in[46] << 8 ;
	out[35] |= in[47] << 8 ;

	out[36] = in[48] << 0 ;
	out[37] = in[49] << 0 ;
	out[38] = in[50] << 0 ;
	out[39] = in[51] << 0 ;

	out[36] |= in[52] << 24 ;
	out[37] |= in[53] << 24 ;
	out[38] |= in[54] << 24 ;
	out[39] |= in[55] << 24 ;

	out[40] = in[52] >> ( 32 - 24 ) ;
	out[41] = in[53] >> ( 32 - 24 ) ;
	out[42] = in[54] >> ( 32 - 24 ) ;
	out[43] = in[55] >> ( 32 - 24 ) ;

	out[40] |= in[56] << 16 ;
	out[41] |= in[57] << 16 ;
	out[42] |= in[58] << 16 ;
	out[43] |= in[59] << 16 ;

	out[44] = in[56] >> ( 32 - 16 ) ;
	out[45] = in[57] >> ( 32 - 16 ) ;
	out[46] = in[58] >> ( 32 - 16 ) ;
	out[47] = in[59] >> ( 32 - 16 ) ;

	out[44] |= in[60] << 8 ;
	out[45] |= in[61] << 8 ;
	out[46] |= in[62] << 8 ;
	out[47] |= in[63] << 8 ;

	out[48] = in[64] << 0 ;
	out[49] = in[65] << 0 ;
	out[50] = in[66] << 0 ;
	out[51] = in[67] << 0 ;

	out[48] |= in[68] << 24 ;
	out[49] |= in[69] << 24 ;
	out[50] |= in[70] << 24 ;
	out[51] |= in[71] << 24 ;

	out[52] = in[68] >> ( 32 - 24 ) ;
	out[53] = in[69] >> ( 32 - 24 ) ;
	out[54] = in[70] >> ( 32 - 24 ) ;
	out[55] = in[71] >> ( 32 - 24 ) ;

	out[52] |= in[72] << 16 ;
	out[53] |= in[73] << 16 ;
	out[54] |= in[74] << 16 ;
	out[55] |= in[75] << 16 ;

	out[56] = in[72] >> ( 32 - 16 ) ;
	out[57] = in[73] >> ( 32 - 16 ) ;
	out[58] = in[74] >> ( 32 - 16 ) ;
	out[59] = in[75] >> ( 32 - 16 ) ;

	out[56] |= in[76] << 8 ;
	out[57] |= in[77] << 8 ;
	out[58] |= in[78] << 8 ;
	out[59] |= in[79] << 8 ;

	out[60] = in[80] << 0 ;
	out[61] = in[81] << 0 ;
	out[62] = in[82] << 0 ;
	out[63] = in[83] << 0 ;

	out[60] |= in[84] << 24 ;
	out[61] |= in[85] << 24 ;
	out[62] |= in[86] << 24 ;
	out[63] |= in[87] << 24 ;

	out[64] = in[84] >> ( 32 - 24 ) ;
	out[65] = in[85] >> ( 32 - 24 ) ;
	out[66] = in[86] >> ( 32 - 24 ) ;
	out[67] = in[87] >> ( 32 - 24 ) ;

	out[64] |= in[88] << 16 ;
	out[65] |= in[89] << 16 ;
	out[66] |= in[90] << 16 ;
	out[67] |= in[91] << 16 ;

	out[68] = in[88] >> ( 32 - 16 ) ;
	out[69] = in[89] >> ( 32 - 16 ) ;
	out[70] = in[90] >> ( 32 - 16 ) ;
	out[71] = in[91] >> ( 32 - 16 ) ;

	out[68] |= in[92] << 8 ;
	out[69] |= in[93] << 8 ;
	out[70] |= in[94] << 8 ;
	out[71] |= in[95] << 8 ;

	out[72] = in[96] << 0 ;
	out[73] = in[97] << 0 ;
	out[74] = in[98] << 0 ;
	out[75] = in[99] << 0 ;

	out[72] |= in[100] << 24 ;
	out[73] |= in[101] << 24 ;
	out[74] |= in[102] << 24 ;
	out[75] |= in[103] << 24 ;

	out[76] = in[100] >> ( 32 - 24 ) ;
	out[77] = in[101] >> ( 32 - 24 ) ;
	out[78] = in[102] >> ( 32 - 24 ) ;
	out[79] = in[103] >> ( 32 - 24 ) ;

	out[76] |= in[104] << 16 ;
	out[77] |= in[105] << 16 ;
	out[78] |= in[106] << 16 ;
	out[79] |= in[107] << 16 ;

	out[80] = in[104] >> ( 32 - 16 ) ;
	out[81] = in[105] >> ( 32 - 16 ) ;
	out[82] = in[106] >> ( 32 - 16 ) ;
	out[83] = in[107] >> ( 32 - 16 ) ;

	out[80] |= in[108] << 8 ;
	out[81] |= in[109] << 8 ;
	out[82] |= in[110] << 8 ;
	out[83] |= in[111] << 8 ;

	out[84] = in[112] << 0 ;
	out[85] = in[113] << 0 ;
	out[86] = in[114] << 0 ;
	out[87] = in[115] << 0 ;

	out[84] |= in[116] << 24 ;
	out[85] |= in[117] << 24 ;
	out[86] |= in[118] << 24 ;
	out[87] |= in[119] << 24 ;

	out[88] = in[116] >> ( 32 - 24 ) ;
	out[89] = in[117] >> ( 32 - 24 ) ;
	out[90] = in[118] >> ( 32 - 24 ) ;
	out[91] = in[119] >> ( 32 - 24 ) ;

	out[88] |= in[120] << 16 ;
	out[89] |= in[121] << 16 ;
	out[90] |= in[122] << 16 ;
	out[91] |= in[123] << 16 ;

	out[92] = in[120] >> ( 32 - 16 ) ;
	out[93] = in[121] >> ( 32 - 16 ) ;
	out[94] = in[122] >> ( 32 - 16 ) ;
	out[95] = in[123] >> ( 32 - 16 ) ;

	out[92] |= in[124] << 8 ;
	out[93] |= in[125] << 8 ;
	out[94] |= in[126] << 8 ;
	out[95] |= in[127] << 8 ;
}


// 25-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c25(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 25 ;
	out[1] |= in[5] << 25 ;
	out[2] |= in[6] << 25 ;
	out[3] |= in[7] << 25 ;

	out[4] = in[4] >> ( 32 - 25 ) ;
	out[5] = in[5] >> ( 32 - 25 ) ;
	out[6] = in[6] >> ( 32 - 25 ) ;
	out[7] = in[7] >> ( 32 - 25 ) ;

	out[4] |= in[8] << 18 ;
	out[5] |= in[9] << 18 ;
	out[6] |= in[10] << 18 ;
	out[7] |= in[11] << 18 ;

	out[8] = in[8] >> ( 32 - 18 ) ;
	out[9] = in[9] >> ( 32 - 18 ) ;
	out[10] = in[10] >> ( 32 - 18 ) ;
	out[11] = in[11] >> ( 32 - 18 ) ;

	out[8] |= in[12] << 11 ;
	out[9] |= in[13] << 11 ;
	out[10] |= in[14] << 11 ;
	out[11] |= in[15] << 11 ;

	out[12] = in[12] >> ( 32 - 11 ) ;
	out[13] = in[13] >> ( 32 - 11 ) ;
	out[14] = in[14] >> ( 32 - 11 ) ;
	out[15] = in[15] >> ( 32 - 11 ) ;

	out[12] |= in[16] << 4 ;
	out[13] |= in[17] << 4 ;
	out[14] |= in[18] << 4 ;
	out[15] |= in[19] << 4 ;

	out[12] |= in[20] << 29 ;
	out[13] |= in[21] << 29 ;
	out[14] |= in[22] << 29 ;
	out[15] |= in[23] << 29 ;

	out[16] = in[20] >> ( 32 - 29 ) ;
	out[17] = in[21] >> ( 32 - 29 ) ;
	out[18] = in[22] >> ( 32 - 29 ) ;
	out[19] = in[23] >> ( 32 - 29 ) ;

	out[16] |= in[24] << 22 ;
	out[17] |= in[25] << 22 ;
	out[18] |= in[26] << 22 ;
	out[19] |= in[27] << 22 ;

	out[20] = in[24] >> ( 32 - 22 ) ;
	out[21] = in[25] >> ( 32 - 22 ) ;
	out[22] = in[26] >> ( 32 - 22 ) ;
	out[23] = in[27] >> ( 32 - 22 ) ;

	out[20] |= in[28] << 15 ;
	out[21] |= in[29] << 15 ;
	out[22] |= in[30] << 15 ;
	out[23] |= in[31] << 15 ;

	out[24] = in[28] >> ( 32 - 15 ) ;
	out[25] = in[29] >> ( 32 - 15 ) ;
	out[26] = in[30] >> ( 32 - 15 ) ;
	out[27] = in[31] >> ( 32 - 15 ) ;

	out[24] |= in[32] << 8 ;
	out[25] |= in[33] << 8 ;
	out[26] |= in[34] << 8 ;
	out[27] |= in[35] << 8 ;

	out[28] = in[32] >> ( 32 - 8 ) ;
	out[29] = in[33] >> ( 32 - 8 ) ;
	out[30] = in[34] >> ( 32 - 8 ) ;
	out[31] = in[35] >> ( 32 - 8 ) ;

	out[28] |= in[36] << 1 ;
	out[29] |= in[37] << 1 ;
	out[30] |= in[38] << 1 ;
	out[31] |= in[39] << 1 ;

	out[28] |= in[40] << 26 ;
	out[29] |= in[41] << 26 ;
	out[30] |= in[42] << 26 ;
	out[31] |= in[43] << 26 ;

	out[32] = in[40] >> ( 32 - 26 ) ;
	out[33] = in[41] >> ( 32 - 26 ) ;
	out[34] = in[42] >> ( 32 - 26 ) ;
	out[35] = in[43] >> ( 32 - 26 ) ;

	out[32] |= in[44] << 19 ;
	out[33] |= in[45] << 19 ;
	out[34] |= in[46] << 19 ;
	out[35] |= in[47] << 19 ;

	out[36] = in[44] >> ( 32 - 19 ) ;
	out[37] = in[45] >> ( 32 - 19 ) ;
	out[38] = in[46] >> ( 32 - 19 ) ;
	out[39] = in[47] >> ( 32 - 19 ) ;

	out[36] |= in[48] << 12 ;
	out[37] |= in[49] << 12 ;
	out[38] |= in[50] << 12 ;
	out[39] |= in[51] << 12 ;

	out[40] = in[48] >> ( 32 - 12 ) ;
	out[41] = in[49] >> ( 32 - 12 ) ;
	out[42] = in[50] >> ( 32 - 12 ) ;
	out[43] = in[51] >> ( 32 - 12 ) ;

	out[40] |= in[52] << 5 ;
	out[41] |= in[53] << 5 ;
	out[42] |= in[54] << 5 ;
	out[43] |= in[55] << 5 ;

	out[40] |= in[56] << 30 ;
	out[41] |= in[57] << 30 ;
	out[42] |= in[58] << 30 ;
	out[43] |= in[59] << 30 ;

	out[44] = in[56] >> ( 32 - 30 ) ;
	out[45] = in[57] >> ( 32 - 30 ) ;
	out[46] = in[58] >> ( 32 - 30 ) ;
	out[47] = in[59] >> ( 32 - 30 ) ;

	out[44] |= in[60] << 23 ;
	out[45] |= in[61] << 23 ;
	out[46] |= in[62] << 23 ;
	out[47] |= in[63] << 23 ;

	out[48] = in[60] >> ( 32 - 23 ) ;
	out[49] = in[61] >> ( 32 - 23 ) ;
	out[50] = in[62] >> ( 32 - 23 ) ;
	out[51] = in[63] >> ( 32 - 23 ) ;

	out[48] |= in[64] << 16 ;
	out[49] |= in[65] << 16 ;
	out[50] |= in[66] << 16 ;
	out[51] |= in[67] << 16 ;

	out[52] = in[64] >> ( 32 - 16 ) ;
	out[53] = in[65] >> ( 32 - 16 ) ;
	out[54] = in[66] >> ( 32 - 16 ) ;
	out[55] = in[67] >> ( 32 - 16 ) ;

	out[52] |= in[68] << 9 ;
	out[53] |= in[69] << 9 ;
	out[54] |= in[70] << 9 ;
	out[55] |= in[71] << 9 ;

	out[56] = in[68] >> ( 32 - 9 ) ;
	out[57] = in[69] >> ( 32 - 9 ) ;
	out[58] = in[70] >> ( 32 - 9 ) ;
	out[59] = in[71] >> ( 32 - 9 ) ;

	out[56] |= in[72] << 2 ;
	out[57] |= in[73] << 2 ;
	out[58] |= in[74] << 2 ;
	out[59] |= in[75] << 2 ;

	out[56] |= in[76] << 27 ;
	out[57] |= in[77] << 27 ;
	out[58] |= in[78] << 27 ;
	out[59] |= in[79] << 27 ;

	out[60] = in[76] >> ( 32 - 27 ) ;
	out[61] = in[77] >> ( 32 - 27 ) ;
	out[62] = in[78] >> ( 32 - 27 ) ;
	out[63] = in[79] >> ( 32 - 27 ) ;

	out[60] |= in[80] << 20 ;
	out[61] |= in[81] << 20 ;
	out[62] |= in[82] << 20 ;
	out[63] |= in[83] << 20 ;

	out[64] = in[80] >> ( 32 - 20 ) ;
	out[65] = in[81] >> ( 32 - 20 ) ;
	out[66] = in[82] >> ( 32 - 20 ) ;
	out[67] = in[83] >> ( 32 - 20 ) ;

	out[64] |= in[84] << 13 ;
	out[65] |= in[85] << 13 ;
	out[66] |= in[86] << 13 ;
	out[67] |= in[87] << 13 ;

	out[68] = in[84] >> ( 32 - 13 ) ;
	out[69] = in[85] >> ( 32 - 13 ) ;
	out[70] = in[86] >> ( 32 - 13 ) ;
	out[71] = in[87] >> ( 32 - 13 ) ;

	out[68] |= in[88] << 6 ;
	out[69] |= in[89] << 6 ;
	out[70] |= in[90] << 6 ;
	out[71] |= in[91] << 6 ;

	out[68] |= in[92] << 31 ;
	out[69] |= in[93] << 31 ;
	out[70] |= in[94] << 31 ;
	out[71] |= in[95] << 31 ;

	out[72] = in[92] >> ( 32 - 31 ) ;
	out[73] = in[93] >> ( 32 - 31 ) ;
	out[74] = in[94] >> ( 32 - 31 ) ;
	out[75] = in[95] >> ( 32 - 31 ) ;

	out[72] |= in[96] << 24 ;
	out[73] |= in[97] << 24 ;
	out[74] |= in[98] << 24 ;
	out[75] |= in[99] << 24 ;

	out[76] = in[96] >> ( 32 - 24 ) ;
	out[77] = in[97] >> ( 32 - 24 ) ;
	out[78] = in[98] >> ( 32 - 24 ) ;
	out[79] = in[99] >> ( 32 - 24 ) ;

	out[76] |= in[100] << 17 ;
	out[77] |= in[101] << 17 ;
	out[78] |= in[102] << 17 ;
	out[79] |= in[103] << 17 ;

	out[80] = in[100] >> ( 32 - 17 ) ;
	out[81] = in[101] >> ( 32 - 17 ) ;
	out[82] = in[102] >> ( 32 - 17 ) ;
	out[83] = in[103] >> ( 32 - 17 ) ;

	out[80] |= in[104] << 10 ;
	out[81] |= in[105] << 10 ;
	out[82] |= in[106] << 10 ;
	out[83] |= in[107] << 10 ;

	out[84] = in[104] >> ( 32 - 10 ) ;
	out[85] = in[105] >> ( 32 - 10 ) ;
	out[86] = in[106] >> ( 32 - 10 ) ;
	out[87] = in[107] >> ( 32 - 10 ) ;

	out[84] |= in[108] << 3 ;
	out[85] |= in[109] << 3 ;
	out[86] |= in[110] << 3 ;
	out[87] |= in[111] << 3 ;

	out[84] |= in[112] << 28 ;
	out[85] |= in[113] << 28 ;
	out[86] |= in[114] << 28 ;
	out[87] |= in[115] << 28 ;

	out[88] = in[112] >> ( 32 - 28 ) ;
	out[89] = in[113] >> ( 32 - 28 ) ;
	out[90] = in[114] >> ( 32 - 28 ) ;
	out[91] = in[115] >> ( 32 - 28 ) ;

	out[88] |= in[116] << 21 ;
	out[89] |= in[117] << 21 ;
	out[90] |= in[118] << 21 ;
	out[91] |= in[119] << 21 ;

	out[92] = in[116] >> ( 32 - 21 ) ;
	out[93] = in[117] >> ( 32 - 21 ) ;
	out[94] = in[118] >> ( 32 - 21 ) ;
	out[95] = in[119] >> ( 32 - 21 ) ;

	out[92] |= in[120] << 14 ;
	out[93] |= in[121] << 14 ;
	out[94] |= in[122] << 14 ;
	out[95] |= in[123] << 14 ;

	out[96] = in[120] >> ( 32 - 14 ) ;
	out[97] = in[121] >> ( 32 - 14 ) ;
	out[98] = in[122] >> ( 32 - 14 ) ;
	out[99] = in[123] >> ( 32 - 14 ) ;

	out[96] |= in[124] << 7 ;
	out[97] |= in[125] << 7 ;
	out[98] |= in[126] << 7 ;
	out[99] |= in[127] << 7 ;
}


// 26-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c26(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 26 ;
	out[1] |= in[5] << 26 ;
	out[2] |= in[6] << 26 ;
	out[3] |= in[7] << 26 ;

	out[4] = in[4] >> ( 32 - 26 ) ;
	out[5] = in[5] >> ( 32 - 26 ) ;
	out[6] = in[6] >> ( 32 - 26 ) ;
	out[7] = in[7] >> ( 32 - 26 ) ;

	out[4] |= in[8] << 20 ;
	out[5] |= in[9] << 20 ;
	out[6] |= in[10] << 20 ;
	out[7] |= in[11] << 20 ;

	out[8] = in[8] >> ( 32 - 20 ) ;
	out[9] = in[9] >> ( 32 - 20 ) ;
	out[10] = in[10] >> ( 32 - 20 ) ;
	out[11] = in[11] >> ( 32 - 20 ) ;

	out[8] |= in[12] << 14 ;
	out[9] |= in[13] << 14 ;
	out[10] |= in[14] << 14 ;
	out[11] |= in[15] << 14 ;

	out[12] = in[12] >> ( 32 - 14 ) ;
	out[13] = in[13] >> ( 32 - 14 ) ;
	out[14] = in[14] >> ( 32 - 14 ) ;
	out[15] = in[15] >> ( 32 - 14 ) ;

	out[12] |= in[16] << 8 ;
	out[13] |= in[17] << 8 ;
	out[14] |= in[18] << 8 ;
	out[15] |= in[19] << 8 ;

	out[16] = in[16] >> ( 32 - 8 ) ;
	out[17] = in[17] >> ( 32 - 8 ) ;
	out[18] = in[18] >> ( 32 - 8 ) ;
	out[19] = in[19] >> ( 32 - 8 ) ;

	out[16] |= in[20] << 2 ;
	out[17] |= in[21] << 2 ;
	out[18] |= in[22] << 2 ;
	out[19] |= in[23] << 2 ;

	out[16] |= in[24] << 28 ;
	out[17] |= in[25] << 28 ;
	out[18] |= in[26] << 28 ;
	out[19] |= in[27] << 28 ;

	out[20] = in[24] >> ( 32 - 28 ) ;
	out[21] = in[25] >> ( 32 - 28 ) ;
	out[22] = in[26] >> ( 32 - 28 ) ;
	out[23] = in[27] >> ( 32 - 28 ) ;

	out[20] |= in[28] << 22 ;
	out[21] |= in[29] << 22 ;
	out[22] |= in[30] << 22 ;
	out[23] |= in[31] << 22 ;

	out[24] = in[28] >> ( 32 - 22 ) ;
	out[25] = in[29] >> ( 32 - 22 ) ;
	out[26] = in[30] >> ( 32 - 22 ) ;
	out[27] = in[31] >> ( 32 - 22 ) ;

	out[24] |= in[32] << 16 ;
	out[25] |= in[33] << 16 ;
	out[26] |= in[34] << 16 ;
	out[27] |= in[35] << 16 ;

	out[28] = in[32] >> ( 32 - 16 ) ;
	out[29] = in[33] >> ( 32 - 16 ) ;
	out[30] = in[34] >> ( 32 - 16 ) ;
	out[31] = in[35] >> ( 32 - 16 ) ;

	out[28] |= in[36] << 10 ;
	out[29] |= in[37] << 10 ;
	out[30] |= in[38] << 10 ;
	out[31] |= in[39] << 10 ;

	out[32] = in[36] >> ( 32 - 10 ) ;
	out[33] = in[37] >> ( 32 - 10 ) ;
	out[34] = in[38] >> ( 32 - 10 ) ;
	out[35] = in[39] >> ( 32 - 10 ) ;

	out[32] |= in[40] << 4 ;
	out[33] |= in[41] << 4 ;
	out[34] |= in[42] << 4 ;
	out[35] |= in[43] << 4 ;

	out[32] |= in[44] << 30 ;
	out[33] |= in[45] << 30 ;
	out[34] |= in[46] << 30 ;
	out[35] |= in[47] << 30 ;

	out[36] = in[44] >> ( 32 - 30 ) ;
	out[37] = in[45] >> ( 32 - 30 ) ;
	out[38] = in[46] >> ( 32 - 30 ) ;
	out[39] = in[47] >> ( 32 - 30 ) ;

	out[36] |= in[48] << 24 ;
	out[37] |= in[49] << 24 ;
	out[38] |= in[50] << 24 ;
	out[39] |= in[51] << 24 ;

	out[40] = in[48] >> ( 32 - 24 ) ;
	out[41] = in[49] >> ( 32 - 24 ) ;
	out[42] = in[50] >> ( 32 - 24 ) ;
	out[43] = in[51] >> ( 32 - 24 ) ;

	out[40] |= in[52] << 18 ;
	out[41] |= in[53] << 18 ;
	out[42] |= in[54] << 18 ;
	out[43] |= in[55] << 18 ;

	out[44] = in[52] >> ( 32 - 18 ) ;
	out[45] = in[53] >> ( 32 - 18 ) ;
	out[46] = in[54] >> ( 32 - 18 ) ;
	out[47] = in[55] >> ( 32 - 18 ) ;

	out[44] |= in[56] << 12 ;
	out[45] |= in[57] << 12 ;
	out[46] |= in[58] << 12 ;
	out[47] |= in[59] << 12 ;

	out[48] = in[56] >> ( 32 - 12 ) ;
	out[49] = in[57] >> ( 32 - 12 ) ;
	out[50] = in[58] >> ( 32 - 12 ) ;
	out[51] = in[59] >> ( 32 - 12 ) ;

	out[48] |= in[60] << 6 ;
	out[49] |= in[61] << 6 ;
	out[50] |= in[62] << 6 ;
	out[51] |= in[63] << 6 ;

	out[52] = in[64] << 0 ;
	out[53] = in[65] << 0 ;
	out[54] = in[66] << 0 ;
	out[55] = in[67] << 0 ;

	out[52] |= in[68] << 26 ;
	out[53] |= in[69] << 26 ;
	out[54] |= in[70] << 26 ;
	out[55] |= in[71] << 26 ;

	out[56] = in[68] >> ( 32 - 26 ) ;
	out[57] = in[69] >> ( 32 - 26 ) ;
	out[58] = in[70] >> ( 32 - 26 ) ;
	out[59] = in[71] >> ( 32 - 26 ) ;

	out[56] |= in[72] << 20 ;
	out[57] |= in[73] << 20 ;
	out[58] |= in[74] << 20 ;
	out[59] |= in[75] << 20 ;

	out[60] = in[72] >> ( 32 - 20 ) ;
	out[61] = in[73] >> ( 32 - 20 ) ;
	out[62] = in[74] >> ( 32 - 20 ) ;
	out[63] = in[75] >> ( 32 - 20 ) ;

	out[60] |= in[76] << 14 ;
	out[61] |= in[77] << 14 ;
	out[62] |= in[78] << 14 ;
	out[63] |= in[79] << 14 ;

	out[64] = in[76] >> ( 32 - 14 ) ;
	out[65] = in[77] >> ( 32 - 14 ) ;
	out[66] = in[78] >> ( 32 - 14 ) ;
	out[67] = in[79] >> ( 32 - 14 ) ;

	out[64] |= in[80] << 8 ;
	out[65] |= in[81] << 8 ;
	out[66] |= in[82] << 8 ;
	out[67] |= in[83] << 8 ;

	out[68] = in[80] >> ( 32 - 8 ) ;
	out[69] = in[81] >> ( 32 - 8 ) ;
	out[70] = in[82] >> ( 32 - 8 ) ;
	out[71] = in[83] >> ( 32 - 8 ) ;

	out[68] |= in[84] << 2 ;
	out[69] |= in[85] << 2 ;
	out[70] |= in[86] << 2 ;
	out[71] |= in[87] << 2 ;

	out[68] |= in[88] << 28 ;
	out[69] |= in[89] << 28 ;
	out[70] |= in[90] << 28 ;
	out[71] |= in[91] << 28 ;

	out[72] = in[88] >> ( 32 - 28 ) ;
	out[73] = in[89] >> ( 32 - 28 ) ;
	out[74] = in[90] >> ( 32 - 28 ) ;
	out[75] = in[91] >> ( 32 - 28 ) ;

	out[72] |= in[92] << 22 ;
	out[73] |= in[93] << 22 ;
	out[74] |= in[94] << 22 ;
	out[75] |= in[95] << 22 ;

	out[76] = in[92] >> ( 32 - 22 ) ;
	out[77] = in[93] >> ( 32 - 22 ) ;
	out[78] = in[94] >> ( 32 - 22 ) ;
	out[79] = in[95] >> ( 32 - 22 ) ;

	out[76] |= in[96] << 16 ;
	out[77] |= in[97] << 16 ;
	out[78] |= in[98] << 16 ;
	out[79] |= in[99] << 16 ;

	out[80] = in[96] >> ( 32 - 16 ) ;
	out[81] = in[97] >> ( 32 - 16 ) ;
	out[82] = in[98] >> ( 32 - 16 ) ;
	out[83] = in[99] >> ( 32 - 16 ) ;

	out[80] |= in[100] << 10 ;
	out[81] |= in[101] << 10 ;
	out[82] |= in[102] << 10 ;
	out[83] |= in[103] << 10 ;

	out[84] = in[100] >> ( 32 - 10 ) ;
	out[85] = in[101] >> ( 32 - 10 ) ;
	out[86] = in[102] >> ( 32 - 10 ) ;
	out[87] = in[103] >> ( 32 - 10 ) ;

	out[84] |= in[104] << 4 ;
	out[85] |= in[105] << 4 ;
	out[86] |= in[106] << 4 ;
	out[87] |= in[107] << 4 ;

	out[84] |= in[108] << 30 ;
	out[85] |= in[109] << 30 ;
	out[86] |= in[110] << 30 ;
	out[87] |= in[111] << 30 ;

	out[88] = in[108] >> ( 32 - 30 ) ;
	out[89] = in[109] >> ( 32 - 30 ) ;
	out[90] = in[110] >> ( 32 - 30 ) ;
	out[91] = in[111] >> ( 32 - 30 ) ;

	out[88] |= in[112] << 24 ;
	out[89] |= in[113] << 24 ;
	out[90] |= in[114] << 24 ;
	out[91] |= in[115] << 24 ;

	out[92] = in[112] >> ( 32 - 24 ) ;
	out[93] = in[113] >> ( 32 - 24 ) ;
	out[94] = in[114] >> ( 32 - 24 ) ;
	out[95] = in[115] >> ( 32 - 24 ) ;

	out[92] |= in[116] << 18 ;
	out[93] |= in[117] << 18 ;
	out[94] |= in[118] << 18 ;
	out[95] |= in[119] << 18 ;

	out[96] = in[116] >> ( 32 - 18 ) ;
	out[97] = in[117] >> ( 32 - 18 ) ;
	out[98] = in[118] >> ( 32 - 18 ) ;
	out[99] = in[119] >> ( 32 - 18 ) ;

	out[96] |= in[120] << 12 ;
	out[97] |= in[121] << 12 ;
	out[98] |= in[122] << 12 ;
	out[99] |= in[123] << 12 ;

	out[100] = in[120] >> ( 32 - 12 ) ;
	out[101] = in[121] >> ( 32 - 12 ) ;
	out[102] = in[122] >> ( 32 - 12 ) ;
	out[103] = in[123] >> ( 32 - 12 ) ;

	out[100] |= in[124] << 6 ;
	out[101] |= in[125] << 6 ;
	out[102] |= in[126] << 6 ;
	out[103] |= in[127] << 6 ;
}


// 27-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c27(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 27 ;
	out[1] |= in[5] << 27 ;
	out[2] |= in[6] << 27 ;
	out[3] |= in[7] << 27 ;

	out[4] = in[4] >> ( 32 - 27 ) ;
	out[5] = in[5] >> ( 32 - 27 ) ;
	out[6] = in[6] >> ( 32 - 27 ) ;
	out[7] = in[7] >> ( 32 - 27 ) ;

	out[4] |= in[8] << 22 ;
	out[5] |= in[9] << 22 ;
	out[6] |= in[10] << 22 ;
	out[7] |= in[11] << 22 ;

	out[8] = in[8] >> ( 32 - 22 ) ;
	out[9] = in[9] >> ( 32 - 22 ) ;
	out[10] = in[10] >> ( 32 - 22 ) ;
	out[11] = in[11] >> ( 32 - 22 ) ;

	out[8] |= in[12] << 17 ;
	out[9] |= in[13] << 17 ;
	out[10] |= in[14] << 17 ;
	out[11] |= in[15] << 17 ;

	out[12] = in[12] >> ( 32 - 17 ) ;
	out[13] = in[13] >> ( 32 - 17 ) ;
	out[14] = in[14] >> ( 32 - 17 ) ;
	out[15] = in[15] >> ( 32 - 17 ) ;

	out[12] |= in[16] << 12 ;
	out[13] |= in[17] << 12 ;
	out[14] |= in[18] << 12 ;
	out[15] |= in[19] << 12 ;

	out[16] = in[16] >> ( 32 - 12 ) ;
	out[17] = in[17] >> ( 32 - 12 ) ;
	out[18] = in[18] >> ( 32 - 12 ) ;
	out[19] = in[19] >> ( 32 - 12 ) ;

	out[16] |= in[20] << 7 ;
	out[17] |= in[21] << 7 ;
	out[18] |= in[22] << 7 ;
	out[19] |= in[23] << 7 ;

	out[20] = in[20] >> ( 32 - 7 ) ;
	out[21] = in[21] >> ( 32 - 7 ) ;
	out[22] = in[22] >> ( 32 - 7 ) ;
	out[23] = in[23] >> ( 32 - 7 ) ;

	out[20] |= in[24] << 2 ;
	out[21] |= in[25] << 2 ;
	out[22] |= in[26] << 2 ;
	out[23] |= in[27] << 2 ;

	out[20] |= in[28] << 29 ;
	out[21] |= in[29] << 29 ;
	out[22] |= in[30] << 29 ;
	out[23] |= in[31] << 29 ;

	out[24] = in[28] >> ( 32 - 29 ) ;
	out[25] = in[29] >> ( 32 - 29 ) ;
	out[26] = in[30] >> ( 32 - 29 ) ;
	out[27] = in[31] >> ( 32 - 29 ) ;

	out[24] |= in[32] << 24 ;
	out[25] |= in[33] << 24 ;
	out[26] |= in[34] << 24 ;
	out[27] |= in[35] << 24 ;

	out[28] = in[32] >> ( 32 - 24 ) ;
	out[29] = in[33] >> ( 32 - 24 ) ;
	out[30] = in[34] >> ( 32 - 24 ) ;
	out[31] = in[35] >> ( 32 - 24 ) ;

	out[28] |= in[36] << 19 ;
	out[29] |= in[37] << 19 ;
	out[30] |= in[38] << 19 ;
	out[31] |= in[39] << 19 ;

	out[32] = in[36] >> ( 32 - 19 ) ;
	out[33] = in[37] >> ( 32 - 19 ) ;
	out[34] = in[38] >> ( 32 - 19 ) ;
	out[35] = in[39] >> ( 32 - 19 ) ;

	out[32] |= in[40] << 14 ;
	out[33] |= in[41] << 14 ;
	out[34] |= in[42] << 14 ;
	out[35] |= in[43] << 14 ;

	out[36] = in[40] >> ( 32 - 14 ) ;
	out[37] = in[41] >> ( 32 - 14 ) ;
	out[38] = in[42] >> ( 32 - 14 ) ;
	out[39] = in[43] >> ( 32 - 14 ) ;

	out[36] |= in[44] << 9 ;
	out[37] |= in[45] << 9 ;
	out[38] |= in[46] << 9 ;
	out[39] |= in[47] << 9 ;

	out[40] = in[44] >> ( 32 - 9 ) ;
	out[41] = in[45] >> ( 32 - 9 ) ;
	out[42] = in[46] >> ( 32 - 9 ) ;
	out[43] = in[47] >> ( 32 - 9 ) ;

	out[40] |= in[48] << 4 ;
	out[41] |= in[49] << 4 ;
	out[42] |= in[50] << 4 ;
	out[43] |= in[51] << 4 ;

	out[40] |= in[52] << 31 ;
	out[41] |= in[53] << 31 ;
	out[42] |= in[54] << 31 ;
	out[43] |= in[55] << 31 ;

	out[44] = in[52] >> ( 32 - 31 ) ;
	out[45] = in[53] >> ( 32 - 31 ) ;
	out[46] = in[54] >> ( 32 - 31 ) ;
	out[47] = in[55] >> ( 32 - 31 ) ;

	out[44] |= in[56] << 26 ;
	out[45] |= in[57] << 26 ;
	out[46] |= in[58] << 26 ;
	out[47] |= in[59] << 26 ;

	out[48] = in[56] >> ( 32 - 26 ) ;
	out[49] = in[57] >> ( 32 - 26 ) ;
	out[50] = in[58] >> ( 32 - 26 ) ;
	out[51] = in[59] >> ( 32 - 26 ) ;

	out[48] |= in[60] << 21 ;
	out[49] |= in[61] << 21 ;
	out[50] |= in[62] << 21 ;
	out[51] |= in[63] << 21 ;

	out[52] = in[60] >> ( 32 - 21 ) ;
	out[53] = in[61] >> ( 32 - 21 ) ;
	out[54] = in[62] >> ( 32 - 21 ) ;
	out[55] = in[63] >> ( 32 - 21 ) ;

	out[52] |= in[64] << 16 ;
	out[53] |= in[65] << 16 ;
	out[54] |= in[66] << 16 ;
	out[55] |= in[67] << 16 ;

	out[56] = in[64] >> ( 32 - 16 ) ;
	out[57] = in[65] >> ( 32 - 16 ) ;
	out[58] = in[66] >> ( 32 - 16 ) ;
	out[59] = in[67] >> ( 32 - 16 ) ;

	out[56] |= in[68] << 11 ;
	out[57] |= in[69] << 11 ;
	out[58] |= in[70] << 11 ;
	out[59] |= in[71] << 11 ;

	out[60] = in[68] >> ( 32 - 11 ) ;
	out[61] = in[69] >> ( 32 - 11 ) ;
	out[62] = in[70] >> ( 32 - 11 ) ;
	out[63] = in[71] >> ( 32 - 11 ) ;

	out[60] |= in[72] << 6 ;
	out[61] |= in[73] << 6 ;
	out[62] |= in[74] << 6 ;
	out[63] |= in[75] << 6 ;

	out[64] = in[72] >> ( 32 - 6 ) ;
	out[65] = in[73] >> ( 32 - 6 ) ;
	out[66] = in[74] >> ( 32 - 6 ) ;
	out[67] = in[75] >> ( 32 - 6 ) ;

	out[64] |= in[76] << 1 ;
	out[65] |= in[77] << 1 ;
	out[66] |= in[78] << 1 ;
	out[67] |= in[79] << 1 ;

	out[64] |= in[80] << 28 ;
	out[65] |= in[81] << 28 ;
	out[66] |= in[82] << 28 ;
	out[67] |= in[83] << 28 ;

	out[68] = in[80] >> ( 32 - 28 ) ;
	out[69] = in[81] >> ( 32 - 28 ) ;
	out[70] = in[82] >> ( 32 - 28 ) ;
	out[71] = in[83] >> ( 32 - 28 ) ;

	out[68] |= in[84] << 23 ;
	out[69] |= in[85] << 23 ;
	out[70] |= in[86] << 23 ;
	out[71] |= in[87] << 23 ;

	out[72] = in[84] >> ( 32 - 23 ) ;
	out[73] = in[85] >> ( 32 - 23 ) ;
	out[74] = in[86] >> ( 32 - 23 ) ;
	out[75] = in[87] >> ( 32 - 23 ) ;

	out[72] |= in[88] << 18 ;
	out[73] |= in[89] << 18 ;
	out[74] |= in[90] << 18 ;
	out[75] |= in[91] << 18 ;

	out[76] = in[88] >> ( 32 - 18 ) ;
	out[77] = in[89] >> ( 32 - 18 ) ;
	out[78] = in[90] >> ( 32 - 18 ) ;
	out[79] = in[91] >> ( 32 - 18 ) ;

	out[76] |= in[92] << 13 ;
	out[77] |= in[93] << 13 ;
	out[78] |= in[94] << 13 ;
	out[79] |= in[95] << 13 ;

	out[80] = in[92] >> ( 32 - 13 ) ;
	out[81] = in[93] >> ( 32 - 13 ) ;
	out[82] = in[94] >> ( 32 - 13 ) ;
	out[83] = in[95] >> ( 32 - 13 ) ;

	out[80] |= in[96] << 8 ;
	out[81] |= in[97] << 8 ;
	out[82] |= in[98] << 8 ;
	out[83] |= in[99] << 8 ;

	out[84] = in[96] >> ( 32 - 8 ) ;
	out[85] = in[97] >> ( 32 - 8 ) ;
	out[86] = in[98] >> ( 32 - 8 ) ;
	out[87] = in[99] >> ( 32 - 8 ) ;

	out[84] |= in[100] << 3 ;
	out[85] |= in[101] << 3 ;
	out[86] |= in[102] << 3 ;
	out[87] |= in[103] << 3 ;

	out[84] |= in[104] << 30 ;
	out[85] |= in[105] << 30 ;
	out[86] |= in[106] << 30 ;
	out[87] |= in[107] << 30 ;

	out[88] = in[104] >> ( 32 - 30 ) ;
	out[89] = in[105] >> ( 32 - 30 ) ;
	out[90] = in[106] >> ( 32 - 30 ) ;
	out[91] = in[107] >> ( 32 - 30 ) ;

	out[88] |= in[108] << 25 ;
	out[89] |= in[109] << 25 ;
	out[90] |= in[110] << 25 ;
	out[91] |= in[111] << 25 ;

	out[92] = in[108] >> ( 32 - 25 ) ;
	out[93] = in[109] >> ( 32 - 25 ) ;
	out[94] = in[110] >> ( 32 - 25 ) ;
	out[95] = in[111] >> ( 32 - 25 ) ;

	out[92] |= in[112] << 20 ;
	out[93] |= in[113] << 20 ;
	out[94] |= in[114] << 20 ;
	out[95] |= in[115] << 20 ;

	out[96] = in[112] >> ( 32 - 20 ) ;
	out[97] = in[113] >> ( 32 - 20 ) ;
	out[98] = in[114] >> ( 32 - 20 ) ;
	out[99] = in[115] >> ( 32 - 20 ) ;

	out[96] |= in[116] << 15 ;
	out[97] |= in[117] << 15 ;
	out[98] |= in[118] << 15 ;
	out[99] |= in[119] << 15 ;

	out[100] = in[116] >> ( 32 - 15 ) ;
	out[101] = in[117] >> ( 32 - 15 ) ;
	out[102] = in[118] >> ( 32 - 15 ) ;
	out[103] = in[119] >> ( 32 - 15 ) ;

	out[100] |= in[120] << 10 ;
	out[101] |= in[121] << 10 ;
	out[102] |= in[122] << 10 ;
	out[103] |= in[123] << 10 ;

	out[104] = in[120] >> ( 32 - 10 ) ;
	out[105] = in[121] >> ( 32 - 10 ) ;
	out[106] = in[122] >> ( 32 - 10 ) ;
	out[107] = in[123] >> ( 32 - 10 ) ;

	out[104] |= in[124] << 5 ;
	out[105] |= in[125] << 5 ;
	out[106] |= in[126] << 5 ;
	out[107] |= in[127] << 5 ;
}


// 28-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c28(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 28 ;
	out[1] |= in[5] << 28 ;
	out[2] |= in[6] << 28 ;
	out[3] |= in[7] << 28 ;

	out[4] = in[4] >> ( 32 - 28 ) ;
	out[5] = in[5] >> ( 32 - 28 ) ;
	out[6] = in[6] >> ( 32 - 28 ) ;
	out[7] = in[7] >> ( 32 - 28 ) ;

	out[4] |= in[8] << 24 ;
	out[5] |= in[9] << 24 ;
	out[6] |= in[10] << 24 ;
	out[7] |= in[11] << 24 ;

	out[8] = in[8] >> ( 32 - 24 ) ;
	out[9] = in[9] >> ( 32 - 24 ) ;
	out[10] = in[10] >> ( 32 - 24 ) ;
	out[11] = in[11] >> ( 32 - 24 ) ;

	out[8] |= in[12] << 20 ;
	out[9] |= in[13] << 20 ;
	out[10] |= in[14] << 20 ;
	out[11] |= in[15] << 20 ;

	out[12] = in[12] >> ( 32 - 20 ) ;
	out[13] = in[13] >> ( 32 - 20 ) ;
	out[14] = in[14] >> ( 32 - 20 ) ;
	out[15] = in[15] >> ( 32 - 20 ) ;

	out[12] |= in[16] << 16 ;
	out[13] |= in[17] << 16 ;
	out[14] |= in[18] << 16 ;
	out[15] |= in[19] << 16 ;

	out[16] = in[16] >> ( 32 - 16 ) ;
	out[17] = in[17] >> ( 32 - 16 ) ;
	out[18] = in[18] >> ( 32 - 16 ) ;
	out[19] = in[19] >> ( 32 - 16 ) ;

	out[16] |= in[20] << 12 ;
	out[17] |= in[21] << 12 ;
	out[18] |= in[22] << 12 ;
	out[19] |= in[23] << 12 ;

	out[20] = in[20] >> ( 32 - 12 ) ;
	out[21] = in[21] >> ( 32 - 12 ) ;
	out[22] = in[22] >> ( 32 - 12 ) ;
	out[23] = in[23] >> ( 32 - 12 ) ;

	out[20] |= in[24] << 8 ;
	out[21] |= in[25] << 8 ;
	out[22] |= in[26] << 8 ;
	out[23] |= in[27] << 8 ;

	out[24] = in[24] >> ( 32 - 8 ) ;
	out[25] = in[25] >> ( 32 - 8 ) ;
	out[26] = in[26] >> ( 32 - 8 ) ;
	out[27] = in[27] >> ( 32 - 8 ) ;

	out[24] |= in[28] << 4 ;
	out[25] |= in[29] << 4 ;
	out[26] |= in[30] << 4 ;
	out[27] |= in[31] << 4 ;

	out[28] = in[32] << 0 ;
	out[29] = in[33] << 0 ;
	out[30] = in[34] << 0 ;
	out[31] = in[35] << 0 ;

	out[28] |= in[36] << 28 ;
	out[29] |= in[37] << 28 ;
	out[30] |= in[38] << 28 ;
	out[31] |= in[39] << 28 ;

	out[32] = in[36] >> ( 32 - 28 ) ;
	out[33] = in[37] >> ( 32 - 28 ) ;
	out[34] = in[38] >> ( 32 - 28 ) ;
	out[35] = in[39] >> ( 32 - 28 ) ;

	out[32] |= in[40] << 24 ;
	out[33] |= in[41] << 24 ;
	out[34] |= in[42] << 24 ;
	out[35] |= in[43] << 24 ;

	out[36] = in[40] >> ( 32 - 24 ) ;
	out[37] = in[41] >> ( 32 - 24 ) ;
	out[38] = in[42] >> ( 32 - 24 ) ;
	out[39] = in[43] >> ( 32 - 24 ) ;

	out[36] |= in[44] << 20 ;
	out[37] |= in[45] << 20 ;
	out[38] |= in[46] << 20 ;
	out[39] |= in[47] << 20 ;

	out[40] = in[44] >> ( 32 - 20 ) ;
	out[41] = in[45] >> ( 32 - 20 ) ;
	out[42] = in[46] >> ( 32 - 20 ) ;
	out[43] = in[47] >> ( 32 - 20 ) ;

	out[40] |= in[48] << 16 ;
	out[41] |= in[49] << 16 ;
	out[42] |= in[50] << 16 ;
	out[43] |= in[51] << 16 ;

	out[44] = in[48] >> ( 32 - 16 ) ;
	out[45] = in[49] >> ( 32 - 16 ) ;
	out[46] = in[50] >> ( 32 - 16 ) ;
	out[47] = in[51] >> ( 32 - 16 ) ;

	out[44] |= in[52] << 12 ;
	out[45] |= in[53] << 12 ;
	out[46] |= in[54] << 12 ;
	out[47] |= in[55] << 12 ;

	out[48] = in[52] >> ( 32 - 12 ) ;
	out[49] = in[53] >> ( 32 - 12 ) ;
	out[50] = in[54] >> ( 32 - 12 ) ;
	out[51] = in[55] >> ( 32 - 12 ) ;

	out[48] |= in[56] << 8 ;
	out[49] |= in[57] << 8 ;
	out[50] |= in[58] << 8 ;
	out[51] |= in[59] << 8 ;

	out[52] = in[56] >> ( 32 - 8 ) ;
	out[53] = in[57] >> ( 32 - 8 ) ;
	out[54] = in[58] >> ( 32 - 8 ) ;
	out[55] = in[59] >> ( 32 - 8 ) ;

	out[52] |= in[60] << 4 ;
	out[53] |= in[61] << 4 ;
	out[54] |= in[62] << 4 ;
	out[55] |= in[63] << 4 ;

	out[56] = in[64] << 0 ;
	out[57] = in[65] << 0 ;
	out[58] = in[66] << 0 ;
	out[59] = in[67] << 0 ;

	out[56] |= in[68] << 28 ;
	out[57] |= in[69] << 28 ;
	out[58] |= in[70] << 28 ;
	out[59] |= in[71] << 28 ;

	out[60] = in[68] >> ( 32 - 28 ) ;
	out[61] = in[69] >> ( 32 - 28 ) ;
	out[62] = in[70] >> ( 32 - 28 ) ;
	out[63] = in[71] >> ( 32 - 28 ) ;

	out[60] |= in[72] << 24 ;
	out[61] |= in[73] << 24 ;
	out[62] |= in[74] << 24 ;
	out[63] |= in[75] << 24 ;

	out[64] = in[72] >> ( 32 - 24 ) ;
	out[65] = in[73] >> ( 32 - 24 ) ;
	out[66] = in[74] >> ( 32 - 24 ) ;
	out[67] = in[75] >> ( 32 - 24 ) ;

	out[64] |= in[76] << 20 ;
	out[65] |= in[77] << 20 ;
	out[66] |= in[78] << 20 ;
	out[67] |= in[79] << 20 ;

	out[68] = in[76] >> ( 32 - 20 ) ;
	out[69] = in[77] >> ( 32 - 20 ) ;
	out[70] = in[78] >> ( 32 - 20 ) ;
	out[71] = in[79] >> ( 32 - 20 ) ;

	out[68] |= in[80] << 16 ;
	out[69] |= in[81] << 16 ;
	out[70] |= in[82] << 16 ;
	out[71] |= in[83] << 16 ;

	out[72] = in[80] >> ( 32 - 16 ) ;
	out[73] = in[81] >> ( 32 - 16 ) ;
	out[74] = in[82] >> ( 32 - 16 ) ;
	out[75] = in[83] >> ( 32 - 16 ) ;

	out[72] |= in[84] << 12 ;
	out[73] |= in[85] << 12 ;
	out[74] |= in[86] << 12 ;
	out[75] |= in[87] << 12 ;

	out[76] = in[84] >> ( 32 - 12 ) ;
	out[77] = in[85] >> ( 32 - 12 ) ;
	out[78] = in[86] >> ( 32 - 12 ) ;
	out[79] = in[87] >> ( 32 - 12 ) ;

	out[76] |= in[88] << 8 ;
	out[77] |= in[89] << 8 ;
	out[78] |= in[90] << 8 ;
	out[79] |= in[91] << 8 ;

	out[80] = in[88] >> ( 32 - 8 ) ;
	out[81] = in[89] >> ( 32 - 8 ) ;
	out[82] = in[90] >> ( 32 - 8 ) ;
	out[83] = in[91] >> ( 32 - 8 ) ;

	out[80] |= in[92] << 4 ;
	out[81] |= in[93] << 4 ;
	out[82] |= in[94] << 4 ;
	out[83] |= in[95] << 4 ;

	out[84] = in[96] << 0 ;
	out[85] = in[97] << 0 ;
	out[86] = in[98] << 0 ;
	out[87] = in[99] << 0 ;

	out[84] |= in[100] << 28 ;
	out[85] |= in[101] << 28 ;
	out[86] |= in[102] << 28 ;
	out[87] |= in[103] << 28 ;

	out[88] = in[100] >> ( 32 - 28 ) ;
	out[89] = in[101] >> ( 32 - 28 ) ;
	out[90] = in[102] >> ( 32 - 28 ) ;
	out[91] = in[103] >> ( 32 - 28 ) ;

	out[88] |= in[104] << 24 ;
	out[89] |= in[105] << 24 ;
	out[90] |= in[106] << 24 ;
	out[91] |= in[107] << 24 ;

	out[92] = in[104] >> ( 32 - 24 ) ;
	out[93] = in[105] >> ( 32 - 24 ) ;
	out[94] = in[106] >> ( 32 - 24 ) ;
	out[95] = in[107] >> ( 32 - 24 ) ;

	out[92] |= in[108] << 20 ;
	out[93] |= in[109] << 20 ;
	out[94] |= in[110] << 20 ;
	out[95] |= in[111] << 20 ;

	out[96] = in[108] >> ( 32 - 20 ) ;
	out[97] = in[109] >> ( 32 - 20 ) ;
	out[98] = in[110] >> ( 32 - 20 ) ;
	out[99] = in[111] >> ( 32 - 20 ) ;

	out[96] |= in[112] << 16 ;
	out[97] |= in[113] << 16 ;
	out[98] |= in[114] << 16 ;
	out[99] |= in[115] << 16 ;

	out[100] = in[112] >> ( 32 - 16 ) ;
	out[101] = in[113] >> ( 32 - 16 ) ;
	out[102] = in[114] >> ( 32 - 16 ) ;
	out[103] = in[115] >> ( 32 - 16 ) ;

	out[100] |= in[116] << 12 ;
	out[101] |= in[117] << 12 ;
	out[102] |= in[118] << 12 ;
	out[103] |= in[119] << 12 ;

	out[104] = in[116] >> ( 32 - 12 ) ;
	out[105] = in[117] >> ( 32 - 12 ) ;
	out[106] = in[118] >> ( 32 - 12 ) ;
	out[107] = in[119] >> ( 32 - 12 ) ;

	out[104] |= in[120] << 8 ;
	out[105] |= in[121] << 8 ;
	out[106] |= in[122] << 8 ;
	out[107] |= in[123] << 8 ;

	out[108] = in[120] >> ( 32 - 8 ) ;
	out[109] = in[121] >> ( 32 - 8 ) ;
	out[110] = in[122] >> ( 32 - 8 ) ;
	out[111] = in[123] >> ( 32 - 8 ) ;

	out[108] |= in[124] << 4 ;
	out[109] |= in[125] << 4 ;
	out[110] |= in[126] << 4 ;
	out[111] |= in[127] << 4 ;
}


// 29-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c29(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 29 ;
	out[1] |= in[5] << 29 ;
	out[2] |= in[6] << 29 ;
	out[3] |= in[7] << 29 ;

	out[4] = in[4] >> ( 32 - 29 ) ;
	out[5] = in[5] >> ( 32 - 29 ) ;
	out[6] = in[6] >> ( 32 - 29 ) ;
	out[7] = in[7] >> ( 32 - 29 ) ;

	out[4] |= in[8] << 26 ;
	out[5] |= in[9] << 26 ;
	out[6] |= in[10] << 26 ;
	out[7] |= in[11] << 26 ;

	out[8] = in[8] >> ( 32 - 26 ) ;
	out[9] = in[9] >> ( 32 - 26 ) ;
	out[10] = in[10] >> ( 32 - 26 ) ;
	out[11] = in[11] >> ( 32 - 26 ) ;

	out[8] |= in[12] << 23 ;
	out[9] |= in[13] << 23 ;
	out[10] |= in[14] << 23 ;
	out[11] |= in[15] << 23 ;

	out[12] = in[12] >> ( 32 - 23 ) ;
	out[13] = in[13] >> ( 32 - 23 ) ;
	out[14] = in[14] >> ( 32 - 23 ) ;
	out[15] = in[15] >> ( 32 - 23 ) ;

	out[12] |= in[16] << 20 ;
	out[13] |= in[17] << 20 ;
	out[14] |= in[18] << 20 ;
	out[15] |= in[19] << 20 ;

	out[16] = in[16] >> ( 32 - 20 ) ;
	out[17] = in[17] >> ( 32 - 20 ) ;
	out[18] = in[18] >> ( 32 - 20 ) ;
	out[19] = in[19] >> ( 32 - 20 ) ;

	out[16] |= in[20] << 17 ;
	out[17] |= in[21] << 17 ;
	out[18] |= in[22] << 17 ;
	out[19] |= in[23] << 17 ;

	out[20] = in[20] >> ( 32 - 17 ) ;
	out[21] = in[21] >> ( 32 - 17 ) ;
	out[22] = in[22] >> ( 32 - 17 ) ;
	out[23] = in[23] >> ( 32 - 17 ) ;

	out[20] |= in[24] << 14 ;
	out[21] |= in[25] << 14 ;
	out[22] |= in[26] << 14 ;
	out[23] |= in[27] << 14 ;

	out[24] = in[24] >> ( 32 - 14 ) ;
	out[25] = in[25] >> ( 32 - 14 ) ;
	out[26] = in[26] >> ( 32 - 14 ) ;
	out[27] = in[27] >> ( 32 - 14 ) ;

	out[24] |= in[28] << 11 ;
	out[25] |= in[29] << 11 ;
	out[26] |= in[30] << 11 ;
	out[27] |= in[31] << 11 ;

	out[28] = in[28] >> ( 32 - 11 ) ;
	out[29] = in[29] >> ( 32 - 11 ) ;
	out[30] = in[30] >> ( 32 - 11 ) ;
	out[31] = in[31] >> ( 32 - 11 ) ;

	out[28] |= in[32] << 8 ;
	out[29] |= in[33] << 8 ;
	out[30] |= in[34] << 8 ;
	out[31] |= in[35] << 8 ;

	out[32] = in[32] >> ( 32 - 8 ) ;
	out[33] = in[33] >> ( 32 - 8 ) ;
	out[34] = in[34] >> ( 32 - 8 ) ;
	out[35] = in[35] >> ( 32 - 8 ) ;

	out[32] |= in[36] << 5 ;
	out[33] |= in[37] << 5 ;
	out[34] |= in[38] << 5 ;
	out[35] |= in[39] << 5 ;

	out[36] = in[36] >> ( 32 - 5 ) ;
	out[37] = in[37] >> ( 32 - 5 ) ;
	out[38] = in[38] >> ( 32 - 5 ) ;
	out[39] = in[39] >> ( 32 - 5 ) ;

	out[36] |= in[40] << 2 ;
	out[37] |= in[41] << 2 ;
	out[38] |= in[42] << 2 ;
	out[39] |= in[43] << 2 ;

	out[36] |= in[44] << 31 ;
	out[37] |= in[45] << 31 ;
	out[38] |= in[46] << 31 ;
	out[39] |= in[47] << 31 ;

	out[40] = in[44] >> ( 32 - 31 ) ;
	out[41] = in[45] >> ( 32 - 31 ) ;
	out[42] = in[46] >> ( 32 - 31 ) ;
	out[43] = in[47] >> ( 32 - 31 ) ;

	out[40] |= in[48] << 28 ;
	out[41] |= in[49] << 28 ;
	out[42] |= in[50] << 28 ;
	out[43] |= in[51] << 28 ;

	out[44] = in[48] >> ( 32 - 28 ) ;
	out[45] = in[49] >> ( 32 - 28 ) ;
	out[46] = in[50] >> ( 32 - 28 ) ;
	out[47] = in[51] >> ( 32 - 28 ) ;

	out[44] |= in[52] << 25 ;
	out[45] |= in[53] << 25 ;
	out[46] |= in[54] << 25 ;
	out[47] |= in[55] << 25 ;

	out[48] = in[52] >> ( 32 - 25 ) ;
	out[49] = in[53] >> ( 32 - 25 ) ;
	out[50] = in[54] >> ( 32 - 25 ) ;
	out[51] = in[55] >> ( 32 - 25 ) ;

	out[48] |= in[56] << 22 ;
	out[49] |= in[57] << 22 ;
	out[50] |= in[58] << 22 ;
	out[51] |= in[59] << 22 ;

	out[52] = in[56] >> ( 32 - 22 ) ;
	out[53] = in[57] >> ( 32 - 22 ) ;
	out[54] = in[58] >> ( 32 - 22 ) ;
	out[55] = in[59] >> ( 32 - 22 ) ;

	out[52] |= in[60] << 19 ;
	out[53] |= in[61] << 19 ;
	out[54] |= in[62] << 19 ;
	out[55] |= in[63] << 19 ;

	out[56] = in[60] >> ( 32 - 19 ) ;
	out[57] = in[61] >> ( 32 - 19 ) ;
	out[58] = in[62] >> ( 32 - 19 ) ;
	out[59] = in[63] >> ( 32 - 19 ) ;

	out[56] |= in[64] << 16 ;
	out[57] |= in[65] << 16 ;
	out[58] |= in[66] << 16 ;
	out[59] |= in[67] << 16 ;

	out[60] = in[64] >> ( 32 - 16 ) ;
	out[61] = in[65] >> ( 32 - 16 ) ;
	out[62] = in[66] >> ( 32 - 16 ) ;
	out[63] = in[67] >> ( 32 - 16 ) ;

	out[60] |= in[68] << 13 ;
	out[61] |= in[69] << 13 ;
	out[62] |= in[70] << 13 ;
	out[63] |= in[71] << 13 ;

	out[64] = in[68] >> ( 32 - 13 ) ;
	out[65] = in[69] >> ( 32 - 13 ) ;
	out[66] = in[70] >> ( 32 - 13 ) ;
	out[67] = in[71] >> ( 32 - 13 ) ;

	out[64] |= in[72] << 10 ;
	out[65] |= in[73] << 10 ;
	out[66] |= in[74] << 10 ;
	out[67] |= in[75] << 10 ;

	out[68] = in[72] >> ( 32 - 10 ) ;
	out[69] = in[73] >> ( 32 - 10 ) ;
	out[70] = in[74] >> ( 32 - 10 ) ;
	out[71] = in[75] >> ( 32 - 10 ) ;

	out[68] |= in[76] << 7 ;
	out[69] |= in[77] << 7 ;
	out[70] |= in[78] << 7 ;
	out[71] |= in[79] << 7 ;

	out[72] = in[76] >> ( 32 - 7 ) ;
	out[73] = in[77] >> ( 32 - 7 ) ;
	out[74] = in[78] >> ( 32 - 7 ) ;
	out[75] = in[79] >> ( 32 - 7 ) ;

	out[72] |= in[80] << 4 ;
	out[73] |= in[81] << 4 ;
	out[74] |= in[82] << 4 ;
	out[75] |= in[83] << 4 ;

	out[76] = in[80] >> ( 32 - 4 ) ;
	out[77] = in[81] >> ( 32 - 4 ) ;
	out[78] = in[82] >> ( 32 - 4 ) ;
	out[79] = in[83] >> ( 32 - 4 ) ;

	out[76] |= in[84] << 1 ;
	out[77] |= in[85] << 1 ;
	out[78] |= in[86] << 1 ;
	out[79] |= in[87] << 1 ;

	out[76] |= in[88] << 30 ;
	out[77] |= in[89] << 30 ;
	out[78] |= in[90] << 30 ;
	out[79] |= in[91] << 30 ;

	out[80] = in[88] >> ( 32 - 30 ) ;
	out[81] = in[89] >> ( 32 - 30 ) ;
	out[82] = in[90] >> ( 32 - 30 ) ;
	out[83] = in[91] >> ( 32 - 30 ) ;

	out[80] |= in[92] << 27 ;
	out[81] |= in[93] << 27 ;
	out[82] |= in[94] << 27 ;
	out[83] |= in[95] << 27 ;

	out[84] = in[92] >> ( 32 - 27 ) ;
	out[85] = in[93] >> ( 32 - 27 ) ;
	out[86] = in[94] >> ( 32 - 27 ) ;
	out[87] = in[95] >> ( 32 - 27 ) ;

	out[84] |= in[96] << 24 ;
	out[85] |= in[97] << 24 ;
	out[86] |= in[98] << 24 ;
	out[87] |= in[99] << 24 ;

	out[88] = in[96] >> ( 32 - 24 ) ;
	out[89] = in[97] >> ( 32 - 24 ) ;
	out[90] = in[98] >> ( 32 - 24 ) ;
	out[91] = in[99] >> ( 32 - 24 ) ;

	out[88] |= in[100] << 21 ;
	out[89] |= in[101] << 21 ;
	out[90] |= in[102] << 21 ;
	out[91] |= in[103] << 21 ;

	out[92] = in[100] >> ( 32 - 21 ) ;
	out[93] = in[101] >> ( 32 - 21 ) ;
	out[94] = in[102] >> ( 32 - 21 ) ;
	out[95] = in[103] >> ( 32 - 21 ) ;

	out[92] |= in[104] << 18 ;
	out[93] |= in[105] << 18 ;
	out[94] |= in[106] << 18 ;
	out[95] |= in[107] << 18 ;

	out[96] = in[104] >> ( 32 - 18 ) ;
	out[97] = in[105] >> ( 32 - 18 ) ;
	out[98] = in[106] >> ( 32 - 18 ) ;
	out[99] = in[107] >> ( 32 - 18 ) ;

	out[96] |= in[108] << 15 ;
	out[97] |= in[109] << 15 ;
	out[98] |= in[110] << 15 ;
	out[99] |= in[111] << 15 ;

	out[100] = in[108] >> ( 32 - 15 ) ;
	out[101] = in[109] >> ( 32 - 15 ) ;
	out[102] = in[110] >> ( 32 - 15 ) ;
	out[103] = in[111] >> ( 32 - 15 ) ;

	out[100] |= in[112] << 12 ;
	out[101] |= in[113] << 12 ;
	out[102] |= in[114] << 12 ;
	out[103] |= in[115] << 12 ;

	out[104] = in[112] >> ( 32 - 12 ) ;
	out[105] = in[113] >> ( 32 - 12 ) ;
	out[106] = in[114] >> ( 32 - 12 ) ;
	out[107] = in[115] >> ( 32 - 12 ) ;

	out[104] |= in[116] << 9 ;
	out[105] |= in[117] << 9 ;
	out[106] |= in[118] << 9 ;
	out[107] |= in[119] << 9 ;

	out[108] = in[116] >> ( 32 - 9 ) ;
	out[109] = in[117] >> ( 32 - 9 ) ;
	out[110] = in[118] >> ( 32 - 9 ) ;
	out[111] = in[119] >> ( 32 - 9 ) ;

	out[108] |= in[120] << 6 ;
	out[109] |= in[121] << 6 ;
	out[110] |= in[122] << 6 ;
	out[111] |= in[123] << 6 ;

	out[112] = in[120] >> ( 32 - 6 ) ;
	out[113] = in[121] >> ( 32 - 6 ) ;
	out[114] = in[122] >> ( 32 - 6 ) ;
	out[115] = in[123] >> ( 32 - 6 ) ;

	out[112] |= in[124] << 3 ;
	out[113] |= in[125] << 3 ;
	out[114] |= in[126] << 3 ;
	out[115] |= in[127] << 3 ;
}


// 30-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c30(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 30 ;
	out[1] |= in[5] << 30 ;
	out[2] |= in[6] << 30 ;
	out[3] |= in[7] << 30 ;

	out[4] = in[4] >> ( 32 - 30 ) ;
	out[5] = in[5] >> ( 32 - 30 ) ;
	out[6] = in[6] >> ( 32 - 30 ) ;
	out[7] = in[7] >> ( 32 - 30 ) ;

	out[4] |= in[8] << 28 ;
	out[5] |= in[9] << 28 ;
	out[6] |= in[10] << 28 ;
	out[7] |= in[11] << 28 ;

	out[8] = in[8] >> ( 32 - 28 ) ;
	out[9] = in[9] >> ( 32 - 28 ) ;
	out[10] = in[10] >> ( 32 - 28 ) ;
	out[11] = in[11] >> ( 32 - 28 ) ;

	out[8] |= in[12] << 26 ;
	out[9] |= in[13] << 26 ;
	out[10] |= in[14] << 26 ;
	out[11] |= in[15] << 26 ;

	out[12] = in[12] >> ( 32 - 26 ) ;
	out[13] = in[13] >> ( 32 - 26 ) ;
	out[14] = in[14] >> ( 32 - 26 ) ;
	out[15] = in[15] >> ( 32 - 26 ) ;

	out[12] |= in[16] << 24 ;
	out[13] |= in[17] << 24 ;
	out[14] |= in[18] << 24 ;
	out[15] |= in[19] << 24 ;

	out[16] = in[16] >> ( 32 - 24 ) ;
	out[17] = in[17] >> ( 32 - 24 ) ;
	out[18] = in[18] >> ( 32 - 24 ) ;
	out[19] = in[19] >> ( 32 - 24 ) ;

	out[16] |= in[20] << 22 ;
	out[17] |= in[21] << 22 ;
	out[18] |= in[22] << 22 ;
	out[19] |= in[23] << 22 ;

	out[20] = in[20] >> ( 32 - 22 ) ;
	out[21] = in[21] >> ( 32 - 22 ) ;
	out[22] = in[22] >> ( 32 - 22 ) ;
	out[23] = in[23] >> ( 32 - 22 ) ;

	out[20] |= in[24] << 20 ;
	out[21] |= in[25] << 20 ;
	out[22] |= in[26] << 20 ;
	out[23] |= in[27] << 20 ;

	out[24] = in[24] >> ( 32 - 20 ) ;
	out[25] = in[25] >> ( 32 - 20 ) ;
	out[26] = in[26] >> ( 32 - 20 ) ;
	out[27] = in[27] >> ( 32 - 20 ) ;

	out[24] |= in[28] << 18 ;
	out[25] |= in[29] << 18 ;
	out[26] |= in[30] << 18 ;
	out[27] |= in[31] << 18 ;

	out[28] = in[28] >> ( 32 - 18 ) ;
	out[29] = in[29] >> ( 32 - 18 ) ;
	out[30] = in[30] >> ( 32 - 18 ) ;
	out[31] = in[31] >> ( 32 - 18 ) ;

	out[28] |= in[32] << 16 ;
	out[29] |= in[33] << 16 ;
	out[30] |= in[34] << 16 ;
	out[31] |= in[35] << 16 ;

	out[32] = in[32] >> ( 32 - 16 ) ;
	out[33] = in[33] >> ( 32 - 16 ) ;
	out[34] = in[34] >> ( 32 - 16 ) ;
	out[35] = in[35] >> ( 32 - 16 ) ;

	out[32] |= in[36] << 14 ;
	out[33] |= in[37] << 14 ;
	out[34] |= in[38] << 14 ;
	out[35] |= in[39] << 14 ;

	out[36] = in[36] >> ( 32 - 14 ) ;
	out[37] = in[37] >> ( 32 - 14 ) ;
	out[38] = in[38] >> ( 32 - 14 ) ;
	out[39] = in[39] >> ( 32 - 14 ) ;

	out[36] |= in[40] << 12 ;
	out[37] |= in[41] << 12 ;
	out[38] |= in[42] << 12 ;
	out[39] |= in[43] << 12 ;

	out[40] = in[40] >> ( 32 - 12 ) ;
	out[41] = in[41] >> ( 32 - 12 ) ;
	out[42] = in[42] >> ( 32 - 12 ) ;
	out[43] = in[43] >> ( 32 - 12 ) ;

	out[40] |= in[44] << 10 ;
	out[41] |= in[45] << 10 ;
	out[42] |= in[46] << 10 ;
	out[43] |= in[47] << 10 ;

	out[44] = in[44] >> ( 32 - 10 ) ;
	out[45] = in[45] >> ( 32 - 10 ) ;
	out[46] = in[46] >> ( 32 - 10 ) ;
	out[47] = in[47] >> ( 32 - 10 ) ;

	out[44] |= in[48] << 8 ;
	out[45] |= in[49] << 8 ;
	out[46] |= in[50] << 8 ;
	out[47] |= in[51] << 8 ;

	out[48] = in[48] >> ( 32 - 8 ) ;
	out[49] = in[49] >> ( 32 - 8 ) ;
	out[50] = in[50] >> ( 32 - 8 ) ;
	out[51] = in[51] >> ( 32 - 8 ) ;

	out[48] |= in[52] << 6 ;
	out[49] |= in[53] << 6 ;
	out[50] |= in[54] << 6 ;
	out[51] |= in[55] << 6 ;

	out[52] = in[52] >> ( 32 - 6 ) ;
	out[53] = in[53] >> ( 32 - 6 ) ;
	out[54] = in[54] >> ( 32 - 6 ) ;
	out[55] = in[55] >> ( 32 - 6 ) ;

	out[52] |= in[56] << 4 ;
	out[53] |= in[57] << 4 ;
	out[54] |= in[58] << 4 ;
	out[55] |= in[59] << 4 ;

	out[56] = in[56] >> ( 32 - 4 ) ;
	out[57] = in[57] >> ( 32 - 4 ) ;
	out[58] = in[58] >> ( 32 - 4 ) ;
	out[59] = in[59] >> ( 32 - 4 ) ;

	out[56] |= in[60] << 2 ;
	out[57] |= in[61] << 2 ;
	out[58] |= in[62] << 2 ;
	out[59] |= in[63] << 2 ;

	out[60] = in[64] << 0 ;
	out[61] = in[65] << 0 ;
	out[62] = in[66] << 0 ;
	out[63] = in[67] << 0 ;

	out[60] |= in[68] << 30 ;
	out[61] |= in[69] << 30 ;
	out[62] |= in[70] << 30 ;
	out[63] |= in[71] << 30 ;

	out[64] = in[68] >> ( 32 - 30 ) ;
	out[65] = in[69] >> ( 32 - 30 ) ;
	out[66] = in[70] >> ( 32 - 30 ) ;
	out[67] = in[71] >> ( 32 - 30 ) ;

	out[64] |= in[72] << 28 ;
	out[65] |= in[73] << 28 ;
	out[66] |= in[74] << 28 ;
	out[67] |= in[75] << 28 ;

	out[68] = in[72] >> ( 32 - 28 ) ;
	out[69] = in[73] >> ( 32 - 28 ) ;
	out[70] = in[74] >> ( 32 - 28 ) ;
	out[71] = in[75] >> ( 32 - 28 ) ;

	out[68] |= in[76] << 26 ;
	out[69] |= in[77] << 26 ;
	out[70] |= in[78] << 26 ;
	out[71] |= in[79] << 26 ;

	out[72] = in[76] >> ( 32 - 26 ) ;
	out[73] = in[77] >> ( 32 - 26 ) ;
	out[74] = in[78] >> ( 32 - 26 ) ;
	out[75] = in[79] >> ( 32 - 26 ) ;

	out[72] |= in[80] << 24 ;
	out[73] |= in[81] << 24 ;
	out[74] |= in[82] << 24 ;
	out[75] |= in[83] << 24 ;

	out[76] = in[80] >> ( 32 - 24 ) ;
	out[77] = in[81] >> ( 32 - 24 ) ;
	out[78] = in[82] >> ( 32 - 24 ) ;
	out[79] = in[83] >> ( 32 - 24 ) ;

	out[76] |= in[84] << 22 ;
	out[77] |= in[85] << 22 ;
	out[78] |= in[86] << 22 ;
	out[79] |= in[87] << 22 ;

	out[80] = in[84] >> ( 32 - 22 ) ;
	out[81] = in[85] >> ( 32 - 22 ) ;
	out[82] = in[86] >> ( 32 - 22 ) ;
	out[83] = in[87] >> ( 32 - 22 ) ;

	out[80] |= in[88] << 20 ;
	out[81] |= in[89] << 20 ;
	out[82] |= in[90] << 20 ;
	out[83] |= in[91] << 20 ;

	out[84] = in[88] >> ( 32 - 20 ) ;
	out[85] = in[89] >> ( 32 - 20 ) ;
	out[86] = in[90] >> ( 32 - 20 ) ;
	out[87] = in[91] >> ( 32 - 20 ) ;

	out[84] |= in[92] << 18 ;
	out[85] |= in[93] << 18 ;
	out[86] |= in[94] << 18 ;
	out[87] |= in[95] << 18 ;

	out[88] = in[92] >> ( 32 - 18 ) ;
	out[89] = in[93] >> ( 32 - 18 ) ;
	out[90] = in[94] >> ( 32 - 18 ) ;
	out[91] = in[95] >> ( 32 - 18 ) ;

	out[88] |= in[96] << 16 ;
	out[89] |= in[97] << 16 ;
	out[90] |= in[98] << 16 ;
	out[91] |= in[99] << 16 ;

	out[92] = in[96] >> ( 32 - 16 ) ;
	out[93] = in[97] >> ( 32 - 16 ) ;
	out[94] = in[98] >> ( 32 - 16 ) ;
	out[95] = in[99] >> ( 32 - 16 ) ;

	out[92] |= in[100] << 14 ;
	out[93] |= in[101] << 14 ;
	out[94] |= in[102] << 14 ;
	out[95] |= in[103] << 14 ;

	out[96] = in[100] >> ( 32 - 14 ) ;
	out[97] = in[101] >> ( 32 - 14 ) ;
	out[98] = in[102] >> ( 32 - 14 ) ;
	out[99] = in[103] >> ( 32 - 14 ) ;

	out[96] |= in[104] << 12 ;
	out[97] |= in[105] << 12 ;
	out[98] |= in[106] << 12 ;
	out[99] |= in[107] << 12 ;

	out[100] = in[104] >> ( 32 - 12 ) ;
	out[101] = in[105] >> ( 32 - 12 ) ;
	out[102] = in[106] >> ( 32 - 12 ) ;
	out[103] = in[107] >> ( 32 - 12 ) ;

	out[100] |= in[108] << 10 ;
	out[101] |= in[109] << 10 ;
	out[102] |= in[110] << 10 ;
	out[103] |= in[111] << 10 ;

	out[104] = in[108] >> ( 32 - 10 ) ;
	out[105] = in[109] >> ( 32 - 10 ) ;
	out[106] = in[110] >> ( 32 - 10 ) ;
	out[107] = in[111] >> ( 32 - 10 ) ;

	out[104] |= in[112] << 8 ;
	out[105] |= in[113] << 8 ;
	out[106] |= in[114] << 8 ;
	out[107] |= in[115] << 8 ;

	out[108] = in[112] >> ( 32 - 8 ) ;
	out[109] = in[113] >> ( 32 - 8 ) ;
	out[110] = in[114] >> ( 32 - 8 ) ;
	out[111] = in[115] >> ( 32 - 8 ) ;

	out[108] |= in[116] << 6 ;
	out[109] |= in[117] << 6 ;
	out[110] |= in[118] << 6 ;
	out[111] |= in[119] << 6 ;

	out[112] = in[116] >> ( 32 - 6 ) ;
	out[113] = in[117] >> ( 32 - 6 ) ;
	out[114] = in[118] >> ( 32 - 6 ) ;
	out[115] = in[119] >> ( 32 - 6 ) ;

	out[112] |= in[120] << 4 ;
	out[113] |= in[121] << 4 ;
	out[114] |= in[122] << 4 ;
	out[115] |= in[123] << 4 ;

	out[116] = in[120] >> ( 32 - 4 ) ;
	out[117] = in[121] >> ( 32 - 4 ) ;
	out[118] = in[122] >> ( 32 - 4 ) ;
	out[119] = in[123] >> ( 32 - 4 ) ;

	out[116] |= in[124] << 2 ;
	out[117] |= in[125] << 2 ;
	out[118] |= in[126] << 2 ;
	out[119] |= in[127] << 2 ;
}


// 31-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c31(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = in[0] << 0 ;
	out[1] = in[1] << 0 ;
	out[2] = in[2] << 0 ;
	out[3] = in[3] << 0 ;

	out[0] |= in[4] << 31 ;
	out[1] |= in[5] << 31 ;
	out[2] |= in[6] << 31 ;
	out[3] |= in[7] << 31 ;

	out[4] = in[4] >> ( 32 - 31 ) ;
	out[5] = in[5] >> ( 32 - 31 ) ;
	out[6] = in[6] >> ( 32 - 31 ) ;
	out[7] = in[7] >> ( 32 - 31 ) ;

	out[4] |= in[8] << 30 ;
	out[5] |= in[9] << 30 ;
	out[6] |= in[10] << 30 ;
	out[7] |= in[11] << 30 ;

	out[8] = in[8] >> ( 32 - 30 ) ;
	out[9] = in[9] >> ( 32 - 30 ) ;
	out[10] = in[10] >> ( 32 - 30 ) ;
	out[11] = in[11] >> ( 32 - 30 ) ;

	out[8] |= in[12] << 29 ;
	out[9] |= in[13] << 29 ;
	out[10] |= in[14] << 29 ;
	out[11] |= in[15] << 29 ;

	out[12] = in[12] >> ( 32 - 29 ) ;
	out[13] = in[13] >> ( 32 - 29 ) ;
	out[14] = in[14] >> ( 32 - 29 ) ;
	out[15] = in[15] >> ( 32 - 29 ) ;

	out[12] |= in[16] << 28 ;
	out[13] |= in[17] << 28 ;
	out[14] |= in[18] << 28 ;
	out[15] |= in[19] << 28 ;

	out[16] = in[16] >> ( 32 - 28 ) ;
	out[17] = in[17] >> ( 32 - 28 ) ;
	out[18] = in[18] >> ( 32 - 28 ) ;
	out[19] = in[19] >> ( 32 - 28 ) ;

	out[16] |= in[20] << 27 ;
	out[17] |= in[21] << 27 ;
	out[18] |= in[22] << 27 ;
	out[19] |= in[23] << 27 ;

	out[20] = in[20] >> ( 32 - 27 ) ;
	out[21] = in[21] >> ( 32 - 27 ) ;
	out[22] = in[22] >> ( 32 - 27 ) ;
	out[23] = in[23] >> ( 32 - 27 ) ;

	out[20] |= in[24] << 26 ;
	out[21] |= in[25] << 26 ;
	out[22] |= in[26] << 26 ;
	out[23] |= in[27] << 26 ;

	out[24] = in[24] >> ( 32 - 26 ) ;
	out[25] = in[25] >> ( 32 - 26 ) ;
	out[26] = in[26] >> ( 32 - 26 ) ;
	out[27] = in[27] >> ( 32 - 26 ) ;

	out[24] |= in[28] << 25 ;
	out[25] |= in[29] << 25 ;
	out[26] |= in[30] << 25 ;
	out[27] |= in[31] << 25 ;

	out[28] = in[28] >> ( 32 - 25 ) ;
	out[29] = in[29] >> ( 32 - 25 ) ;
	out[30] = in[30] >> ( 32 - 25 ) ;
	out[31] = in[31] >> ( 32 - 25 ) ;

	out[28] |= in[32] << 24 ;
	out[29] |= in[33] << 24 ;
	out[30] |= in[34] << 24 ;
	out[31] |= in[35] << 24 ;

	out[32] = in[32] >> ( 32 - 24 ) ;
	out[33] = in[33] >> ( 32 - 24 ) ;
	out[34] = in[34] >> ( 32 - 24 ) ;
	out[35] = in[35] >> ( 32 - 24 ) ;

	out[32] |= in[36] << 23 ;
	out[33] |= in[37] << 23 ;
	out[34] |= in[38] << 23 ;
	out[35] |= in[39] << 23 ;

	out[36] = in[36] >> ( 32 - 23 ) ;
	out[37] = in[37] >> ( 32 - 23 ) ;
	out[38] = in[38] >> ( 32 - 23 ) ;
	out[39] = in[39] >> ( 32 - 23 ) ;

	out[36] |= in[40] << 22 ;
	out[37] |= in[41] << 22 ;
	out[38] |= in[42] << 22 ;
	out[39] |= in[43] << 22 ;

	out[40] = in[40] >> ( 32 - 22 ) ;
	out[41] = in[41] >> ( 32 - 22 ) ;
	out[42] = in[42] >> ( 32 - 22 ) ;
	out[43] = in[43] >> ( 32 - 22 ) ;

	out[40] |= in[44] << 21 ;
	out[41] |= in[45] << 21 ;
	out[42] |= in[46] << 21 ;
	out[43] |= in[47] << 21 ;

	out[44] = in[44] >> ( 32 - 21 ) ;
	out[45] = in[45] >> ( 32 - 21 ) ;
	out[46] = in[46] >> ( 32 - 21 ) ;
	out[47] = in[47] >> ( 32 - 21 ) ;

	out[44] |= in[48] << 20 ;
	out[45] |= in[49] << 20 ;
	out[46] |= in[50] << 20 ;
	out[47] |= in[51] << 20 ;

	out[48] = in[48] >> ( 32 - 20 ) ;
	out[49] = in[49] >> ( 32 - 20 ) ;
	out[50] = in[50] >> ( 32 - 20 ) ;
	out[51] = in[51] >> ( 32 - 20 ) ;

	out[48] |= in[52] << 19 ;
	out[49] |= in[53] << 19 ;
	out[50] |= in[54] << 19 ;
	out[51] |= in[55] << 19 ;

	out[52] = in[52] >> ( 32 - 19 ) ;
	out[53] = in[53] >> ( 32 - 19 ) ;
	out[54] = in[54] >> ( 32 - 19 ) ;
	out[55] = in[55] >> ( 32 - 19 ) ;

	out[52] |= in[56] << 18 ;
	out[53] |= in[57] << 18 ;
	out[54] |= in[58] << 18 ;
	out[55] |= in[59] << 18 ;

	out[56] = in[56] >> ( 32 - 18 ) ;
	out[57] = in[57] >> ( 32 - 18 ) ;
	out[58] = in[58] >> ( 32 - 18 ) ;
	out[59] = in[59] >> ( 32 - 18 ) ;

	out[56] |= in[60] << 17 ;
	out[57] |= in[61] << 17 ;
	out[58] |= in[62] << 17 ;
	out[59] |= in[63] << 17 ;

	out[60] = in[60] >> ( 32 - 17 ) ;
	out[61] = in[61] >> ( 32 - 17 ) ;
	out[62] = in[62] >> ( 32 - 17 ) ;
	out[63] = in[63] >> ( 32 - 17 ) ;

	out[60] |= in[64] << 16 ;
	out[61] |= in[65] << 16 ;
	out[62] |= in[66] << 16 ;
	out[63] |= in[67] << 16 ;

	out[64] = in[64] >> ( 32 - 16 ) ;
	out[65] = in[65] >> ( 32 - 16 ) ;
	out[66] = in[66] >> ( 32 - 16 ) ;
	out[67] = in[67] >> ( 32 - 16 ) ;

	out[64] |= in[68] << 15 ;
	out[65] |= in[69] << 15 ;
	out[66] |= in[70] << 15 ;
	out[67] |= in[71] << 15 ;

	out[68] = in[68] >> ( 32 - 15 ) ;
	out[69] = in[69] >> ( 32 - 15 ) ;
	out[70] = in[70] >> ( 32 - 15 ) ;
	out[71] = in[71] >> ( 32 - 15 ) ;

	out[68] |= in[72] << 14 ;
	out[69] |= in[73] << 14 ;
	out[70] |= in[74] << 14 ;
	out[71] |= in[75] << 14 ;

	out[72] = in[72] >> ( 32 - 14 ) ;
	out[73] = in[73] >> ( 32 - 14 ) ;
	out[74] = in[74] >> ( 32 - 14 ) ;
	out[75] = in[75] >> ( 32 - 14 ) ;

	out[72] |= in[76] << 13 ;
	out[73] |= in[77] << 13 ;
	out[74] |= in[78] << 13 ;
	out[75] |= in[79] << 13 ;

	out[76] = in[76] >> ( 32 - 13 ) ;
	out[77] = in[77] >> ( 32 - 13 ) ;
	out[78] = in[78] >> ( 32 - 13 ) ;
	out[79] = in[79] >> ( 32 - 13 ) ;

	out[76] |= in[80] << 12 ;
	out[77] |= in[81] << 12 ;
	out[78] |= in[82] << 12 ;
	out[79] |= in[83] << 12 ;

	out[80] = in[80] >> ( 32 - 12 ) ;
	out[81] = in[81] >> ( 32 - 12 ) ;
	out[82] = in[82] >> ( 32 - 12 ) ;
	out[83] = in[83] >> ( 32 - 12 ) ;

	out[80] |= in[84] << 11 ;
	out[81] |= in[85] << 11 ;
	out[82] |= in[86] << 11 ;
	out[83] |= in[87] << 11 ;

	out[84] = in[84] >> ( 32 - 11 ) ;
	out[85] = in[85] >> ( 32 - 11 ) ;
	out[86] = in[86] >> ( 32 - 11 ) ;
	out[87] = in[87] >> ( 32 - 11 ) ;

	out[84] |= in[88] << 10 ;
	out[85] |= in[89] << 10 ;
	out[86] |= in[90] << 10 ;
	out[87] |= in[91] << 10 ;

	out[88] = in[88] >> ( 32 - 10 ) ;
	out[89] = in[89] >> ( 32 - 10 ) ;
	out[90] = in[90] >> ( 32 - 10 ) ;
	out[91] = in[91] >> ( 32 - 10 ) ;

	out[88] |= in[92] << 9 ;
	out[89] |= in[93] << 9 ;
	out[90] |= in[94] << 9 ;
	out[91] |= in[95] << 9 ;

	out[92] = in[92] >> ( 32 - 9 ) ;
	out[93] = in[93] >> ( 32 - 9 ) ;
	out[94] = in[94] >> ( 32 - 9 ) ;
	out[95] = in[95] >> ( 32 - 9 ) ;

	out[92] |= in[96] << 8 ;
	out[93] |= in[97] << 8 ;
	out[94] |= in[98] << 8 ;
	out[95] |= in[99] << 8 ;

	out[96] = in[96] >> ( 32 - 8 ) ;
	out[97] = in[97] >> ( 32 - 8 ) ;
	out[98] = in[98] >> ( 32 - 8 ) ;
	out[99] = in[99] >> ( 32 - 8 ) ;

	out[96] |= in[100] << 7 ;
	out[97] |= in[101] << 7 ;
	out[98] |= in[102] << 7 ;
	out[99] |= in[103] << 7 ;

	out[100] = in[100] >> ( 32 - 7 ) ;
	out[101] = in[101] >> ( 32 - 7 ) ;
	out[102] = in[102] >> ( 32 - 7 ) ;
	out[103] = in[103] >> ( 32 - 7 ) ;

	out[100] |= in[104] << 6 ;
	out[101] |= in[105] << 6 ;
	out[102] |= in[106] << 6 ;
	out[103] |= in[107] << 6 ;

	out[104] = in[104] >> ( 32 - 6 ) ;
	out[105] = in[105] >> ( 32 - 6 ) ;
	out[106] = in[106] >> ( 32 - 6 ) ;
	out[107] = in[107] >> ( 32 - 6 ) ;

	out[104] |= in[108] << 5 ;
	out[105] |= in[109] << 5 ;
	out[106] |= in[110] << 5 ;
	out[107] |= in[111] << 5 ;

	out[108] = in[108] >> ( 32 - 5 ) ;
	out[109] = in[109] >> ( 32 - 5 ) ;
	out[110] = in[110] >> ( 32 - 5 ) ;
	out[111] = in[111] >> ( 32 - 5 ) ;

	out[108] |= in[112] << 4 ;
	out[109] |= in[113] << 4 ;
	out[110] |= in[114] << 4 ;
	out[111] |= in[115] << 4 ;

	out[112] = in[112] >> ( 32 - 4 ) ;
	out[113] = in[113] >> ( 32 - 4 ) ;
	out[114] = in[114] >> ( 32 - 4 ) ;
	out[115] = in[115] >> ( 32 - 4 ) ;

	out[112] |= in[116] << 3 ;
	out[113] |= in[117] << 3 ;
	out[114] |= in[118] << 3 ;
	out[115] |= in[119] << 3 ;

	out[116] = in[116] >> ( 32 - 3 ) ;
	out[117] = in[117] >> ( 32 - 3 ) ;
	out[118] = in[118] >> ( 32 - 3 ) ;
	out[119] = in[119] >> ( 32 - 3 ) ;

	out[116] |= in[120] << 2 ;
	out[117] |= in[121] << 2 ;
	out[118] |= in[122] << 2 ;
	out[119] |= in[123] << 2 ;

	out[120] = in[120] >> ( 32 - 2 ) ;
	out[121] = in[121] >> ( 32 - 2 ) ;
	out[122] = in[122] >> ( 32 - 2 ) ;
	out[123] = in[123] >> ( 32 - 2 ) ;

	out[120] |= in[124] << 1 ;
	out[121] |= in[125] << 1 ;
	out[122] |= in[126] << 1 ;
	out[123] |= in[127] << 1 ;
}


// 32-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_packwithoutmask128_c32(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	memcpy(out, in, 128 * sizeof(uint32_t));
}


// 1-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c1(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x01 ) << 0 ;
	out[1] = ( in[1] & 0x01 ) << 0 ;
	out[2] = ( in[2] & 0x01 ) << 0 ;
	out[3] = ( in[3] & 0x01 ) << 0 ;

	out[0] |= ( in[4] & 0x01 ) << 1 ;
	out[1] |= ( in[5] & 0x01 ) << 1 ;
	out[2] |= ( in[6] & 0x01 ) << 1 ;
	out[3] |= ( in[7] & 0x01 ) << 1 ;

	out[0] |= ( in[8] & 0x01 ) << 2 ;
	out[1] |= ( in[9] & 0x01 ) << 2 ;
	out[2] |= ( in[10] & 0x01 ) << 2 ;
	out[3] |= ( in[11] & 0x01 ) << 2 ;

	out[0] |= ( in[12] & 0x01 ) << 3 ;
	out[1] |= ( in[13] & 0x01 ) << 3 ;
	out[2] |= ( in[14] & 0x01 ) << 3 ;
	out[3] |= ( in[15] & 0x01 ) << 3 ;

	out[0] |= ( in[16] & 0x01 ) << 4 ;
	out[1] |= ( in[17] & 0x01 ) << 4 ;
	out[2] |= ( in[18] & 0x01 ) << 4 ;
	out[3] |= ( in[19] & 0x01 ) << 4 ;

	out[0] |= ( in[20] & 0x01 ) << 5 ;
	out[1] |= ( in[21] & 0x01 ) << 5 ;
	out[2] |= ( in[22] & 0x01 ) << 5 ;
	out[3] |= ( in[23] & 0x01 ) << 5 ;

	out[0] |= ( in[24] & 0x01 ) << 6 ;
	out[1] |= ( in[25] & 0x01 ) << 6 ;
	out[2] |= ( in[26] & 0x01 ) << 6 ;
	out[3] |= ( in[27] & 0x01 ) << 6 ;

	out[0] |= ( in[28] & 0x01 ) << 7 ;
	out[1] |= ( in[29] & 0x01 ) << 7 ;
	out[2] |= ( in[30] & 0x01 ) << 7 ;
	out[3] |= ( in[31] & 0x01 ) << 7 ;

	out[0] |= ( in[32] & 0x01 ) << 8 ;
	out[1] |= ( in[33] & 0x01 ) << 8 ;
	out[2] |= ( in[34] & 0x01 ) << 8 ;
	out[3] |= ( in[35] & 0x01 ) << 8 ;

	out[0] |= ( in[36] & 0x01 ) << 9 ;
	out[1] |= ( in[37] & 0x01 ) << 9 ;
	out[2] |= ( in[38] & 0x01 ) << 9 ;
	out[3] |= ( in[39] & 0x01 ) << 9 ;

	out[0] |= ( in[40] & 0x01 ) << 10 ;
	out[1] |= ( in[41] & 0x01 ) << 10 ;
	out[2] |= ( in[42] & 0x01 ) << 10 ;
	out[3] |= ( in[43] & 0x01 ) << 10 ;

	out[0] |= ( in[44] & 0x01 ) << 11 ;
	out[1] |= ( in[45] & 0x01 ) << 11 ;
	out[2] |= ( in[46] & 0x01 ) << 11 ;
	out[3] |= ( in[47] & 0x01 ) << 11 ;

	out[0] |= ( in[48] & 0x01 ) << 12 ;
	out[1] |= ( in[49] & 0x01 ) << 12 ;
	out[2] |= ( in[50] & 0x01 ) << 12 ;
	out[3] |= ( in[51] & 0x01 ) << 12 ;

	out[0] |= ( in[52] & 0x01 ) << 13 ;
	out[1] |= ( in[53] & 0x01 ) << 13 ;
	out[2] |= ( in[54] & 0x01 ) << 13 ;
	out[3] |= ( in[55] & 0x01 ) << 13 ;

	out[0] |= ( in[56] & 0x01 ) << 14 ;
	out[1] |= ( in[57] & 0x01 ) << 14 ;
	out[2] |= ( in[58] & 0x01 ) << 14 ;
	out[3] |= ( in[59] & 0x01 ) << 14 ;

	out[0] |= ( in[60] & 0x01 ) << 15 ;
	out[1] |= ( in[61] & 0x01 ) << 15 ;
	out[2] |= ( in[62] & 0x01 ) << 15 ;
	out[3] |= ( in[63] & 0x01 ) << 15 ;

	out[0] |= ( in[64] & 0x01 ) << 16 ;
	out[1] |= ( in[65] & 0x01 ) << 16 ;
	out[2] |= ( in[66] & 0x01 ) << 16 ;
	out[3] |= ( in[67] & 0x01 ) << 16 ;

	out[0] |= ( in[68] & 0x01 ) << 17 ;
	out[1] |= ( in[69] & 0x01 ) << 17 ;
	out[2] |= ( in[70] & 0x01 ) << 17 ;
	out[3] |= ( in[71] & 0x01 ) << 17 ;

	out[0] |= ( in[72] & 0x01 ) << 18 ;
	out[1] |= ( in[73] & 0x01 ) << 18 ;
	out[2] |= ( in[74] & 0x01 ) << 18 ;
	out[3] |= ( in[75] & 0x01 ) << 18 ;

	out[0] |= ( in[76] & 0x01 ) << 19 ;
	out[1] |= ( in[77] & 0x01 ) << 19 ;
	out[2] |= ( in[78] & 0x01 ) << 19 ;
	out[3] |= ( in[79] & 0x01 ) << 19 ;

	out[0] |= ( in[80] & 0x01 ) << 20 ;
	out[1] |= ( in[81] & 0x01 ) << 20 ;
	out[2] |= ( in[82] & 0x01 ) << 20 ;
	out[3] |= ( in[83] & 0x01 ) << 20 ;

	out[0] |= ( in[84] & 0x01 ) << 21 ;
	out[1] |= ( in[85] & 0x01 ) << 21 ;
	out[2] |= ( in[86] & 0x01 ) << 21 ;
	out[3] |= ( in[87] & 0x01 ) << 21 ;

	out[0] |= ( in[88] & 0x01 ) << 22 ;
	out[1] |= ( in[89] & 0x01 ) << 22 ;
	out[2] |= ( in[90] & 0x01 ) << 22 ;
	out[3] |= ( in[91] & 0x01 ) << 22 ;

	out[0] |= ( in[92] & 0x01 ) << 23 ;
	out[1] |= ( in[93] & 0x01 ) << 23 ;
	out[2] |= ( in[94] & 0x01 ) << 23 ;
	out[3] |= ( in[95] & 0x01 ) << 23 ;

	out[0] |= ( in[96] & 0x01 ) << 24 ;
	out[1] |= ( in[97] & 0x01 ) << 24 ;
	out[2] |= ( in[98] & 0x01 ) << 24 ;
	out[3] |= ( in[99] & 0x01 ) << 24 ;

	out[0] |= ( in[100] & 0x01 ) << 25 ;
	out[1] |= ( in[101] & 0x01 ) << 25 ;
	out[2] |= ( in[102] & 0x01 ) << 25 ;
	out[3] |= ( in[103] & 0x01 ) << 25 ;

	out[0] |= ( in[104] & 0x01 ) << 26 ;
	out[1] |= ( in[105] & 0x01 ) << 26 ;
	out[2] |= ( in[106] & 0x01 ) << 26 ;
	out[3] |= ( in[107] & 0x01 ) << 26 ;

	out[0] |= ( in[108] & 0x01 ) << 27 ;
	out[1] |= ( in[109] & 0x01 ) << 27 ;
	out[2] |= ( in[110] & 0x01 ) << 27 ;
	out[3] |= ( in[111] & 0x01 ) << 27 ;

	out[0] |= ( in[112] & 0x01 ) << 28 ;
	out[1] |= ( in[113] & 0x01 ) << 28 ;
	out[2] |= ( in[114] & 0x01 ) << 28 ;
	out[3] |= ( in[115] & 0x01 ) << 28 ;

	out[0] |= ( in[116] & 0x01 ) << 29 ;
	out[1] |= ( in[117] & 0x01 ) << 29 ;
	out[2] |= ( in[118] & 0x01 ) << 29 ;
	out[3] |= ( in[119] & 0x01 ) << 29 ;

	out[0] |= ( in[120] & 0x01 ) << 30 ;
	out[1] |= ( in[121] & 0x01 ) << 30 ;
	out[2] |= ( in[122] & 0x01 ) << 30 ;
	out[3] |= ( in[123] & 0x01 ) << 30 ;

	out[0] |= in[124] << 31 ;
	out[1] |= in[125] << 31 ;
	out[2] |= in[126] << 31 ;
	out[3] |= in[127] << 31 ;
}


// 2-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c2(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x03 ) << 0 ;
	out[1] = ( in[1] & 0x03 ) << 0 ;
	out[2] = ( in[2] & 0x03 ) << 0 ;
	out[3] = ( in[3] & 0x03 ) << 0 ;

	out[0] |= ( in[4] & 0x03 ) << 2 ;
	out[1] |= ( in[5] & 0x03 ) << 2 ;
	out[2] |= ( in[6] & 0x03 ) << 2 ;
	out[3] |= ( in[7] & 0x03 ) << 2 ;

	out[0] |= ( in[8] & 0x03 ) << 4 ;
	out[1] |= ( in[9] & 0x03 ) << 4 ;
	out[2] |= ( in[10] & 0x03 ) << 4 ;
	out[3] |= ( in[11] & 0x03 ) << 4 ;

	out[0] |= ( in[12] & 0x03 ) << 6 ;
	out[1] |= ( in[13] & 0x03 ) << 6 ;
	out[2] |= ( in[14] & 0x03 ) << 6 ;
	out[3] |= ( in[15] & 0x03 ) << 6 ;

	out[0] |= ( in[16] & 0x03 ) << 8 ;
	out[1] |= ( in[17] & 0x03 ) << 8 ;
	out[2] |= ( in[18] & 0x03 ) << 8 ;
	out[3] |= ( in[19] & 0x03 ) << 8 ;

	out[0] |= ( in[20] & 0x03 ) << 10 ;
	out[1] |= ( in[21] & 0x03 ) << 10 ;
	out[2] |= ( in[22] & 0x03 ) << 10 ;
	out[3] |= ( in[23] & 0x03 ) << 10 ;

	out[0] |= ( in[24] & 0x03 ) << 12 ;
	out[1] |= ( in[25] & 0x03 ) << 12 ;
	out[2] |= ( in[26] & 0x03 ) << 12 ;
	out[3] |= ( in[27] & 0x03 ) << 12 ;

	out[0] |= ( in[28] & 0x03 ) << 14 ;
	out[1] |= ( in[29] & 0x03 ) << 14 ;
	out[2] |= ( in[30] & 0x03 ) << 14 ;
	out[3] |= ( in[31] & 0x03 ) << 14 ;

	out[0] |= ( in[32] & 0x03 ) << 16 ;
	out[1] |= ( in[33] & 0x03 ) << 16 ;
	out[2] |= ( in[34] & 0x03 ) << 16 ;
	out[3] |= ( in[35] & 0x03 ) << 16 ;

	out[0] |= ( in[36] & 0x03 ) << 18 ;
	out[1] |= ( in[37] & 0x03 ) << 18 ;
	out[2] |= ( in[38] & 0x03 ) << 18 ;
	out[3] |= ( in[39] & 0x03 ) << 18 ;

	out[0] |= ( in[40] & 0x03 ) << 20 ;
	out[1] |= ( in[41] & 0x03 ) << 20 ;
	out[2] |= ( in[42] & 0x03 ) << 20 ;
	out[3] |= ( in[43] & 0x03 ) << 20 ;

	out[0] |= ( in[44] & 0x03 ) << 22 ;
	out[1] |= ( in[45] & 0x03 ) << 22 ;
	out[2] |= ( in[46] & 0x03 ) << 22 ;
	out[3] |= ( in[47] & 0x03 ) << 22 ;

	out[0] |= ( in[48] & 0x03 ) << 24 ;
	out[1] |= ( in[49] & 0x03 ) << 24 ;
	out[2] |= ( in[50] & 0x03 ) << 24 ;
	out[3] |= ( in[51] & 0x03 ) << 24 ;

	out[0] |= ( in[52] & 0x03 ) << 26 ;
	out[1] |= ( in[53] & 0x03 ) << 26 ;
	out[2] |= ( in[54] & 0x03 ) << 26 ;
	out[3] |= ( in[55] & 0x03 ) << 26 ;

	out[0] |= ( in[56] & 0x03 ) << 28 ;
	out[1] |= ( in[57] & 0x03 ) << 28 ;
	out[2] |= ( in[58] & 0x03 ) << 28 ;
	out[3] |= ( in[59] & 0x03 ) << 28 ;

	out[0] |= in[60] << 30 ;
	out[1] |= in[61] << 30 ;
	out[2] |= in[62] << 30 ;
	out[3] |= in[63] << 30 ;

	out[4] = ( in[64] & 0x03 ) << 0 ;
	out[5] = ( in[65] & 0x03 ) << 0 ;
	out[6] = ( in[66] & 0x03 ) << 0 ;
	out[7] = ( in[67] & 0x03 ) << 0 ;

	out[4] |= ( in[68] & 0x03 ) << 2 ;
	out[5] |= ( in[69] & 0x03 ) << 2 ;
	out[6] |= ( in[70] & 0x03 ) << 2 ;
	out[7] |= ( in[71] & 0x03 ) << 2 ;

	out[4] |= ( in[72] & 0x03 ) << 4 ;
	out[5] |= ( in[73] & 0x03 ) << 4 ;
	out[6] |= ( in[74] & 0x03 ) << 4 ;
	out[7] |= ( in[75] & 0x03 ) << 4 ;

	out[4] |= ( in[76] & 0x03 ) << 6 ;
	out[5] |= ( in[77] & 0x03 ) << 6 ;
	out[6] |= ( in[78] & 0x03 ) << 6 ;
	out[7] |= ( in[79] & 0x03 ) << 6 ;

	out[4] |= ( in[80] & 0x03 ) << 8 ;
	out[5] |= ( in[81] & 0x03 ) << 8 ;
	out[6] |= ( in[82] & 0x03 ) << 8 ;
	out[7] |= ( in[83] & 0x03 ) << 8 ;

	out[4] |= ( in[84] & 0x03 ) << 10 ;
	out[5] |= ( in[85] & 0x03 ) << 10 ;
	out[6] |= ( in[86] & 0x03 ) << 10 ;
	out[7] |= ( in[87] & 0x03 ) << 10 ;

	out[4] |= ( in[88] & 0x03 ) << 12 ;
	out[5] |= ( in[89] & 0x03 ) << 12 ;
	out[6] |= ( in[90] & 0x03 ) << 12 ;
	out[7] |= ( in[91] & 0x03 ) << 12 ;

	out[4] |= ( in[92] & 0x03 ) << 14 ;
	out[5] |= ( in[93] & 0x03 ) << 14 ;
	out[6] |= ( in[94] & 0x03 ) << 14 ;
	out[7] |= ( in[95] & 0x03 ) << 14 ;

	out[4] |= ( in[96] & 0x03 ) << 16 ;
	out[5] |= ( in[97] & 0x03 ) << 16 ;
	out[6] |= ( in[98] & 0x03 ) << 16 ;
	out[7] |= ( in[99] & 0x03 ) << 16 ;

	out[4] |= ( in[100] & 0x03 ) << 18 ;
	out[5] |= ( in[101] & 0x03 ) << 18 ;
	out[6] |= ( in[102] & 0x03 ) << 18 ;
	out[7] |= ( in[103] & 0x03 ) << 18 ;

	out[4] |= ( in[104] & 0x03 ) << 20 ;
	out[5] |= ( in[105] & 0x03 ) << 20 ;
	out[6] |= ( in[106] & 0x03 ) << 20 ;
	out[7] |= ( in[107] & 0x03 ) << 20 ;

	out[4] |= ( in[108] & 0x03 ) << 22 ;
	out[5] |= ( in[109] & 0x03 ) << 22 ;
	out[6] |= ( in[110] & 0x03 ) << 22 ;
	out[7] |= ( in[111] & 0x03 ) << 22 ;

	out[4] |= ( in[112] & 0x03 ) << 24 ;
	out[5] |= ( in[113] & 0x03 ) << 24 ;
	out[6] |= ( in[114] & 0x03 ) << 24 ;
	out[7] |= ( in[115] & 0x03 ) << 24 ;

	out[4] |= ( in[116] & 0x03 ) << 26 ;
	out[5] |= ( in[117] & 0x03 ) << 26 ;
	out[6] |= ( in[118] & 0x03 ) << 26 ;
	out[7] |= ( in[119] & 0x03 ) << 26 ;

	out[4] |= ( in[120] & 0x03 ) << 28 ;
	out[5] |= ( in[121] & 0x03 ) << 28 ;
	out[6] |= ( in[122] & 0x03 ) << 28 ;
	out[7] |= ( in[123] & 0x03 ) << 28 ;

	out[4] |= in[124] << 30 ;
	out[5] |= in[125] << 30 ;
	out[6] |= in[126] << 30 ;
	out[7] |= in[127] << 30 ;
}


// 3-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c3(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x07 ) << 0 ;
	out[1] = ( in[1] & 0x07 ) << 0 ;
	out[2] = ( in[2] & 0x07 ) << 0 ;
	out[3] = ( in[3] & 0x07 ) << 0 ;

	out[0] |= ( in[4] & 0x07 ) << 3 ;
	out[1] |= ( in[5] & 0x07 ) << 3 ;
	out[2] |= ( in[6] & 0x07 ) << 3 ;
	out[3] |= ( in[7] & 0x07 ) << 3 ;

	out[0] |= ( in[8] & 0x07 ) << 6 ;
	out[1] |= ( in[9] & 0x07 ) << 6 ;
	out[2] |= ( in[10] & 0x07 ) << 6 ;
	out[3] |= ( in[11] & 0x07 ) << 6 ;

	out[0] |= ( in[12] & 0x07 ) << 9 ;
	out[1] |= ( in[13] & 0x07 ) << 9 ;
	out[2] |= ( in[14] & 0x07 ) << 9 ;
	out[3] |= ( in[15] & 0x07 ) << 9 ;

	out[0] |= ( in[16] & 0x07 ) << 12 ;
	out[1] |= ( in[17] & 0x07 ) << 12 ;
	out[2] |= ( in[18] & 0x07 ) << 12 ;
	out[3] |= ( in[19] & 0x07 ) << 12 ;

	out[0] |= ( in[20] & 0x07 ) << 15 ;
	out[1] |= ( in[21] & 0x07 ) << 15 ;
	out[2] |= ( in[22] & 0x07 ) << 15 ;
	out[3] |= ( in[23] & 0x07 ) << 15 ;

	out[0] |= ( in[24] & 0x07 ) << 18 ;
	out[1] |= ( in[25] & 0x07 ) << 18 ;
	out[2] |= ( in[26] & 0x07 ) << 18 ;
	out[3] |= ( in[27] & 0x07 ) << 18 ;

	out[0] |= ( in[28] & 0x07 ) << 21 ;
	out[1] |= ( in[29] & 0x07 ) << 21 ;
	out[2] |= ( in[30] & 0x07 ) << 21 ;
	out[3] |= ( in[31] & 0x07 ) << 21 ;

	out[0] |= ( in[32] & 0x07 ) << 24 ;
	out[1] |= ( in[33] & 0x07 ) << 24 ;
	out[2] |= ( in[34] & 0x07 ) << 24 ;
	out[3] |= ( in[35] & 0x07 ) << 24 ;

	out[0] |= ( in[36] & 0x07 ) << 27 ;
	out[1] |= ( in[37] & 0x07 ) << 27 ;
	out[2] |= ( in[38] & 0x07 ) << 27 ;
	out[3] |= ( in[39] & 0x07 ) << 27 ;

	out[0] |= in[40] << 30 ;
	out[1] |= in[41] << 30 ;
	out[2] |= in[42] << 30 ;
	out[3] |= in[43] << 30 ;

	out[4] = ( in[40] & 0x07 ) >> ( 32 - 30 ) ;
	out[5] = ( in[41] & 0x07 ) >> ( 32 - 30 ) ;
	out[6] = ( in[42] & 0x07 ) >> ( 32 - 30 ) ;
	out[7] = ( in[43] & 0x07 ) >> ( 32 - 30 ) ;

	out[4] |= ( in[44] & 0x07 ) << 1 ;
	out[5] |= ( in[45] & 0x07 ) << 1 ;
	out[6] |= ( in[46] & 0x07 ) << 1 ;
	out[7] |= ( in[47] & 0x07 ) << 1 ;

	out[4] |= ( in[48] & 0x07 ) << 4 ;
	out[5] |= ( in[49] & 0x07 ) << 4 ;
	out[6] |= ( in[50] & 0x07 ) << 4 ;
	out[7] |= ( in[51] & 0x07 ) << 4 ;

	out[4] |= ( in[52] & 0x07 ) << 7 ;
	out[5] |= ( in[53] & 0x07 ) << 7 ;
	out[6] |= ( in[54] & 0x07 ) << 7 ;
	out[7] |= ( in[55] & 0x07 ) << 7 ;

	out[4] |= ( in[56] & 0x07 ) << 10 ;
	out[5] |= ( in[57] & 0x07 ) << 10 ;
	out[6] |= ( in[58] & 0x07 ) << 10 ;
	out[7] |= ( in[59] & 0x07 ) << 10 ;

	out[4] |= ( in[60] & 0x07 ) << 13 ;
	out[5] |= ( in[61] & 0x07 ) << 13 ;
	out[6] |= ( in[62] & 0x07 ) << 13 ;
	out[7] |= ( in[63] & 0x07 ) << 13 ;

	out[4] |= ( in[64] & 0x07 ) << 16 ;
	out[5] |= ( in[65] & 0x07 ) << 16 ;
	out[6] |= ( in[66] & 0x07 ) << 16 ;
	out[7] |= ( in[67] & 0x07 ) << 16 ;

	out[4] |= ( in[68] & 0x07 ) << 19 ;
	out[5] |= ( in[69] & 0x07 ) << 19 ;
	out[6] |= ( in[70] & 0x07 ) << 19 ;
	out[7] |= ( in[71] & 0x07 ) << 19 ;

	out[4] |= ( in[72] & 0x07 ) << 22 ;
	out[5] |= ( in[73] & 0x07 ) << 22 ;
	out[6] |= ( in[74] & 0x07 ) << 22 ;
	out[7] |= ( in[75] & 0x07 ) << 22 ;

	out[4] |= ( in[76] & 0x07 ) << 25 ;
	out[5] |= ( in[77] & 0x07 ) << 25 ;
	out[6] |= ( in[78] & 0x07 ) << 25 ;
	out[7] |= ( in[79] & 0x07 ) << 25 ;

	out[4] |= ( in[80] & 0x07 ) << 28 ;
	out[5] |= ( in[81] & 0x07 ) << 28 ;
	out[6] |= ( in[82] & 0x07 ) << 28 ;
	out[7] |= ( in[83] & 0x07 ) << 28 ;

	out[4] |= in[84] << 31 ;
	out[5] |= in[85] << 31 ;
	out[6] |= in[86] << 31 ;
	out[7] |= in[87] << 31 ;

	out[8] = ( in[84] & 0x07 ) >> ( 32 - 31 ) ;
	out[9] = ( in[85] & 0x07 ) >> ( 32 - 31 ) ;
	out[10] = ( in[86] & 0x07 ) >> ( 32 - 31 ) ;
	out[11] = ( in[87] & 0x07 ) >> ( 32 - 31 ) ;

	out[8] |= ( in[88] & 0x07 ) << 2 ;
	out[9] |= ( in[89] & 0x07 ) << 2 ;
	out[10] |= ( in[90] & 0x07 ) << 2 ;
	out[11] |= ( in[91] & 0x07 ) << 2 ;

	out[8] |= ( in[92] & 0x07 ) << 5 ;
	out[9] |= ( in[93] & 0x07 ) << 5 ;
	out[10] |= ( in[94] & 0x07 ) << 5 ;
	out[11] |= ( in[95] & 0x07 ) << 5 ;

	out[8] |= ( in[96] & 0x07 ) << 8 ;
	out[9] |= ( in[97] & 0x07 ) << 8 ;
	out[10] |= ( in[98] & 0x07 ) << 8 ;
	out[11] |= ( in[99] & 0x07 ) << 8 ;

	out[8] |= ( in[100] & 0x07 ) << 11 ;
	out[9] |= ( in[101] & 0x07 ) << 11 ;
	out[10] |= ( in[102] & 0x07 ) << 11 ;
	out[11] |= ( in[103] & 0x07 ) << 11 ;

	out[8] |= ( in[104] & 0x07 ) << 14 ;
	out[9] |= ( in[105] & 0x07 ) << 14 ;
	out[10] |= ( in[106] & 0x07 ) << 14 ;
	out[11] |= ( in[107] & 0x07 ) << 14 ;

	out[8] |= ( in[108] & 0x07 ) << 17 ;
	out[9] |= ( in[109] & 0x07 ) << 17 ;
	out[10] |= ( in[110] & 0x07 ) << 17 ;
	out[11] |= ( in[111] & 0x07 ) << 17 ;

	out[8] |= ( in[112] & 0x07 ) << 20 ;
	out[9] |= ( in[113] & 0x07 ) << 20 ;
	out[10] |= ( in[114] & 0x07 ) << 20 ;
	out[11] |= ( in[115] & 0x07 ) << 20 ;

	out[8] |= ( in[116] & 0x07 ) << 23 ;
	out[9] |= ( in[117] & 0x07 ) << 23 ;
	out[10] |= ( in[118] & 0x07 ) << 23 ;
	out[11] |= ( in[119] & 0x07 ) << 23 ;

	out[8] |= ( in[120] & 0x07 ) << 26 ;
	out[9] |= ( in[121] & 0x07 ) << 26 ;
	out[10] |= ( in[122] & 0x07 ) << 26 ;
	out[11] |= ( in[123] & 0x07 ) << 26 ;

	out[8] |= in[124] << 29 ;
	out[9] |= in[125] << 29 ;
	out[10] |= in[126] << 29 ;
	out[11] |= in[127] << 29 ;
}


// 4-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c4(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x0f ) << 0 ;
	out[1] = ( in[1] & 0x0f ) << 0 ;
	out[2] = ( in[2] & 0x0f ) << 0 ;
	out[3] = ( in[3] & 0x0f ) << 0 ;

	out[0] |= ( in[4] & 0x0f ) << 4 ;
	out[1] |= ( in[5] & 0x0f ) << 4 ;
	out[2] |= ( in[6] & 0x0f ) << 4 ;
	out[3] |= ( in[7] & 0x0f ) << 4 ;

	out[0] |= ( in[8] & 0x0f ) << 8 ;
	out[1] |= ( in[9] & 0x0f ) << 8 ;
	out[2] |= ( in[10] & 0x0f ) << 8 ;
	out[3] |= ( in[11] & 0x0f ) << 8 ;

	out[0] |= ( in[12] & 0x0f ) << 12 ;
	out[1] |= ( in[13] & 0x0f ) << 12 ;
	out[2] |= ( in[14] & 0x0f ) << 12 ;
	out[3] |= ( in[15] & 0x0f ) << 12 ;

	out[0] |= ( in[16] & 0x0f ) << 16 ;
	out[1] |= ( in[17] & 0x0f ) << 16 ;
	out[2] |= ( in[18] & 0x0f ) << 16 ;
	out[3] |= ( in[19] & 0x0f ) << 16 ;

	out[0] |= ( in[20] & 0x0f ) << 20 ;
	out[1] |= ( in[21] & 0x0f ) << 20 ;
	out[2] |= ( in[22] & 0x0f ) << 20 ;
	out[3] |= ( in[23] & 0x0f ) << 20 ;

	out[0] |= ( in[24] & 0x0f ) << 24 ;
	out[1] |= ( in[25] & 0x0f ) << 24 ;
	out[2] |= ( in[26] & 0x0f ) << 24 ;
	out[3] |= ( in[27] & 0x0f ) << 24 ;

	out[0] |= in[28] << 28 ;
	out[1] |= in[29] << 28 ;
	out[2] |= in[30] << 28 ;
	out[3] |= in[31] << 28 ;

	out[4] = ( in[32] & 0x0f ) << 0 ;
	out[5] = ( in[33] & 0x0f ) << 0 ;
	out[6] = ( in[34] & 0x0f ) << 0 ;
	out[7] = ( in[35] & 0x0f ) << 0 ;

	out[4] |= ( in[36] & 0x0f ) << 4 ;
	out[5] |= ( in[37] & 0x0f ) << 4 ;
	out[6] |= ( in[38] & 0x0f ) << 4 ;
	out[7] |= ( in[39] & 0x0f ) << 4 ;

	out[4] |= ( in[40] & 0x0f ) << 8 ;
	out[5] |= ( in[41] & 0x0f ) << 8 ;
	out[6] |= ( in[42] & 0x0f ) << 8 ;
	out[7] |= ( in[43] & 0x0f ) << 8 ;

	out[4] |= ( in[44] & 0x0f ) << 12 ;
	out[5] |= ( in[45] & 0x0f ) << 12 ;
	out[6] |= ( in[46] & 0x0f ) << 12 ;
	out[7] |= ( in[47] & 0x0f ) << 12 ;

	out[4] |= ( in[48] & 0x0f ) << 16 ;
	out[5] |= ( in[49] & 0x0f ) << 16 ;
	out[6] |= ( in[50] & 0x0f ) << 16 ;
	out[7] |= ( in[51] & 0x0f ) << 16 ;

	out[4] |= ( in[52] & 0x0f ) << 20 ;
	out[5] |= ( in[53] & 0x0f ) << 20 ;
	out[6] |= ( in[54] & 0x0f ) << 20 ;
	out[7] |= ( in[55] & 0x0f ) << 20 ;

	out[4] |= ( in[56] & 0x0f ) << 24 ;
	out[5] |= ( in[57] & 0x0f ) << 24 ;
	out[6] |= ( in[58] & 0x0f ) << 24 ;
	out[7] |= ( in[59] & 0x0f ) << 24 ;

	out[4] |= in[60] << 28 ;
	out[5] |= in[61] << 28 ;
	out[6] |= in[62] << 28 ;
	out[7] |= in[63] << 28 ;

	out[8] = ( in[64] & 0x0f ) << 0 ;
	out[9] = ( in[65] & 0x0f ) << 0 ;
	out[10] = ( in[66] & 0x0f ) << 0 ;
	out[11] = ( in[67] & 0x0f ) << 0 ;

	out[8] |= ( in[68] & 0x0f ) << 4 ;
	out[9] |= ( in[69] & 0x0f ) << 4 ;
	out[10] |= ( in[70] & 0x0f ) << 4 ;
	out[11] |= ( in[71] & 0x0f ) << 4 ;

	out[8] |= ( in[72] & 0x0f ) << 8 ;
	out[9] |= ( in[73] & 0x0f ) << 8 ;
	out[10] |= ( in[74] & 0x0f ) << 8 ;
	out[11] |= ( in[75] & 0x0f ) << 8 ;

	out[8] |= ( in[76] & 0x0f ) << 12 ;
	out[9] |= ( in[77] & 0x0f ) << 12 ;
	out[10] |= ( in[78] & 0x0f ) << 12 ;
	out[11] |= ( in[79] & 0x0f ) << 12 ;

	out[8] |= ( in[80] & 0x0f ) << 16 ;
	out[9] |= ( in[81] & 0x0f ) << 16 ;
	out[10] |= ( in[82] & 0x0f ) << 16 ;
	out[11] |= ( in[83] & 0x0f ) << 16 ;

	out[8] |= ( in[84] & 0x0f ) << 20 ;
	out[9] |= ( in[85] & 0x0f ) << 20 ;
	out[10] |= ( in[86] & 0x0f ) << 20 ;
	out[11] |= ( in[87] & 0x0f ) << 20 ;

	out[8] |= ( in[88] & 0x0f ) << 24 ;
	out[9] |= ( in[89] & 0x0f ) << 24 ;
	out[10] |= ( in[90] & 0x0f ) << 24 ;
	out[11] |= ( in[91] & 0x0f ) << 24 ;

	out[8] |= in[92] << 28 ;
	out[9] |= in[93] << 28 ;
	out[10] |= in[94] << 28 ;
	out[11] |= in[95] << 28 ;

	out[12] = ( in[96] & 0x0f ) << 0 ;
	out[13] = ( in[97] & 0x0f ) << 0 ;
	out[14] = ( in[98] & 0x0f ) << 0 ;
	out[15] = ( in[99] & 0x0f ) << 0 ;

	out[12] |= ( in[100] & 0x0f ) << 4 ;
	out[13] |= ( in[101] & 0x0f ) << 4 ;
	out[14] |= ( in[102] & 0x0f ) << 4 ;
	out[15] |= ( in[103] & 0x0f ) << 4 ;

	out[12] |= ( in[104] & 0x0f ) << 8 ;
	out[13] |= ( in[105] & 0x0f ) << 8 ;
	out[14] |= ( in[106] & 0x0f ) << 8 ;
	out[15] |= ( in[107] & 0x0f ) << 8 ;

	out[12] |= ( in[108] & 0x0f ) << 12 ;
	out[13] |= ( in[109] & 0x0f ) << 12 ;
	out[14] |= ( in[110] & 0x0f ) << 12 ;
	out[15] |= ( in[111] & 0x0f ) << 12 ;

	out[12] |= ( in[112] & 0x0f ) << 16 ;
	out[13] |= ( in[113] & 0x0f ) << 16 ;
	out[14] |= ( in[114] & 0x0f ) << 16 ;
	out[15] |= ( in[115] & 0x0f ) << 16 ;

	out[12] |= ( in[116] & 0x0f ) << 20 ;
	out[13] |= ( in[117] & 0x0f ) << 20 ;
	out[14] |= ( in[118] & 0x0f ) << 20 ;
	out[15] |= ( in[119] & 0x0f ) << 20 ;

	out[12] |= ( in[120] & 0x0f ) << 24 ;
	out[13] |= ( in[121] & 0x0f ) << 24 ;
	out[14] |= ( in[122] & 0x0f ) << 24 ;
	out[15] |= ( in[123] & 0x0f ) << 24 ;

	out[12] |= in[124] << 28 ;
	out[13] |= in[125] << 28 ;
	out[14] |= in[126] << 28 ;
	out[15] |= in[127] << 28 ;
}


// 5-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c5(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x1f ) << 0 ;
	out[1] = ( in[1] & 0x1f ) << 0 ;
	out[2] = ( in[2] & 0x1f ) << 0 ;
	out[3] = ( in[3] & 0x1f ) << 0 ;

	out[0] |= ( in[4] & 0x1f ) << 5 ;
	out[1] |= ( in[5] & 0x1f ) << 5 ;
	out[2] |= ( in[6] & 0x1f ) << 5 ;
	out[3] |= ( in[7] & 0x1f ) << 5 ;

	out[0] |= ( in[8] & 0x1f ) << 10 ;
	out[1] |= ( in[9] & 0x1f ) << 10 ;
	out[2] |= ( in[10] & 0x1f ) << 10 ;
	out[3] |= ( in[11] & 0x1f ) << 10 ;

	out[0] |= ( in[12] & 0x1f ) << 15 ;
	out[1] |= ( in[13] & 0x1f ) << 15 ;
	out[2] |= ( in[14] & 0x1f ) << 15 ;
	out[3] |= ( in[15] & 0x1f ) << 15 ;

	out[0] |= ( in[16] & 0x1f ) << 20 ;
	out[1] |= ( in[17] & 0x1f ) << 20 ;
	out[2] |= ( in[18] & 0x1f ) << 20 ;
	out[3] |= ( in[19] & 0x1f ) << 20 ;

	out[0] |= ( in[20] & 0x1f ) << 25 ;
	out[1] |= ( in[21] & 0x1f ) << 25 ;
	out[2] |= ( in[22] & 0x1f ) << 25 ;
	out[3] |= ( in[23] & 0x1f ) << 25 ;

	out[0] |= in[24] << 30 ;
	out[1] |= in[25] << 30 ;
	out[2] |= in[26] << 30 ;
	out[3] |= in[27] << 30 ;

	out[4] = ( in[24] & 0x1f ) >> ( 32 - 30 ) ;
	out[5] = ( in[25] & 0x1f ) >> ( 32 - 30 ) ;
	out[6] = ( in[26] & 0x1f ) >> ( 32 - 30 ) ;
	out[7] = ( in[27] & 0x1f ) >> ( 32 - 30 ) ;

	out[4] |= ( in[28] & 0x1f ) << 3 ;
	out[5] |= ( in[29] & 0x1f ) << 3 ;
	out[6] |= ( in[30] & 0x1f ) << 3 ;
	out[7] |= ( in[31] & 0x1f ) << 3 ;

	out[4] |= ( in[32] & 0x1f ) << 8 ;
	out[5] |= ( in[33] & 0x1f ) << 8 ;
	out[6] |= ( in[34] & 0x1f ) << 8 ;
	out[7] |= ( in[35] & 0x1f ) << 8 ;

	out[4] |= ( in[36] & 0x1f ) << 13 ;
	out[5] |= ( in[37] & 0x1f ) << 13 ;
	out[6] |= ( in[38] & 0x1f ) << 13 ;
	out[7] |= ( in[39] & 0x1f ) << 13 ;

	out[4] |= ( in[40] & 0x1f ) << 18 ;
	out[5] |= ( in[41] & 0x1f ) << 18 ;
	out[6] |= ( in[42] & 0x1f ) << 18 ;
	out[7] |= ( in[43] & 0x1f ) << 18 ;

	out[4] |= ( in[44] & 0x1f ) << 23 ;
	out[5] |= ( in[45] & 0x1f ) << 23 ;
	out[6] |= ( in[46] & 0x1f ) << 23 ;
	out[7] |= ( in[47] & 0x1f ) << 23 ;

	out[4] |= in[48] << 28 ;
	out[5] |= in[49] << 28 ;
	out[6] |= in[50] << 28 ;
	out[7] |= in[51] << 28 ;

	out[8] = ( in[48] & 0x1f ) >> ( 32 - 28 ) ;
	out[9] = ( in[49] & 0x1f ) >> ( 32 - 28 ) ;
	out[10] = ( in[50] & 0x1f ) >> ( 32 - 28 ) ;
	out[11] = ( in[51] & 0x1f ) >> ( 32 - 28 ) ;

	out[8] |= ( in[52] & 0x1f ) << 1 ;
	out[9] |= ( in[53] & 0x1f ) << 1 ;
	out[10] |= ( in[54] & 0x1f ) << 1 ;
	out[11] |= ( in[55] & 0x1f ) << 1 ;

	out[8] |= ( in[56] & 0x1f ) << 6 ;
	out[9] |= ( in[57] & 0x1f ) << 6 ;
	out[10] |= ( in[58] & 0x1f ) << 6 ;
	out[11] |= ( in[59] & 0x1f ) << 6 ;

	out[8] |= ( in[60] & 0x1f ) << 11 ;
	out[9] |= ( in[61] & 0x1f ) << 11 ;
	out[10] |= ( in[62] & 0x1f ) << 11 ;
	out[11] |= ( in[63] & 0x1f ) << 11 ;

	out[8] |= ( in[64] & 0x1f ) << 16 ;
	out[9] |= ( in[65] & 0x1f ) << 16 ;
	out[10] |= ( in[66] & 0x1f ) << 16 ;
	out[11] |= ( in[67] & 0x1f ) << 16 ;

	out[8] |= ( in[68] & 0x1f ) << 21 ;
	out[9] |= ( in[69] & 0x1f ) << 21 ;
	out[10] |= ( in[70] & 0x1f ) << 21 ;
	out[11] |= ( in[71] & 0x1f ) << 21 ;

	out[8] |= ( in[72] & 0x1f ) << 26 ;
	out[9] |= ( in[73] & 0x1f ) << 26 ;
	out[10] |= ( in[74] & 0x1f ) << 26 ;
	out[11] |= ( in[75] & 0x1f ) << 26 ;

	out[8] |= in[76] << 31 ;
	out[9] |= in[77] << 31 ;
	out[10] |= in[78] << 31 ;
	out[11] |= in[79] << 31 ;

	out[12] = ( in[76] & 0x1f ) >> ( 32 - 31 ) ;
	out[13] = ( in[77] & 0x1f ) >> ( 32 - 31 ) ;
	out[14] = ( in[78] & 0x1f ) >> ( 32 - 31 ) ;
	out[15] = ( in[79] & 0x1f ) >> ( 32 - 31 ) ;

	out[12] |= ( in[80] & 0x1f ) << 4 ;
	out[13] |= ( in[81] & 0x1f ) << 4 ;
	out[14] |= ( in[82] & 0x1f ) << 4 ;
	out[15] |= ( in[83] & 0x1f ) << 4 ;

	out[12] |= ( in[84] & 0x1f ) << 9 ;
	out[13] |= ( in[85] & 0x1f ) << 9 ;
	out[14] |= ( in[86] & 0x1f ) << 9 ;
	out[15] |= ( in[87] & 0x1f ) << 9 ;

	out[12] |= ( in[88] & 0x1f ) << 14 ;
	out[13] |= ( in[89] & 0x1f ) << 14 ;
	out[14] |= ( in[90] & 0x1f ) << 14 ;
	out[15] |= ( in[91] & 0x1f ) << 14 ;

	out[12] |= ( in[92] & 0x1f ) << 19 ;
	out[13] |= ( in[93] & 0x1f ) << 19 ;
	out[14] |= ( in[94] & 0x1f ) << 19 ;
	out[15] |= ( in[95] & 0x1f ) << 19 ;

	out[12] |= ( in[96] & 0x1f ) << 24 ;
	out[13] |= ( in[97] & 0x1f ) << 24 ;
	out[14] |= ( in[98] & 0x1f ) << 24 ;
	out[15] |= ( in[99] & 0x1f ) << 24 ;

	out[12] |= in[100] << 29 ;
	out[13] |= in[101] << 29 ;
	out[14] |= in[102] << 29 ;
	out[15] |= in[103] << 29 ;

	out[16] = ( in[100] & 0x1f ) >> ( 32 - 29 ) ;
	out[17] = ( in[101] & 0x1f ) >> ( 32 - 29 ) ;
	out[18] = ( in[102] & 0x1f ) >> ( 32 - 29 ) ;
	out[19] = ( in[103] & 0x1f ) >> ( 32 - 29 ) ;

	out[16] |= ( in[104] & 0x1f ) << 2 ;
	out[17] |= ( in[105] & 0x1f ) << 2 ;
	out[18] |= ( in[106] & 0x1f ) << 2 ;
	out[19] |= ( in[107] & 0x1f ) << 2 ;

	out[16] |= ( in[108] & 0x1f ) << 7 ;
	out[17] |= ( in[109] & 0x1f ) << 7 ;
	out[18] |= ( in[110] & 0x1f ) << 7 ;
	out[19] |= ( in[111] & 0x1f ) << 7 ;

	out[16] |= ( in[112] & 0x1f ) << 12 ;
	out[17] |= ( in[113] & 0x1f ) << 12 ;
	out[18] |= ( in[114] & 0x1f ) << 12 ;
	out[19] |= ( in[115] & 0x1f ) << 12 ;

	out[16] |= ( in[116] & 0x1f ) << 17 ;
	out[17] |= ( in[117] & 0x1f ) << 17 ;
	out[18] |= ( in[118] & 0x1f ) << 17 ;
	out[19] |= ( in[119] & 0x1f ) << 17 ;

	out[16] |= ( in[120] & 0x1f ) << 22 ;
	out[17] |= ( in[121] & 0x1f ) << 22 ;
	out[18] |= ( in[122] & 0x1f ) << 22 ;
	out[19] |= ( in[123] & 0x1f ) << 22 ;

	out[16] |= in[124] << 27 ;
	out[17] |= in[125] << 27 ;
	out[18] |= in[126] << 27 ;
	out[19] |= in[127] << 27 ;
}


// 6-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c6(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x3f ) << 0 ;
	out[1] = ( in[1] & 0x3f ) << 0 ;
	out[2] = ( in[2] & 0x3f ) << 0 ;
	out[3] = ( in[3] & 0x3f ) << 0 ;

	out[0] |= ( in[4] & 0x3f ) << 6 ;
	out[1] |= ( in[5] & 0x3f ) << 6 ;
	out[2] |= ( in[6] & 0x3f ) << 6 ;
	out[3] |= ( in[7] & 0x3f ) << 6 ;

	out[0] |= ( in[8] & 0x3f ) << 12 ;
	out[1] |= ( in[9] & 0x3f ) << 12 ;
	out[2] |= ( in[10] & 0x3f ) << 12 ;
	out[3] |= ( in[11] & 0x3f ) << 12 ;

	out[0] |= ( in[12] & 0x3f ) << 18 ;
	out[1] |= ( in[13] & 0x3f ) << 18 ;
	out[2] |= ( in[14] & 0x3f ) << 18 ;
	out[3] |= ( in[15] & 0x3f ) << 18 ;

	out[0] |= ( in[16] & 0x3f ) << 24 ;
	out[1] |= ( in[17] & 0x3f ) << 24 ;
	out[2] |= ( in[18] & 0x3f ) << 24 ;
	out[3] |= ( in[19] & 0x3f ) << 24 ;

	out[0] |= in[20] << 30 ;
	out[1] |= in[21] << 30 ;
	out[2] |= in[22] << 30 ;
	out[3] |= in[23] << 30 ;

	out[4] = ( in[20] & 0x3f ) >> ( 32 - 30 ) ;
	out[5] = ( in[21] & 0x3f ) >> ( 32 - 30 ) ;
	out[6] = ( in[22] & 0x3f ) >> ( 32 - 30 ) ;
	out[7] = ( in[23] & 0x3f ) >> ( 32 - 30 ) ;

	out[4] |= ( in[24] & 0x3f ) << 4 ;
	out[5] |= ( in[25] & 0x3f ) << 4 ;
	out[6] |= ( in[26] & 0x3f ) << 4 ;
	out[7] |= ( in[27] & 0x3f ) << 4 ;

	out[4] |= ( in[28] & 0x3f ) << 10 ;
	out[5] |= ( in[29] & 0x3f ) << 10 ;
	out[6] |= ( in[30] & 0x3f ) << 10 ;
	out[7] |= ( in[31] & 0x3f ) << 10 ;

	out[4] |= ( in[32] & 0x3f ) << 16 ;
	out[5] |= ( in[33] & 0x3f ) << 16 ;
	out[6] |= ( in[34] & 0x3f ) << 16 ;
	out[7] |= ( in[35] & 0x3f ) << 16 ;

	out[4] |= ( in[36] & 0x3f ) << 22 ;
	out[5] |= ( in[37] & 0x3f ) << 22 ;
	out[6] |= ( in[38] & 0x3f ) << 22 ;
	out[7] |= ( in[39] & 0x3f ) << 22 ;

	out[4] |= in[40] << 28 ;
	out[5] |= in[41] << 28 ;
	out[6] |= in[42] << 28 ;
	out[7] |= in[43] << 28 ;

	out[8] = ( in[40] & 0x3f ) >> ( 32 - 28 ) ;
	out[9] = ( in[41] & 0x3f ) >> ( 32 - 28 ) ;
	out[10] = ( in[42] & 0x3f ) >> ( 32 - 28 ) ;
	out[11] = ( in[43] & 0x3f ) >> ( 32 - 28 ) ;

	out[8] |= ( in[44] & 0x3f ) << 2 ;
	out[9] |= ( in[45] & 0x3f ) << 2 ;
	out[10] |= ( in[46] & 0x3f ) << 2 ;
	out[11] |= ( in[47] & 0x3f ) << 2 ;

	out[8] |= ( in[48] & 0x3f ) << 8 ;
	out[9] |= ( in[49] & 0x3f ) << 8 ;
	out[10] |= ( in[50] & 0x3f ) << 8 ;
	out[11] |= ( in[51] & 0x3f ) << 8 ;

	out[8] |= ( in[52] & 0x3f ) << 14 ;
	out[9] |= ( in[53] & 0x3f ) << 14 ;
	out[10] |= ( in[54] & 0x3f ) << 14 ;
	out[11] |= ( in[55] & 0x3f ) << 14 ;

	out[8] |= ( in[56] & 0x3f ) << 20 ;
	out[9] |= ( in[57] & 0x3f ) << 20 ;
	out[10] |= ( in[58] & 0x3f ) << 20 ;
	out[11] |= ( in[59] & 0x3f ) << 20 ;

	out[8] |= in[60] << 26 ;
	out[9] |= in[61] << 26 ;
	out[10] |= in[62] << 26 ;
	out[11] |= in[63] << 26 ;

	out[12] = ( in[64] & 0x3f ) << 0 ;
	out[13] = ( in[65] & 0x3f ) << 0 ;
	out[14] = ( in[66] & 0x3f ) << 0 ;
	out[15] = ( in[67] & 0x3f ) << 0 ;

	out[12] |= ( in[68] & 0x3f ) << 6 ;
	out[13] |= ( in[69] & 0x3f ) << 6 ;
	out[14] |= ( in[70] & 0x3f ) << 6 ;
	out[15] |= ( in[71] & 0x3f ) << 6 ;

	out[12] |= ( in[72] & 0x3f ) << 12 ;
	out[13] |= ( in[73] & 0x3f ) << 12 ;
	out[14] |= ( in[74] & 0x3f ) << 12 ;
	out[15] |= ( in[75] & 0x3f ) << 12 ;

	out[12] |= ( in[76] & 0x3f ) << 18 ;
	out[13] |= ( in[77] & 0x3f ) << 18 ;
	out[14] |= ( in[78] & 0x3f ) << 18 ;
	out[15] |= ( in[79] & 0x3f ) << 18 ;

	out[12] |= ( in[80] & 0x3f ) << 24 ;
	out[13] |= ( in[81] & 0x3f ) << 24 ;
	out[14] |= ( in[82] & 0x3f ) << 24 ;
	out[15] |= ( in[83] & 0x3f ) << 24 ;

	out[12] |= in[84] << 30 ;
	out[13] |= in[85] << 30 ;
	out[14] |= in[86] << 30 ;
	out[15] |= in[87] << 30 ;

	out[16] = ( in[84] & 0x3f ) >> ( 32 - 30 ) ;
	out[17] = ( in[85] & 0x3f ) >> ( 32 - 30 ) ;
	out[18] = ( in[86] & 0x3f ) >> ( 32 - 30 ) ;
	out[19] = ( in[87] & 0x3f ) >> ( 32 - 30 ) ;

	out[16] |= ( in[88] & 0x3f ) << 4 ;
	out[17] |= ( in[89] & 0x3f ) << 4 ;
	out[18] |= ( in[90] & 0x3f ) << 4 ;
	out[19] |= ( in[91] & 0x3f ) << 4 ;

	out[16] |= ( in[92] & 0x3f ) << 10 ;
	out[17] |= ( in[93] & 0x3f ) << 10 ;
	out[18] |= ( in[94] & 0x3f ) << 10 ;
	out[19] |= ( in[95] & 0x3f ) << 10 ;

	out[16] |= ( in[96] & 0x3f ) << 16 ;
	out[17] |= ( in[97] & 0x3f ) << 16 ;
	out[18] |= ( in[98] & 0x3f ) << 16 ;
	out[19] |= ( in[99] & 0x3f ) << 16 ;

	out[16] |= ( in[100] & 0x3f ) << 22 ;
	out[17] |= ( in[101] & 0x3f ) << 22 ;
	out[18] |= ( in[102] & 0x3f ) << 22 ;
	out[19] |= ( in[103] & 0x3f ) << 22 ;

	out[16] |= in[104] << 28 ;
	out[17] |= in[105] << 28 ;
	out[18] |= in[106] << 28 ;
	out[19] |= in[107] << 28 ;

	out[20] = ( in[104] & 0x3f ) >> ( 32 - 28 ) ;
	out[21] = ( in[105] & 0x3f ) >> ( 32 - 28 ) ;
	out[22] = ( in[106] & 0x3f ) >> ( 32 - 28 ) ;
	out[23] = ( in[107] & 0x3f ) >> ( 32 - 28 ) ;

	out[20] |= ( in[108] & 0x3f ) << 2 ;
	out[21] |= ( in[109] & 0x3f ) << 2 ;
	out[22] |= ( in[110] & 0x3f ) << 2 ;
	out[23] |= ( in[111] & 0x3f ) << 2 ;

	out[20] |= ( in[112] & 0x3f ) << 8 ;
	out[21] |= ( in[113] & 0x3f ) << 8 ;
	out[22] |= ( in[114] & 0x3f ) << 8 ;
	out[23] |= ( in[115] & 0x3f ) << 8 ;

	out[20] |= ( in[116] & 0x3f ) << 14 ;
	out[21] |= ( in[117] & 0x3f ) << 14 ;
	out[22] |= ( in[118] & 0x3f ) << 14 ;
	out[23] |= ( in[119] & 0x3f ) << 14 ;

	out[20] |= ( in[120] & 0x3f ) << 20 ;
	out[21] |= ( in[121] & 0x3f ) << 20 ;
	out[22] |= ( in[122] & 0x3f ) << 20 ;
	out[23] |= ( in[123] & 0x3f ) << 20 ;

	out[20] |= in[124] << 26 ;
	out[21] |= in[125] << 26 ;
	out[22] |= in[126] << 26 ;
	out[23] |= in[127] << 26 ;
}


// 7-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c7(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x7f ) << 0 ;
	out[1] = ( in[1] & 0x7f ) << 0 ;
	out[2] = ( in[2] & 0x7f ) << 0 ;
	out[3] = ( in[3] & 0x7f ) << 0 ;

	out[0] |= ( in[4] & 0x7f ) << 7 ;
	out[1] |= ( in[5] & 0x7f ) << 7 ;
	out[2] |= ( in[6] & 0x7f ) << 7 ;
	out[3] |= ( in[7] & 0x7f ) << 7 ;

	out[0] |= ( in[8] & 0x7f ) << 14 ;
	out[1] |= ( in[9] & 0x7f ) << 14 ;
	out[2] |= ( in[10] & 0x7f ) << 14 ;
	out[3] |= ( in[11] & 0x7f ) << 14 ;

	out[0] |= ( in[12] & 0x7f ) << 21 ;
	out[1] |= ( in[13] & 0x7f ) << 21 ;
	out[2] |= ( in[14] & 0x7f ) << 21 ;
	out[3] |= ( in[15] & 0x7f ) << 21 ;

	out[0] |= in[16] << 28 ;
	out[1] |= in[17] << 28 ;
	out[2] |= in[18] << 28 ;
	out[3] |= in[19] << 28 ;

	out[4] = ( in[16] & 0x7f ) >> ( 32 - 28 ) ;
	out[5] = ( in[17] & 0x7f ) >> ( 32 - 28 ) ;
	out[6] = ( in[18] & 0x7f ) >> ( 32 - 28 ) ;
	out[7] = ( in[19] & 0x7f ) >> ( 32 - 28 ) ;

	out[4] |= ( in[20] & 0x7f ) << 3 ;
	out[5] |= ( in[21] & 0x7f ) << 3 ;
	out[6] |= ( in[22] & 0x7f ) << 3 ;
	out[7] |= ( in[23] & 0x7f ) << 3 ;

	out[4] |= ( in[24] & 0x7f ) << 10 ;
	out[5] |= ( in[25] & 0x7f ) << 10 ;
	out[6] |= ( in[26] & 0x7f ) << 10 ;
	out[7] |= ( in[27] & 0x7f ) << 10 ;

	out[4] |= ( in[28] & 0x7f ) << 17 ;
	out[5] |= ( in[29] & 0x7f ) << 17 ;
	out[6] |= ( in[30] & 0x7f ) << 17 ;
	out[7] |= ( in[31] & 0x7f ) << 17 ;

	out[4] |= ( in[32] & 0x7f ) << 24 ;
	out[5] |= ( in[33] & 0x7f ) << 24 ;
	out[6] |= ( in[34] & 0x7f ) << 24 ;
	out[7] |= ( in[35] & 0x7f ) << 24 ;

	out[4] |= in[36] << 31 ;
	out[5] |= in[37] << 31 ;
	out[6] |= in[38] << 31 ;
	out[7] |= in[39] << 31 ;

	out[8] = ( in[36] & 0x7f ) >> ( 32 - 31 ) ;
	out[9] = ( in[37] & 0x7f ) >> ( 32 - 31 ) ;
	out[10] = ( in[38] & 0x7f ) >> ( 32 - 31 ) ;
	out[11] = ( in[39] & 0x7f ) >> ( 32 - 31 ) ;

	out[8] |= ( in[40] & 0x7f ) << 6 ;
	out[9] |= ( in[41] & 0x7f ) << 6 ;
	out[10] |= ( in[42] & 0x7f ) << 6 ;
	out[11] |= ( in[43] & 0x7f ) << 6 ;

	out[8] |= ( in[44] & 0x7f ) << 13 ;
	out[9] |= ( in[45] & 0x7f ) << 13 ;
	out[10] |= ( in[46] & 0x7f ) << 13 ;
	out[11] |= ( in[47] & 0x7f ) << 13 ;

	out[8] |= ( in[48] & 0x7f ) << 20 ;
	out[9] |= ( in[49] & 0x7f ) << 20 ;
	out[10] |= ( in[50] & 0x7f ) << 20 ;
	out[11] |= ( in[51] & 0x7f ) << 20 ;

	out[8] |= in[52] << 27 ;
	out[9] |= in[53] << 27 ;
	out[10] |= in[54] << 27 ;
	out[11] |= in[55] << 27 ;

	out[12] = ( in[52] & 0x7f ) >> ( 32 - 27 ) ;
	out[13] = ( in[53] & 0x7f ) >> ( 32 - 27 ) ;
	out[14] = ( in[54] & 0x7f ) >> ( 32 - 27 ) ;
	out[15] = ( in[55] & 0x7f ) >> ( 32 - 27 ) ;

	out[12] |= ( in[56] & 0x7f ) << 2 ;
	out[13] |= ( in[57] & 0x7f ) << 2 ;
	out[14] |= ( in[58] & 0x7f ) << 2 ;
	out[15] |= ( in[59] & 0x7f ) << 2 ;

	out[12] |= ( in[60] & 0x7f ) << 9 ;
	out[13] |= ( in[61] & 0x7f ) << 9 ;
	out[14] |= ( in[62] & 0x7f ) << 9 ;
	out[15] |= ( in[63] & 0x7f ) << 9 ;

	out[12] |= ( in[64] & 0x7f ) << 16 ;
	out[13] |= ( in[65] & 0x7f ) << 16 ;
	out[14] |= ( in[66] & 0x7f ) << 16 ;
	out[15] |= ( in[67] & 0x7f ) << 16 ;

	out[12] |= ( in[68] & 0x7f ) << 23 ;
	out[13] |= ( in[69] & 0x7f ) << 23 ;
	out[14] |= ( in[70] & 0x7f ) << 23 ;
	out[15] |= ( in[71] & 0x7f ) << 23 ;

	out[12] |= in[72] << 30 ;
	out[13] |= in[73] << 30 ;
	out[14] |= in[74] << 30 ;
	out[15] |= in[75] << 30 ;

	out[16] = ( in[72] & 0x7f ) >> ( 32 - 30 ) ;
	out[17] = ( in[73] & 0x7f ) >> ( 32 - 30 ) ;
	out[18] = ( in[74] & 0x7f ) >> ( 32 - 30 ) ;
	out[19] = ( in[75] & 0x7f ) >> ( 32 - 30 ) ;

	out[16] |= ( in[76] & 0x7f ) << 5 ;
	out[17] |= ( in[77] & 0x7f ) << 5 ;
	out[18] |= ( in[78] & 0x7f ) << 5 ;
	out[19] |= ( in[79] & 0x7f ) << 5 ;

	out[16] |= ( in[80] & 0x7f ) << 12 ;
	out[17] |= ( in[81] & 0x7f ) << 12 ;
	out[18] |= ( in[82] & 0x7f ) << 12 ;
	out[19] |= ( in[83] & 0x7f ) << 12 ;

	out[16] |= ( in[84] & 0x7f ) << 19 ;
	out[17] |= ( in[85] & 0x7f ) << 19 ;
	out[18] |= ( in[86] & 0x7f ) << 19 ;
	out[19] |= ( in[87] & 0x7f ) << 19 ;

	out[16] |= in[88] << 26 ;
	out[17] |= in[89] << 26 ;
	out[18] |= in[90] << 26 ;
	out[19] |= in[91] << 26 ;

	out[20] = ( in[88] & 0x7f ) >> ( 32 - 26 ) ;
	out[21] = ( in[89] & 0x7f ) >> ( 32 - 26 ) ;
	out[22] = ( in[90] & 0x7f ) >> ( 32 - 26 ) ;
	out[23] = ( in[91] & 0x7f ) >> ( 32 - 26 ) ;

	out[20] |= ( in[92] & 0x7f ) << 1 ;
	out[21] |= ( in[93] & 0x7f ) << 1 ;
	out[22] |= ( in[94] & 0x7f ) << 1 ;
	out[23] |= ( in[95] & 0x7f ) << 1 ;

	out[20] |= ( in[96] & 0x7f ) << 8 ;
	out[21] |= ( in[97] & 0x7f ) << 8 ;
	out[22] |= ( in[98] & 0x7f ) << 8 ;
	out[23] |= ( in[99] & 0x7f ) << 8 ;

	out[20] |= ( in[100] & 0x7f ) << 15 ;
	out[21] |= ( in[101] & 0x7f ) << 15 ;
	out[22] |= ( in[102] & 0x7f ) << 15 ;
	out[23] |= ( in[103] & 0x7f ) << 15 ;

	out[20] |= ( in[104] & 0x7f ) << 22 ;
	out[21] |= ( in[105] & 0x7f ) << 22 ;
	out[22] |= ( in[106] & 0x7f ) << 22 ;
	out[23] |= ( in[107] & 0x7f ) << 22 ;

	out[20] |= in[108] << 29 ;
	out[21] |= in[109] << 29 ;
	out[22] |= in[110] << 29 ;
	out[23] |= in[111] << 29 ;

	out[24] = ( in[108] & 0x7f ) >> ( 32 - 29 ) ;
	out[25] = ( in[109] & 0x7f ) >> ( 32 - 29 ) ;
	out[26] = ( in[110] & 0x7f ) >> ( 32 - 29 ) ;
	out[27] = ( in[111] & 0x7f ) >> ( 32 - 29 ) ;

	out[24] |= ( in[112] & 0x7f ) << 4 ;
	out[25] |= ( in[113] & 0x7f ) << 4 ;
	out[26] |= ( in[114] & 0x7f ) << 4 ;
	out[27] |= ( in[115] & 0x7f ) << 4 ;

	out[24] |= ( in[116] & 0x7f ) << 11 ;
	out[25] |= ( in[117] & 0x7f ) << 11 ;
	out[26] |= ( in[118] & 0x7f ) << 11 ;
	out[27] |= ( in[119] & 0x7f ) << 11 ;

	out[24] |= ( in[120] & 0x7f ) << 18 ;
	out[25] |= ( in[121] & 0x7f ) << 18 ;
	out[26] |= ( in[122] & 0x7f ) << 18 ;
	out[27] |= ( in[123] & 0x7f ) << 18 ;

	out[24] |= in[124] << 25 ;
	out[25] |= in[125] << 25 ;
	out[26] |= in[126] << 25 ;
	out[27] |= in[127] << 25 ;
}


// 8-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c8(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0xff ) << 0 ;
	out[1] = ( in[1] & 0xff ) << 0 ;
	out[2] = ( in[2] & 0xff ) << 0 ;
	out[3] = ( in[3] & 0xff ) << 0 ;

	out[0] |= ( in[4] & 0xff ) << 8 ;
	out[1] |= ( in[5] & 0xff ) << 8 ;
	out[2] |= ( in[6] & 0xff ) << 8 ;
	out[3] |= ( in[7] & 0xff ) << 8 ;

	out[0] |= ( in[8] & 0xff ) << 16 ;
	out[1] |= ( in[9] & 0xff ) << 16 ;
	out[2] |= ( in[10] & 0xff ) << 16 ;
	out[3] |= ( in[11] & 0xff ) << 16 ;

	out[0] |= in[12] << 24 ;
	out[1] |= in[13] << 24 ;
	out[2] |= in[14] << 24 ;
	out[3] |= in[15] << 24 ;

	out[4] = ( in[16] & 0xff ) << 0 ;
	out[5] = ( in[17] & 0xff ) << 0 ;
	out[6] = ( in[18] & 0xff ) << 0 ;
	out[7] = ( in[19] & 0xff ) << 0 ;

	out[4] |= ( in[20] & 0xff ) << 8 ;
	out[5] |= ( in[21] & 0xff ) << 8 ;
	out[6] |= ( in[22] & 0xff ) << 8 ;
	out[7] |= ( in[23] & 0xff ) << 8 ;

	out[4] |= ( in[24] & 0xff ) << 16 ;
	out[5] |= ( in[25] & 0xff ) << 16 ;
	out[6] |= ( in[26] & 0xff ) << 16 ;
	out[7] |= ( in[27] & 0xff ) << 16 ;

	out[4] |= in[28] << 24 ;
	out[5] |= in[29] << 24 ;
	out[6] |= in[30] << 24 ;
	out[7] |= in[31] << 24 ;

	out[8] = ( in[32] & 0xff ) << 0 ;
	out[9] = ( in[33] & 0xff ) << 0 ;
	out[10] = ( in[34] & 0xff ) << 0 ;
	out[11] = ( in[35] & 0xff ) << 0 ;

	out[8] |= ( in[36] & 0xff ) << 8 ;
	out[9] |= ( in[37] & 0xff ) << 8 ;
	out[10] |= ( in[38] & 0xff ) << 8 ;
	out[11] |= ( in[39] & 0xff ) << 8 ;

	out[8] |= ( in[40] & 0xff ) << 16 ;
	out[9] |= ( in[41] & 0xff ) << 16 ;
	out[10] |= ( in[42] & 0xff ) << 16 ;
	out[11] |= ( in[43] & 0xff ) << 16 ;

	out[8] |= in[44] << 24 ;
	out[9] |= in[45] << 24 ;
	out[10] |= in[46] << 24 ;
	out[11] |= in[47] << 24 ;

	out[12] = ( in[48] & 0xff ) << 0 ;
	out[13] = ( in[49] & 0xff ) << 0 ;
	out[14] = ( in[50] & 0xff ) << 0 ;
	out[15] = ( in[51] & 0xff ) << 0 ;

	out[12] |= ( in[52] & 0xff ) << 8 ;
	out[13] |= ( in[53] & 0xff ) << 8 ;
	out[14] |= ( in[54] & 0xff ) << 8 ;
	out[15] |= ( in[55] & 0xff ) << 8 ;

	out[12] |= ( in[56] & 0xff ) << 16 ;
	out[13] |= ( in[57] & 0xff ) << 16 ;
	out[14] |= ( in[58] & 0xff ) << 16 ;
	out[15] |= ( in[59] & 0xff ) << 16 ;

	out[12] |= in[60] << 24 ;
	out[13] |= in[61] << 24 ;
	out[14] |= in[62] << 24 ;
	out[15] |= in[63] << 24 ;

	out[16] = ( in[64] & 0xff ) << 0 ;
	out[17] = ( in[65] & 0xff ) << 0 ;
	out[18] = ( in[66] & 0xff ) << 0 ;
	out[19] = ( in[67] & 0xff ) << 0 ;

	out[16] |= ( in[68] & 0xff ) << 8 ;
	out[17] |= ( in[69] & 0xff ) << 8 ;
	out[18] |= ( in[70] & 0xff ) << 8 ;
	out[19] |= ( in[71] & 0xff ) << 8 ;

	out[16] |= ( in[72] & 0xff ) << 16 ;
	out[17] |= ( in[73] & 0xff ) << 16 ;
	out[18] |= ( in[74] & 0xff ) << 16 ;
	out[19] |= ( in[75] & 0xff ) << 16 ;

	out[16] |= in[76] << 24 ;
	out[17] |= in[77] << 24 ;
	out[18] |= in[78] << 24 ;
	out[19] |= in[79] << 24 ;

	out[20] = ( in[80] & 0xff ) << 0 ;
	out[21] = ( in[81] & 0xff ) << 0 ;
	out[22] = ( in[82] & 0xff ) << 0 ;
	out[23] = ( in[83] & 0xff ) << 0 ;

	out[20] |= ( in[84] & 0xff ) << 8 ;
	out[21] |= ( in[85] & 0xff ) << 8 ;
	out[22] |= ( in[86] & 0xff ) << 8 ;
	out[23] |= ( in[87] & 0xff ) << 8 ;

	out[20] |= ( in[88] & 0xff ) << 16 ;
	out[21] |= ( in[89] & 0xff ) << 16 ;
	out[22] |= ( in[90] & 0xff ) << 16 ;
	out[23] |= ( in[91] & 0xff ) << 16 ;

	out[20] |= in[92] << 24 ;
	out[21] |= in[93] << 24 ;
	out[22] |= in[94] << 24 ;
	out[23] |= in[95] << 24 ;

	out[24] = ( in[96] & 0xff ) << 0 ;
	out[25] = ( in[97] & 0xff ) << 0 ;
	out[26] = ( in[98] & 0xff ) << 0 ;
	out[27] = ( in[99] & 0xff ) << 0 ;

	out[24] |= ( in[100] & 0xff ) << 8 ;
	out[25] |= ( in[101] & 0xff ) << 8 ;
	out[26] |= ( in[102] & 0xff ) << 8 ;
	out[27] |= ( in[103] & 0xff ) << 8 ;

	out[24] |= ( in[104] & 0xff ) << 16 ;
	out[25] |= ( in[105] & 0xff ) << 16 ;
	out[26] |= ( in[106] & 0xff ) << 16 ;
	out[27] |= ( in[107] & 0xff ) << 16 ;

	out[24] |= in[108] << 24 ;
	out[25] |= in[109] << 24 ;
	out[26] |= in[110] << 24 ;
	out[27] |= in[111] << 24 ;

	out[28] = ( in[112] & 0xff ) << 0 ;
	out[29] = ( in[113] & 0xff ) << 0 ;
	out[30] = ( in[114] & 0xff ) << 0 ;
	out[31] = ( in[115] & 0xff ) << 0 ;

	out[28] |= ( in[116] & 0xff ) << 8 ;
	out[29] |= ( in[117] & 0xff ) << 8 ;
	out[30] |= ( in[118] & 0xff ) << 8 ;
	out[31] |= ( in[119] & 0xff ) << 8 ;

	out[28] |= ( in[120] & 0xff ) << 16 ;
	out[29] |= ( in[121] & 0xff ) << 16 ;
	out[30] |= ( in[122] & 0xff ) << 16 ;
	out[31] |= ( in[123] & 0xff ) << 16 ;

	out[28] |= in[124] << 24 ;
	out[29] |= in[125] << 24 ;
	out[30] |= in[126] << 24 ;
	out[31] |= in[127] << 24 ;
}


// 9-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c9(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x01ff ) << 0 ;
	out[1] = ( in[1] & 0x01ff ) << 0 ;
	out[2] = ( in[2] & 0x01ff ) << 0 ;
	out[3] = ( in[3] & 0x01ff ) << 0 ;

	out[0] |= ( in[4] & 0x01ff ) << 9 ;
	out[1] |= ( in[5] & 0x01ff ) << 9 ;
	out[2] |= ( in[6] & 0x01ff ) << 9 ;
	out[3] |= ( in[7] & 0x01ff ) << 9 ;

	out[0] |= ( in[8] & 0x01ff ) << 18 ;
	out[1] |= ( in[9] & 0x01ff ) << 18 ;
	out[2] |= ( in[10] & 0x01ff ) << 18 ;
	out[3] |= ( in[11] & 0x01ff ) << 18 ;

	out[0] |= in[12] << 27 ;
	out[1] |= in[13] << 27 ;
	out[2] |= in[14] << 27 ;
	out[3] |= in[15] << 27 ;

	out[4] = ( in[12] & 0x01ff ) >> ( 32 - 27 ) ;
	out[5] = ( in[13] & 0x01ff ) >> ( 32 - 27 ) ;
	out[6] = ( in[14] & 0x01ff ) >> ( 32 - 27 ) ;
	out[7] = ( in[15] & 0x01ff ) >> ( 32 - 27 ) ;

	out[4] |= ( in[16] & 0x01ff ) << 4 ;
	out[5] |= ( in[17] & 0x01ff ) << 4 ;
	out[6] |= ( in[18] & 0x01ff ) << 4 ;
	out[7] |= ( in[19] & 0x01ff ) << 4 ;

	out[4] |= ( in[20] & 0x01ff ) << 13 ;
	out[5] |= ( in[21] & 0x01ff ) << 13 ;
	out[6] |= ( in[22] & 0x01ff ) << 13 ;
	out[7] |= ( in[23] & 0x01ff ) << 13 ;

	out[4] |= ( in[24] & 0x01ff ) << 22 ;
	out[5] |= ( in[25] & 0x01ff ) << 22 ;
	out[6] |= ( in[26] & 0x01ff ) << 22 ;
	out[7] |= ( in[27] & 0x01ff ) << 22 ;

	out[4] |= in[28] << 31 ;
	out[5] |= in[29] << 31 ;
	out[6] |= in[30] << 31 ;
	out[7] |= in[31] << 31 ;

	out[8] = ( in[28] & 0x01ff ) >> ( 32 - 31 ) ;
	out[9] = ( in[29] & 0x01ff ) >> ( 32 - 31 ) ;
	out[10] = ( in[30] & 0x01ff ) >> ( 32 - 31 ) ;
	out[11] = ( in[31] & 0x01ff ) >> ( 32 - 31 ) ;

	out[8] |= ( in[32] & 0x01ff ) << 8 ;
	out[9] |= ( in[33] & 0x01ff ) << 8 ;
	out[10] |= ( in[34] & 0x01ff ) << 8 ;
	out[11] |= ( in[35] & 0x01ff ) << 8 ;

	out[8] |= ( in[36] & 0x01ff ) << 17 ;
	out[9] |= ( in[37] & 0x01ff ) << 17 ;
	out[10] |= ( in[38] & 0x01ff ) << 17 ;
	out[11] |= ( in[39] & 0x01ff ) << 17 ;

	out[8] |= in[40] << 26 ;
	out[9] |= in[41] << 26 ;
	out[10] |= in[42] << 26 ;
	out[11] |= in[43] << 26 ;

	out[12] = ( in[40] & 0x01ff ) >> ( 32 - 26 ) ;
	out[13] = ( in[41] & 0x01ff ) >> ( 32 - 26 ) ;
	out[14] = ( in[42] & 0x01ff ) >> ( 32 - 26 ) ;
	out[15] = ( in[43] & 0x01ff ) >> ( 32 - 26 ) ;

	out[12] |= ( in[44] & 0x01ff ) << 3 ;
	out[13] |= ( in[45] & 0x01ff ) << 3 ;
	out[14] |= ( in[46] & 0x01ff ) << 3 ;
	out[15] |= ( in[47] & 0x01ff ) << 3 ;

	out[12] |= ( in[48] & 0x01ff ) << 12 ;
	out[13] |= ( in[49] & 0x01ff ) << 12 ;
	out[14] |= ( in[50] & 0x01ff ) << 12 ;
	out[15] |= ( in[51] & 0x01ff ) << 12 ;

	out[12] |= ( in[52] & 0x01ff ) << 21 ;
	out[13] |= ( in[53] & 0x01ff ) << 21 ;
	out[14] |= ( in[54] & 0x01ff ) << 21 ;
	out[15] |= ( in[55] & 0x01ff ) << 21 ;

	out[12] |= in[56] << 30 ;
	out[13] |= in[57] << 30 ;
	out[14] |= in[58] << 30 ;
	out[15] |= in[59] << 30 ;

	out[16] = ( in[56] & 0x01ff ) >> ( 32 - 30 ) ;
	out[17] = ( in[57] & 0x01ff ) >> ( 32 - 30 ) ;
	out[18] = ( in[58] & 0x01ff ) >> ( 32 - 30 ) ;
	out[19] = ( in[59] & 0x01ff ) >> ( 32 - 30 ) ;

	out[16] |= ( in[60] & 0x01ff ) << 7 ;
	out[17] |= ( in[61] & 0x01ff ) << 7 ;
	out[18] |= ( in[62] & 0x01ff ) << 7 ;
	out[19] |= ( in[63] & 0x01ff ) << 7 ;

	out[16] |= ( in[64] & 0x01ff ) << 16 ;
	out[17] |= ( in[65] & 0x01ff ) << 16 ;
	out[18] |= ( in[66] & 0x01ff ) << 16 ;
	out[19] |= ( in[67] & 0x01ff ) << 16 ;

	out[16] |= in[68] << 25 ;
	out[17] |= in[69] << 25 ;
	out[18] |= in[70] << 25 ;
	out[19] |= in[71] << 25 ;

	out[20] = ( in[68] & 0x01ff ) >> ( 32 - 25 ) ;
	out[21] = ( in[69] & 0x01ff ) >> ( 32 - 25 ) ;
	out[22] = ( in[70] & 0x01ff ) >> ( 32 - 25 ) ;
	out[23] = ( in[71] & 0x01ff ) >> ( 32 - 25 ) ;

	out[20] |= ( in[72] & 0x01ff ) << 2 ;
	out[21] |= ( in[73] & 0x01ff ) << 2 ;
	out[22] |= ( in[74] & 0x01ff ) << 2 ;
	out[23] |= ( in[75] & 0x01ff ) << 2 ;

	out[20] |= ( in[76] & 0x01ff ) << 11 ;
	out[21] |= ( in[77] & 0x01ff ) << 11 ;
	out[22] |= ( in[78] & 0x01ff ) << 11 ;
	out[23] |= ( in[79] & 0x01ff ) << 11 ;

	out[20] |= ( in[80] & 0x01ff ) << 20 ;
	out[21] |= ( in[81] & 0x01ff ) << 20 ;
	out[22] |= ( in[82] & 0x01ff ) << 20 ;
	out[23] |= ( in[83] & 0x01ff ) << 20 ;

	out[20] |= in[84] << 29 ;
	out[21] |= in[85] << 29 ;
	out[22] |= in[86] << 29 ;
	out[23] |= in[87] << 29 ;

	out[24] = ( in[84] & 0x01ff ) >> ( 32 - 29 ) ;
	out[25] = ( in[85] & 0x01ff ) >> ( 32 - 29 ) ;
	out[26] = ( in[86] & 0x01ff ) >> ( 32 - 29 ) ;
	out[27] = ( in[87] & 0x01ff ) >> ( 32 - 29 ) ;

	out[24] |= ( in[88] & 0x01ff ) << 6 ;
	out[25] |= ( in[89] & 0x01ff ) << 6 ;
	out[26] |= ( in[90] & 0x01ff ) << 6 ;
	out[27] |= ( in[91] & 0x01ff ) << 6 ;

	out[24] |= ( in[92] & 0x01ff ) << 15 ;
	out[25] |= ( in[93] & 0x01ff ) << 15 ;
	out[26] |= ( in[94] & 0x01ff ) << 15 ;
	out[27] |= ( in[95] & 0x01ff ) << 15 ;

	out[24] |= in[96] << 24 ;
	out[25] |= in[97] << 24 ;
	out[26] |= in[98] << 24 ;
	out[27] |= in[99] << 24 ;

	out[28] = ( in[96] & 0x01ff ) >> ( 32 - 24 ) ;
	out[29] = ( in[97] & 0x01ff ) >> ( 32 - 24 ) ;
	out[30] = ( in[98] & 0x01ff ) >> ( 32 - 24 ) ;
	out[31] = ( in[99] & 0x01ff ) >> ( 32 - 24 ) ;

	out[28] |= ( in[100] & 0x01ff ) << 1 ;
	out[29] |= ( in[101] & 0x01ff ) << 1 ;
	out[30] |= ( in[102] & 0x01ff ) << 1 ;
	out[31] |= ( in[103] & 0x01ff ) << 1 ;

	out[28] |= ( in[104] & 0x01ff ) << 10 ;
	out[29] |= ( in[105] & 0x01ff ) << 10 ;
	out[30] |= ( in[106] & 0x01ff ) << 10 ;
	out[31] |= ( in[107] & 0x01ff ) << 10 ;

	out[28] |= ( in[108] & 0x01ff ) << 19 ;
	out[29] |= ( in[109] & 0x01ff ) << 19 ;
	out[30] |= ( in[110] & 0x01ff ) << 19 ;
	out[31] |= ( in[111] & 0x01ff ) << 19 ;

	out[28] |= in[112] << 28 ;
	out[29] |= in[113] << 28 ;
	out[30] |= in[114] << 28 ;
	out[31] |= in[115] << 28 ;

	out[32] = ( in[112] & 0x01ff ) >> ( 32 - 28 ) ;
	out[33] = ( in[113] & 0x01ff ) >> ( 32 - 28 ) ;
	out[34] = ( in[114] & 0x01ff ) >> ( 32 - 28 ) ;
	out[35] = ( in[115] & 0x01ff ) >> ( 32 - 28 ) ;

	out[32] |= ( in[116] & 0x01ff ) << 5 ;
	out[33] |= ( in[117] & 0x01ff ) << 5 ;
	out[34] |= ( in[118] & 0x01ff ) << 5 ;
	out[35] |= ( in[119] & 0x01ff ) << 5 ;

	out[32] |= ( in[120] & 0x01ff ) << 14 ;
	out[33] |= ( in[121] & 0x01ff ) << 14 ;
	out[34] |= ( in[122] & 0x01ff ) << 14 ;
	out[35] |= ( in[123] & 0x01ff ) << 14 ;

	out[32] |= in[124] << 23 ;
	out[33] |= in[125] << 23 ;
	out[34] |= in[126] << 23 ;
	out[35] |= in[127] << 23 ;
}


// 10-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c10(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x03ff ) << 0 ;
	out[1] = ( in[1] & 0x03ff ) << 0 ;
	out[2] = ( in[2] & 0x03ff ) << 0 ;
	out[3] = ( in[3] & 0x03ff ) << 0 ;

	out[0] |= ( in[4] & 0x03ff ) << 10 ;
	out[1] |= ( in[5] & 0x03ff ) << 10 ;
	out[2] |= ( in[6] & 0x03ff ) << 10 ;
	out[3] |= ( in[7] & 0x03ff ) << 10 ;

	out[0] |= ( in[8] & 0x03ff ) << 20 ;
	out[1] |= ( in[9] & 0x03ff ) << 20 ;
	out[2] |= ( in[10] & 0x03ff ) << 20 ;
	out[3] |= ( in[11] & 0x03ff ) << 20 ;

	out[0] |= in[12] << 30 ;
	out[1] |= in[13] << 30 ;
	out[2] |= in[14] << 30 ;
	out[3] |= in[15] << 30 ;

	out[4] = ( in[12] & 0x03ff ) >> ( 32 - 30 ) ;
	out[5] = ( in[13] & 0x03ff ) >> ( 32 - 30 ) ;
	out[6] = ( in[14] & 0x03ff ) >> ( 32 - 30 ) ;
	out[7] = ( in[15] & 0x03ff ) >> ( 32 - 30 ) ;

	out[4] |= ( in[16] & 0x03ff ) << 8 ;
	out[5] |= ( in[17] & 0x03ff ) << 8 ;
	out[6] |= ( in[18] & 0x03ff ) << 8 ;
	out[7] |= ( in[19] & 0x03ff ) << 8 ;

	out[4] |= ( in[20] & 0x03ff ) << 18 ;
	out[5] |= ( in[21] & 0x03ff ) << 18 ;
	out[6] |= ( in[22] & 0x03ff ) << 18 ;
	out[7] |= ( in[23] & 0x03ff ) << 18 ;

	out[4] |= in[24] << 28 ;
	out[5] |= in[25] << 28 ;
	out[6] |= in[26] << 28 ;
	out[7] |= in[27] << 28 ;

	out[8] = ( in[24] & 0x03ff ) >> ( 32 - 28 ) ;
	out[9] = ( in[25] & 0x03ff ) >> ( 32 - 28 ) ;
	out[10] = ( in[26] & 0x03ff ) >> ( 32 - 28 ) ;
	out[11] = ( in[27] & 0x03ff ) >> ( 32 - 28 ) ;

	out[8] |= ( in[28] & 0x03ff ) << 6 ;
	out[9] |= ( in[29] & 0x03ff ) << 6 ;
	out[10] |= ( in[30] & 0x03ff ) << 6 ;
	out[11] |= ( in[31] & 0x03ff ) << 6 ;

	out[8] |= ( in[32] & 0x03ff ) << 16 ;
	out[9] |= ( in[33] & 0x03ff ) << 16 ;
	out[10] |= ( in[34] & 0x03ff ) << 16 ;
	out[11] |= ( in[35] & 0x03ff ) << 16 ;

	out[8] |= in[36] << 26 ;
	out[9] |= in[37] << 26 ;
	out[10] |= in[38] << 26 ;
	out[11] |= in[39] << 26 ;

	out[12] = ( in[36] & 0x03ff ) >> ( 32 - 26 ) ;
	out[13] = ( in[37] & 0x03ff ) >> ( 32 - 26 ) ;
	out[14] = ( in[38] & 0x03ff ) >> ( 32 - 26 ) ;
	out[15] = ( in[39] & 0x03ff ) >> ( 32 - 26 ) ;

	out[12] |= ( in[40] & 0x03ff ) << 4 ;
	out[13] |= ( in[41] & 0x03ff ) << 4 ;
	out[14] |= ( in[42] & 0x03ff ) << 4 ;
	out[15] |= ( in[43] & 0x03ff ) << 4 ;

	out[12] |= ( in[44] & 0x03ff ) << 14 ;
	out[13] |= ( in[45] & 0x03ff ) << 14 ;
	out[14] |= ( in[46] & 0x03ff ) << 14 ;
	out[15] |= ( in[47] & 0x03ff ) << 14 ;

	out[12] |= in[48] << 24 ;
	out[13] |= in[49] << 24 ;
	out[14] |= in[50] << 24 ;
	out[15] |= in[51] << 24 ;

	out[16] = ( in[48] & 0x03ff ) >> ( 32 - 24 ) ;
	out[17] = ( in[49] & 0x03ff ) >> ( 32 - 24 ) ;
	out[18] = ( in[50] & 0x03ff ) >> ( 32 - 24 ) ;
	out[19] = ( in[51] & 0x03ff ) >> ( 32 - 24 ) ;

	out[16] |= ( in[52] & 0x03ff ) << 2 ;
	out[17] |= ( in[53] & 0x03ff ) << 2 ;
	out[18] |= ( in[54] & 0x03ff ) << 2 ;
	out[19] |= ( in[55] & 0x03ff ) << 2 ;

	out[16] |= ( in[56] & 0x03ff ) << 12 ;
	out[17] |= ( in[57] & 0x03ff ) << 12 ;
	out[18] |= ( in[58] & 0x03ff ) << 12 ;
	out[19] |= ( in[59] & 0x03ff ) << 12 ;

	out[16] |= in[60] << 22 ;
	out[17] |= in[61] << 22 ;
	out[18] |= in[62] << 22 ;
	out[19] |= in[63] << 22 ;

	out[20] = ( in[64] & 0x03ff ) << 0 ;
	out[21] = ( in[65] & 0x03ff ) << 0 ;
	out[22] = ( in[66] & 0x03ff ) << 0 ;
	out[23] = ( in[67] & 0x03ff ) << 0 ;

	out[20] |= ( in[68] & 0x03ff ) << 10 ;
	out[21] |= ( in[69] & 0x03ff ) << 10 ;
	out[22] |= ( in[70] & 0x03ff ) << 10 ;
	out[23] |= ( in[71] & 0x03ff ) << 10 ;

	out[20] |= ( in[72] & 0x03ff ) << 20 ;
	out[21] |= ( in[73] & 0x03ff ) << 20 ;
	out[22] |= ( in[74] & 0x03ff ) << 20 ;
	out[23] |= ( in[75] & 0x03ff ) << 20 ;

	out[20] |= in[76] << 30 ;
	out[21] |= in[77] << 30 ;
	out[22] |= in[78] << 30 ;
	out[23] |= in[79] << 30 ;

	out[24] = ( in[76] & 0x03ff ) >> ( 32 - 30 ) ;
	out[25] = ( in[77] & 0x03ff ) >> ( 32 - 30 ) ;
	out[26] = ( in[78] & 0x03ff ) >> ( 32 - 30 ) ;
	out[27] = ( in[79] & 0x03ff ) >> ( 32 - 30 ) ;

	out[24] |= ( in[80] & 0x03ff ) << 8 ;
	out[25] |= ( in[81] & 0x03ff ) << 8 ;
	out[26] |= ( in[82] & 0x03ff ) << 8 ;
	out[27] |= ( in[83] & 0x03ff ) << 8 ;

	out[24] |= ( in[84] & 0x03ff ) << 18 ;
	out[25] |= ( in[85] & 0x03ff ) << 18 ;
	out[26] |= ( in[86] & 0x03ff ) << 18 ;
	out[27] |= ( in[87] & 0x03ff ) << 18 ;

	out[24] |= in[88] << 28 ;
	out[25] |= in[89] << 28 ;
	out[26] |= in[90] << 28 ;
	out[27] |= in[91] << 28 ;

	out[28] = ( in[88] & 0x03ff ) >> ( 32 - 28 ) ;
	out[29] = ( in[89] & 0x03ff ) >> ( 32 - 28 ) ;
	out[30] = ( in[90] & 0x03ff ) >> ( 32 - 28 ) ;
	out[31] = ( in[91] & 0x03ff ) >> ( 32 - 28 ) ;

	out[28] |= ( in[92] & 0x03ff ) << 6 ;
	out[29] |= ( in[93] & 0x03ff ) << 6 ;
	out[30] |= ( in[94] & 0x03ff ) << 6 ;
	out[31] |= ( in[95] & 0x03ff ) << 6 ;

	out[28] |= ( in[96] & 0x03ff ) << 16 ;
	out[29] |= ( in[97] & 0x03ff ) << 16 ;
	out[30] |= ( in[98] & 0x03ff ) << 16 ;
	out[31] |= ( in[99] & 0x03ff ) << 16 ;

	out[28] |= in[100] << 26 ;
	out[29] |= in[101] << 26 ;
	out[30] |= in[102] << 26 ;
	out[31] |= in[103] << 26 ;

	out[32] = ( in[100] & 0x03ff ) >> ( 32 - 26 ) ;
	out[33] = ( in[101] & 0x03ff ) >> ( 32 - 26 ) ;
	out[34] = ( in[102] & 0x03ff ) >> ( 32 - 26 ) ;
	out[35] = ( in[103] & 0x03ff ) >> ( 32 - 26 ) ;

	out[32] |= ( in[104] & 0x03ff ) << 4 ;
	out[33] |= ( in[105] & 0x03ff ) << 4 ;
	out[34] |= ( in[106] & 0x03ff ) << 4 ;
	out[35] |= ( in[107] & 0x03ff ) << 4 ;

	out[32] |= ( in[108] & 0x03ff ) << 14 ;
	out[33] |= ( in[109] & 0x03ff ) << 14 ;
	out[34] |= ( in[110] & 0x03ff ) << 14 ;
	out[35] |= ( in[111] & 0x03ff ) << 14 ;

	out[32] |= in[112] << 24 ;
	out[33] |= in[113] << 24 ;
	out[34] |= in[114] << 24 ;
	out[35] |= in[115] << 24 ;

	out[36] = ( in[112] & 0x03ff ) >> ( 32 - 24 ) ;
	out[37] = ( in[113] & 0x03ff ) >> ( 32 - 24 ) ;
	out[38] = ( in[114] & 0x03ff ) >> ( 32 - 24 ) ;
	out[39] = ( in[115] & 0x03ff ) >> ( 32 - 24 ) ;

	out[36] |= ( in[116] & 0x03ff ) << 2 ;
	out[37] |= ( in[117] & 0x03ff ) << 2 ;
	out[38] |= ( in[118] & 0x03ff ) << 2 ;
	out[39] |= ( in[119] & 0x03ff ) << 2 ;

	out[36] |= ( in[120] & 0x03ff ) << 12 ;
	out[37] |= ( in[121] & 0x03ff ) << 12 ;
	out[38] |= ( in[122] & 0x03ff ) << 12 ;
	out[39] |= ( in[123] & 0x03ff ) << 12 ;

	out[36] |= in[124] << 22 ;
	out[37] |= in[125] << 22 ;
	out[38] |= in[126] << 22 ;
	out[39] |= in[127] << 22 ;
}


// 11-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c11(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x07ff ) << 0 ;
	out[1] = ( in[1] & 0x07ff ) << 0 ;
	out[2] = ( in[2] & 0x07ff ) << 0 ;
	out[3] = ( in[3] & 0x07ff ) << 0 ;

	out[0] |= ( in[4] & 0x07ff ) << 11 ;
	out[1] |= ( in[5] & 0x07ff ) << 11 ;
	out[2] |= ( in[6] & 0x07ff ) << 11 ;
	out[3] |= ( in[7] & 0x07ff ) << 11 ;

	out[0] |= in[8] << 22 ;
	out[1] |= in[9] << 22 ;
	out[2] |= in[10] << 22 ;
	out[3] |= in[11] << 22 ;

	out[4] = ( in[8] & 0x07ff ) >> ( 32 - 22 ) ;
	out[5] = ( in[9] & 0x07ff ) >> ( 32 - 22 ) ;
	out[6] = ( in[10] & 0x07ff ) >> ( 32 - 22 ) ;
	out[7] = ( in[11] & 0x07ff ) >> ( 32 - 22 ) ;

	out[4] |= ( in[12] & 0x07ff ) << 1 ;
	out[5] |= ( in[13] & 0x07ff ) << 1 ;
	out[6] |= ( in[14] & 0x07ff ) << 1 ;
	out[7] |= ( in[15] & 0x07ff ) << 1 ;

	out[4] |= ( in[16] & 0x07ff ) << 12 ;
	out[5] |= ( in[17] & 0x07ff ) << 12 ;
	out[6] |= ( in[18] & 0x07ff ) << 12 ;
	out[7] |= ( in[19] & 0x07ff ) << 12 ;

	out[4] |= in[20] << 23 ;
	out[5] |= in[21] << 23 ;
	out[6] |= in[22] << 23 ;
	out[7] |= in[23] << 23 ;

	out[8] = ( in[20] & 0x07ff ) >> ( 32 - 23 ) ;
	out[9] = ( in[21] & 0x07ff ) >> ( 32 - 23 ) ;
	out[10] = ( in[22] & 0x07ff ) >> ( 32 - 23 ) ;
	out[11] = ( in[23] & 0x07ff ) >> ( 32 - 23 ) ;

	out[8] |= ( in[24] & 0x07ff ) << 2 ;
	out[9] |= ( in[25] & 0x07ff ) << 2 ;
	out[10] |= ( in[26] & 0x07ff ) << 2 ;
	out[11] |= ( in[27] & 0x07ff ) << 2 ;

	out[8] |= ( in[28] & 0x07ff ) << 13 ;
	out[9] |= ( in[29] & 0x07ff ) << 13 ;
	out[10] |= ( in[30] & 0x07ff ) << 13 ;
	out[11] |= ( in[31] & 0x07ff ) << 13 ;

	out[8] |= in[32] << 24 ;
	out[9] |= in[33] << 24 ;
	out[10] |= in[34] << 24 ;
	out[11] |= in[35] << 24 ;

	out[12] = ( in[32] & 0x07ff ) >> ( 32 - 24 ) ;
	out[13] = ( in[33] & 0x07ff ) >> ( 32 - 24 ) ;
	out[14] = ( in[34] & 0x07ff ) >> ( 32 - 24 ) ;
	out[15] = ( in[35] & 0x07ff ) >> ( 32 - 24 ) ;

	out[12] |= ( in[36] & 0x07ff ) << 3 ;
	out[13] |= ( in[37] & 0x07ff ) << 3 ;
	out[14] |= ( in[38] & 0x07ff ) << 3 ;
	out[15] |= ( in[39] & 0x07ff ) << 3 ;

	out[12] |= ( in[40] & 0x07ff ) << 14 ;
	out[13] |= ( in[41] & 0x07ff ) << 14 ;
	out[14] |= ( in[42] & 0x07ff ) << 14 ;
	out[15] |= ( in[43] & 0x07ff ) << 14 ;

	out[12] |= in[44] << 25 ;
	out[13] |= in[45] << 25 ;
	out[14] |= in[46] << 25 ;
	out[15] |= in[47] << 25 ;

	out[16] = ( in[44] & 0x07ff ) >> ( 32 - 25 ) ;
	out[17] = ( in[45] & 0x07ff ) >> ( 32 - 25 ) ;
	out[18] = ( in[46] & 0x07ff ) >> ( 32 - 25 ) ;
	out[19] = ( in[47] & 0x07ff ) >> ( 32 - 25 ) ;

	out[16] |= ( in[48] & 0x07ff ) << 4 ;
	out[17] |= ( in[49] & 0x07ff ) << 4 ;
	out[18] |= ( in[50] & 0x07ff ) << 4 ;
	out[19] |= ( in[51] & 0x07ff ) << 4 ;

	out[16] |= ( in[52] & 0x07ff ) << 15 ;
	out[17] |= ( in[53] & 0x07ff ) << 15 ;
	out[18] |= ( in[54] & 0x07ff ) << 15 ;
	out[19] |= ( in[55] & 0x07ff ) << 15 ;

	out[16] |= in[56] << 26 ;
	out[17] |= in[57] << 26 ;
	out[18] |= in[58] << 26 ;
	out[19] |= in[59] << 26 ;

	out[20] = ( in[56] & 0x07ff ) >> ( 32 - 26 ) ;
	out[21] = ( in[57] & 0x07ff ) >> ( 32 - 26 ) ;
	out[22] = ( in[58] & 0x07ff ) >> ( 32 - 26 ) ;
	out[23] = ( in[59] & 0x07ff ) >> ( 32 - 26 ) ;

	out[20] |= ( in[60] & 0x07ff ) << 5 ;
	out[21] |= ( in[61] & 0x07ff ) << 5 ;
	out[22] |= ( in[62] & 0x07ff ) << 5 ;
	out[23] |= ( in[63] & 0x07ff ) << 5 ;

	out[20] |= ( in[64] & 0x07ff ) << 16 ;
	out[21] |= ( in[65] & 0x07ff ) << 16 ;
	out[22] |= ( in[66] & 0x07ff ) << 16 ;
	out[23] |= ( in[67] & 0x07ff ) << 16 ;

	out[20] |= in[68] << 27 ;
	out[21] |= in[69] << 27 ;
	out[22] |= in[70] << 27 ;
	out[23] |= in[71] << 27 ;

	out[24] = ( in[68] & 0x07ff ) >> ( 32 - 27 ) ;
	out[25] = ( in[69] & 0x07ff ) >> ( 32 - 27 ) ;
	out[26] = ( in[70] & 0x07ff ) >> ( 32 - 27 ) ;
	out[27] = ( in[71] & 0x07ff ) >> ( 32 - 27 ) ;

	out[24] |= ( in[72] & 0x07ff ) << 6 ;
	out[25] |= ( in[73] & 0x07ff ) << 6 ;
	out[26] |= ( in[74] & 0x07ff ) << 6 ;
	out[27] |= ( in[75] & 0x07ff ) << 6 ;

	out[24] |= ( in[76] & 0x07ff ) << 17 ;
	out[25] |= ( in[77] & 0x07ff ) << 17 ;
	out[26] |= ( in[78] & 0x07ff ) << 17 ;
	out[27] |= ( in[79] & 0x07ff ) << 17 ;

	out[24] |= in[80] << 28 ;
	out[25] |= in[81] << 28 ;
	out[26] |= in[82] << 28 ;
	out[27] |= in[83] << 28 ;

	out[28] = ( in[80] & 0x07ff ) >> ( 32 - 28 ) ;
	out[29] = ( in[81] & 0x07ff ) >> ( 32 - 28 ) ;
	out[30] = ( in[82] & 0x07ff ) >> ( 32 - 28 ) ;
	out[31] = ( in[83] & 0x07ff ) >> ( 32 - 28 ) ;

	out[28] |= ( in[84] & 0x07ff ) << 7 ;
	out[29] |= ( in[85] & 0x07ff ) << 7 ;
	out[30] |= ( in[86] & 0x07ff ) << 7 ;
	out[31] |= ( in[87] & 0x07ff ) << 7 ;

	out[28] |= ( in[88] & 0x07ff ) << 18 ;
	out[29] |= ( in[89] & 0x07ff ) << 18 ;
	out[30] |= ( in[90] & 0x07ff ) << 18 ;
	out[31] |= ( in[91] & 0x07ff ) << 18 ;

	out[28] |= in[92] << 29 ;
	out[29] |= in[93] << 29 ;
	out[30] |= in[94] << 29 ;
	out[31] |= in[95] << 29 ;

	out[32] = ( in[92] & 0x07ff ) >> ( 32 - 29 ) ;
	out[33] = ( in[93] & 0x07ff ) >> ( 32 - 29 ) ;
	out[34] = ( in[94] & 0x07ff ) >> ( 32 - 29 ) ;
	out[35] = ( in[95] & 0x07ff ) >> ( 32 - 29 ) ;

	out[32] |= ( in[96] & 0x07ff ) << 8 ;
	out[33] |= ( in[97] & 0x07ff ) << 8 ;
	out[34] |= ( in[98] & 0x07ff ) << 8 ;
	out[35] |= ( in[99] & 0x07ff ) << 8 ;

	out[32] |= ( in[100] & 0x07ff ) << 19 ;
	out[33] |= ( in[101] & 0x07ff ) << 19 ;
	out[34] |= ( in[102] & 0x07ff ) << 19 ;
	out[35] |= ( in[103] & 0x07ff ) << 19 ;

	out[32] |= in[104] << 30 ;
	out[33] |= in[105] << 30 ;
	out[34] |= in[106] << 30 ;
	out[35] |= in[107] << 30 ;

	out[36] = ( in[104] & 0x07ff ) >> ( 32 - 30 ) ;
	out[37] = ( in[105] & 0x07ff ) >> ( 32 - 30 ) ;
	out[38] = ( in[106] & 0x07ff ) >> ( 32 - 30 ) ;
	out[39] = ( in[107] & 0x07ff ) >> ( 32 - 30 ) ;

	out[36] |= ( in[108] & 0x07ff ) << 9 ;
	out[37] |= ( in[109] & 0x07ff ) << 9 ;
	out[38] |= ( in[110] & 0x07ff ) << 9 ;
	out[39] |= ( in[111] & 0x07ff ) << 9 ;

	out[36] |= ( in[112] & 0x07ff ) << 20 ;
	out[37] |= ( in[113] & 0x07ff ) << 20 ;
	out[38] |= ( in[114] & 0x07ff ) << 20 ;
	out[39] |= ( in[115] & 0x07ff ) << 20 ;

	out[36] |= in[116] << 31 ;
	out[37] |= in[117] << 31 ;
	out[38] |= in[118] << 31 ;
	out[39] |= in[119] << 31 ;

	out[40] = ( in[116] & 0x07ff ) >> ( 32 - 31 ) ;
	out[41] = ( in[117] & 0x07ff ) >> ( 32 - 31 ) ;
	out[42] = ( in[118] & 0x07ff ) >> ( 32 - 31 ) ;
	out[43] = ( in[119] & 0x07ff ) >> ( 32 - 31 ) ;

	out[40] |= ( in[120] & 0x07ff ) << 10 ;
	out[41] |= ( in[121] & 0x07ff ) << 10 ;
	out[42] |= ( in[122] & 0x07ff ) << 10 ;
	out[43] |= ( in[123] & 0x07ff ) << 10 ;

	out[40] |= in[124] << 21 ;
	out[41] |= in[125] << 21 ;
	out[42] |= in[126] << 21 ;
	out[43] |= in[127] << 21 ;
}


// 12-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c12(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x0fff ) << 0 ;
	out[1] = ( in[1] & 0x0fff ) << 0 ;
	out[2] = ( in[2] & 0x0fff ) << 0 ;
	out[3] = ( in[3] & 0x0fff ) << 0 ;

	out[0] |= ( in[4] & 0x0fff ) << 12 ;
	out[1] |= ( in[5] & 0x0fff ) << 12 ;
	out[2] |= ( in[6] & 0x0fff ) << 12 ;
	out[3] |= ( in[7] & 0x0fff ) << 12 ;

	out[0] |= in[8] << 24 ;
	out[1] |= in[9] << 24 ;
	out[2] |= in[10] << 24 ;
	out[3] |= in[11] << 24 ;

	out[4] = ( in[8] & 0x0fff ) >> ( 32 - 24 ) ;
	out[5] = ( in[9] & 0x0fff ) >> ( 32 - 24 ) ;
	out[6] = ( in[10] & 0x0fff ) >> ( 32 - 24 ) ;
	out[7] = ( in[11] & 0x0fff ) >> ( 32 - 24 ) ;

	out[4] |= ( in[12] & 0x0fff ) << 4 ;
	out[5] |= ( in[13] & 0x0fff ) << 4 ;
	out[6] |= ( in[14] & 0x0fff ) << 4 ;
	out[7] |= ( in[15] & 0x0fff ) << 4 ;

	out[4] |= ( in[16] & 0x0fff ) << 16 ;
	out[5] |= ( in[17] & 0x0fff ) << 16 ;
	out[6] |= ( in[18] & 0x0fff ) << 16 ;
	out[7] |= ( in[19] & 0x0fff ) << 16 ;

	out[4] |= in[20] << 28 ;
	out[5] |= in[21] << 28 ;
	out[6] |= in[22] << 28 ;
	out[7] |= in[23] << 28 ;

	out[8] = ( in[20] & 0x0fff ) >> ( 32 - 28 ) ;
	out[9] = ( in[21] & 0x0fff ) >> ( 32 - 28 ) ;
	out[10] = ( in[22] & 0x0fff ) >> ( 32 - 28 ) ;
	out[11] = ( in[23] & 0x0fff ) >> ( 32 - 28 ) ;

	out[8] |= ( in[24] & 0x0fff ) << 8 ;
	out[9] |= ( in[25] & 0x0fff ) << 8 ;
	out[10] |= ( in[26] & 0x0fff ) << 8 ;
	out[11] |= ( in[27] & 0x0fff ) << 8 ;

	out[8] |= in[28] << 20 ;
	out[9] |= in[29] << 20 ;
	out[10] |= in[30] << 20 ;
	out[11] |= in[31] << 20 ;

	out[12] = ( in[32] & 0x0fff ) << 0 ;
	out[13] = ( in[33] & 0x0fff ) << 0 ;
	out[14] = ( in[34] & 0x0fff ) << 0 ;
	out[15] = ( in[35] & 0x0fff ) << 0 ;

	out[12] |= ( in[36] & 0x0fff ) << 12 ;
	out[13] |= ( in[37] & 0x0fff ) << 12 ;
	out[14] |= ( in[38] & 0x0fff ) << 12 ;
	out[15] |= ( in[39] & 0x0fff ) << 12 ;

	out[12] |= in[40] << 24 ;
	out[13] |= in[41] << 24 ;
	out[14] |= in[42] << 24 ;
	out[15] |= in[43] << 24 ;

	out[16] = ( in[40] & 0x0fff ) >> ( 32 - 24 ) ;
	out[17] = ( in[41] & 0x0fff ) >> ( 32 - 24 ) ;
	out[18] = ( in[42] & 0x0fff ) >> ( 32 - 24 ) ;
	out[19] = ( in[43] & 0x0fff ) >> ( 32 - 24 ) ;

	out[16] |= ( in[44] & 0x0fff ) << 4 ;
	out[17] |= ( in[45] & 0x0fff ) << 4 ;
	out[18] |= ( in[46] & 0x0fff ) << 4 ;
	out[19] |= ( in[47] & 0x0fff ) << 4 ;

	out[16] |= ( in[48] & 0x0fff ) << 16 ;
	out[17] |= ( in[49] & 0x0fff ) << 16 ;
	out[18] |= ( in[50] & 0x0fff ) << 16 ;
	out[19] |= ( in[51] & 0x0fff ) << 16 ;

	out[16] |= in[52] << 28 ;
	out[17] |= in[53] << 28 ;
	out[18] |= in[54] << 28 ;
	out[19] |= in[55] << 28 ;

	out[20] = ( in[52] & 0x0fff ) >> ( 32 - 28 ) ;
	out[21] = ( in[53] & 0x0fff ) >> ( 32 - 28 ) ;
	out[22] = ( in[54] & 0x0fff ) >> ( 32 - 28 ) ;
	out[23] = ( in[55] & 0x0fff ) >> ( 32 - 28 ) ;

	out[20] |= ( in[56] & 0x0fff ) << 8 ;
	out[21] |= ( in[57] & 0x0fff ) << 8 ;
	out[22] |= ( in[58] & 0x0fff ) << 8 ;
	out[23] |= ( in[59] & 0x0fff ) << 8 ;

	out[20] |= in[60] << 20 ;
	out[21] |= in[61] << 20 ;
	out[22] |= in[62] << 20 ;
	out[23] |= in[63] << 20 ;

	out[24] = ( in[64] & 0x0fff ) << 0 ;
	out[25] = ( in[65] & 0x0fff ) << 0 ;
	out[26] = ( in[66] & 0x0fff ) << 0 ;
	out[27] = ( in[67] & 0x0fff ) << 0 ;

	out[24] |= ( in[68] & 0x0fff ) << 12 ;
	out[25] |= ( in[69] & 0x0fff ) << 12 ;
	out[26] |= ( in[70] & 0x0fff ) << 12 ;
	out[27] |= ( in[71] & 0x0fff ) << 12 ;

	out[24] |= in[72] << 24 ;
	out[25] |= in[73] << 24 ;
	out[26] |= in[74] << 24 ;
	out[27] |= in[75] << 24 ;

	out[28] = ( in[72] & 0x0fff ) >> ( 32 - 24 ) ;
	out[29] = ( in[73] & 0x0fff ) >> ( 32 - 24 ) ;
	out[30] = ( in[74] & 0x0fff ) >> ( 32 - 24 ) ;
	out[31] = ( in[75] & 0x0fff ) >> ( 32 - 24 ) ;

	out[28] |= ( in[76] & 0x0fff ) << 4 ;
	out[29] |= ( in[77] & 0x0fff ) << 4 ;
	out[30] |= ( in[78] & 0x0fff ) << 4 ;
	out[31] |= ( in[79] & 0x0fff ) << 4 ;

	out[28] |= ( in[80] & 0x0fff ) << 16 ;
	out[29] |= ( in[81] & 0x0fff ) << 16 ;
	out[30] |= ( in[82] & 0x0fff ) << 16 ;
	out[31] |= ( in[83] & 0x0fff ) << 16 ;

	out[28] |= in[84] << 28 ;
	out[29] |= in[85] << 28 ;
	out[30] |= in[86] << 28 ;
	out[31] |= in[87] << 28 ;

	out[32] = ( in[84] & 0x0fff ) >> ( 32 - 28 ) ;
	out[33] = ( in[85] & 0x0fff ) >> ( 32 - 28 ) ;
	out[34] = ( in[86] & 0x0fff ) >> ( 32 - 28 ) ;
	out[35] = ( in[87] & 0x0fff ) >> ( 32 - 28 ) ;

	out[32] |= ( in[88] & 0x0fff ) << 8 ;
	out[33] |= ( in[89] & 0x0fff ) << 8 ;
	out[34] |= ( in[90] & 0x0fff ) << 8 ;
	out[35] |= ( in[91] & 0x0fff ) << 8 ;

	out[32] |= in[92] << 20 ;
	out[33] |= in[93] << 20 ;
	out[34] |= in[94] << 20 ;
	out[35] |= in[95] << 20 ;

	out[36] = ( in[96] & 0x0fff ) << 0 ;
	out[37] = ( in[97] & 0x0fff ) << 0 ;
	out[38] = ( in[98] & 0x0fff ) << 0 ;
	out[39] = ( in[99] & 0x0fff ) << 0 ;

	out[36] |= ( in[100] & 0x0fff ) << 12 ;
	out[37] |= ( in[101] & 0x0fff ) << 12 ;
	out[38] |= ( in[102] & 0x0fff ) << 12 ;
	out[39] |= ( in[103] & 0x0fff ) << 12 ;

	out[36] |= in[104] << 24 ;
	out[37] |= in[105] << 24 ;
	out[38] |= in[106] << 24 ;
	out[39] |= in[107] << 24 ;

	out[40] = ( in[104] & 0x0fff ) >> ( 32 - 24 ) ;
	out[41] = ( in[105] & 0x0fff ) >> ( 32 - 24 ) ;
	out[42] = ( in[106] & 0x0fff ) >> ( 32 - 24 ) ;
	out[43] = ( in[107] & 0x0fff ) >> ( 32 - 24 ) ;

	out[40] |= ( in[108] & 0x0fff ) << 4 ;
	out[41] |= ( in[109] & 0x0fff ) << 4 ;
	out[42] |= ( in[110] & 0x0fff ) << 4 ;
	out[43] |= ( in[111] & 0x0fff ) << 4 ;

	out[40] |= ( in[112] & 0x0fff ) << 16 ;
	out[41] |= ( in[113] & 0x0fff ) << 16 ;
	out[42] |= ( in[114] & 0x0fff ) << 16 ;
	out[43] |= ( in[115] & 0x0fff ) << 16 ;

	out[40] |= in[116] << 28 ;
	out[41] |= in[117] << 28 ;
	out[42] |= in[118] << 28 ;
	out[43] |= in[119] << 28 ;

	out[44] = ( in[116] & 0x0fff ) >> ( 32 - 28 ) ;
	out[45] = ( in[117] & 0x0fff ) >> ( 32 - 28 ) ;
	out[46] = ( in[118] & 0x0fff ) >> ( 32 - 28 ) ;
	out[47] = ( in[119] & 0x0fff ) >> ( 32 - 28 ) ;

	out[44] |= ( in[120] & 0x0fff ) << 8 ;
	out[45] |= ( in[121] & 0x0fff ) << 8 ;
	out[46] |= ( in[122] & 0x0fff ) << 8 ;
	out[47] |= ( in[123] & 0x0fff ) << 8 ;

	out[44] |= in[124] << 20 ;
	out[45] |= in[125] << 20 ;
	out[46] |= in[126] << 20 ;
	out[47] |= in[127] << 20 ;
}


// 13-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c13(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x1fff ) << 0 ;
	out[1] = ( in[1] & 0x1fff ) << 0 ;
	out[2] = ( in[2] & 0x1fff ) << 0 ;
	out[3] = ( in[3] & 0x1fff ) << 0 ;

	out[0] |= ( in[4] & 0x1fff ) << 13 ;
	out[1] |= ( in[5] & 0x1fff ) << 13 ;
	out[2] |= ( in[6] & 0x1fff ) << 13 ;
	out[3] |= ( in[7] & 0x1fff ) << 13 ;

	out[0] |= in[8] << 26 ;
	out[1] |= in[9] << 26 ;
	out[2] |= in[10] << 26 ;
	out[3] |= in[11] << 26 ;

	out[4] = ( in[8] & 0x1fff ) >> ( 32 - 26 ) ;
	out[5] = ( in[9] & 0x1fff ) >> ( 32 - 26 ) ;
	out[6] = ( in[10] & 0x1fff ) >> ( 32 - 26 ) ;
	out[7] = ( in[11] & 0x1fff ) >> ( 32 - 26 ) ;

	out[4] |= ( in[12] & 0x1fff ) << 7 ;
	out[5] |= ( in[13] & 0x1fff ) << 7 ;
	out[6] |= ( in[14] & 0x1fff ) << 7 ;
	out[7] |= ( in[15] & 0x1fff ) << 7 ;

	out[4] |= in[16] << 20 ;
	out[5] |= in[17] << 20 ;
	out[6] |= in[18] << 20 ;
	out[7] |= in[19] << 20 ;

	out[8] = ( in[16] & 0x1fff ) >> ( 32 - 20 ) ;
	out[9] = ( in[17] & 0x1fff ) >> ( 32 - 20 ) ;
	out[10] = ( in[18] & 0x1fff ) >> ( 32 - 20 ) ;
	out[11] = ( in[19] & 0x1fff ) >> ( 32 - 20 ) ;

	out[8] |= ( in[20] & 0x1fff ) << 1 ;
	out[9] |= ( in[21] & 0x1fff ) << 1 ;
	out[10] |= ( in[22] & 0x1fff ) << 1 ;
	out[11] |= ( in[23] & 0x1fff ) << 1 ;

	out[8] |= ( in[24] & 0x1fff ) << 14 ;
	out[9] |= ( in[25] & 0x1fff ) << 14 ;
	out[10] |= ( in[26] & 0x1fff ) << 14 ;
	out[11] |= ( in[27] & 0x1fff ) << 14 ;

	out[8] |= in[28] << 27 ;
	out[9] |= in[29] << 27 ;
	out[10] |= in[30] << 27 ;
	out[11] |= in[31] << 27 ;

	out[12] = ( in[28] & 0x1fff ) >> ( 32 - 27 ) ;
	out[13] = ( in[29] & 0x1fff ) >> ( 32 - 27 ) ;
	out[14] = ( in[30] & 0x1fff ) >> ( 32 - 27 ) ;
	out[15] = ( in[31] & 0x1fff ) >> ( 32 - 27 ) ;

	out[12] |= ( in[32] & 0x1fff ) << 8 ;
	out[13] |= ( in[33] & 0x1fff ) << 8 ;
	out[14] |= ( in[34] & 0x1fff ) << 8 ;
	out[15] |= ( in[35] & 0x1fff ) << 8 ;

	out[12] |= in[36] << 21 ;
	out[13] |= in[37] << 21 ;
	out[14] |= in[38] << 21 ;
	out[15] |= in[39] << 21 ;

	out[16] = ( in[36] & 0x1fff ) >> ( 32 - 21 ) ;
	out[17] = ( in[37] & 0x1fff ) >> ( 32 - 21 ) ;
	out[18] = ( in[38] & 0x1fff ) >> ( 32 - 21 ) ;
	out[19] = ( in[39] & 0x1fff ) >> ( 32 - 21 ) ;

	out[16] |= ( in[40] & 0x1fff ) << 2 ;
	out[17] |= ( in[41] & 0x1fff ) << 2 ;
	out[18] |= ( in[42] & 0x1fff ) << 2 ;
	out[19] |= ( in[43] & 0x1fff ) << 2 ;

	out[16] |= ( in[44] & 0x1fff ) << 15 ;
	out[17] |= ( in[45] & 0x1fff ) << 15 ;
	out[18] |= ( in[46] & 0x1fff ) << 15 ;
	out[19] |= ( in[47] & 0x1fff ) << 15 ;

	out[16] |= in[48] << 28 ;
	out[17] |= in[49] << 28 ;
	out[18] |= in[50] << 28 ;
	out[19] |= in[51] << 28 ;

	out[20] = ( in[48] & 0x1fff ) >> ( 32 - 28 ) ;
	out[21] = ( in[49] & 0x1fff ) >> ( 32 - 28 ) ;
	out[22] = ( in[50] & 0x1fff ) >> ( 32 - 28 ) ;
	out[23] = ( in[51] & 0x1fff ) >> ( 32 - 28 ) ;

	out[20] |= ( in[52] & 0x1fff ) << 9 ;
	out[21] |= ( in[53] & 0x1fff ) << 9 ;
	out[22] |= ( in[54] & 0x1fff ) << 9 ;
	out[23] |= ( in[55] & 0x1fff ) << 9 ;

	out[20] |= in[56] << 22 ;
	out[21] |= in[57] << 22 ;
	out[22] |= in[58] << 22 ;
	out[23] |= in[59] << 22 ;

	out[24] = ( in[56] & 0x1fff ) >> ( 32 - 22 ) ;
	out[25] = ( in[57] & 0x1fff ) >> ( 32 - 22 ) ;
	out[26] = ( in[58] & 0x1fff ) >> ( 32 - 22 ) ;
	out[27] = ( in[59] & 0x1fff ) >> ( 32 - 22 ) ;

	out[24] |= ( in[60] & 0x1fff ) << 3 ;
	out[25] |= ( in[61] & 0x1fff ) << 3 ;
	out[26] |= ( in[62] & 0x1fff ) << 3 ;
	out[27] |= ( in[63] & 0x1fff ) << 3 ;

	out[24] |= ( in[64] & 0x1fff ) << 16 ;
	out[25] |= ( in[65] & 0x1fff ) << 16 ;
	out[26] |= ( in[66] & 0x1fff ) << 16 ;
	out[27] |= ( in[67] & 0x1fff ) << 16 ;

	out[24] |= in[68] << 29 ;
	out[25] |= in[69] << 29 ;
	out[26] |= in[70] << 29 ;
	out[27] |= in[71] << 29 ;

	out[28] = ( in[68] & 0x1fff ) >> ( 32 - 29 ) ;
	out[29] = ( in[69] & 0x1fff ) >> ( 32 - 29 ) ;
	out[30] = ( in[70] & 0x1fff ) >> ( 32 - 29 ) ;
	out[31] = ( in[71] & 0x1fff ) >> ( 32 - 29 ) ;

	out[28] |= ( in[72] & 0x1fff ) << 10 ;
	out[29] |= ( in[73] & 0x1fff ) << 10 ;
	out[30] |= ( in[74] & 0x1fff ) << 10 ;
	out[31] |= ( in[75] & 0x1fff ) << 10 ;

	out[28] |= in[76] << 23 ;
	out[29] |= in[77] << 23 ;
	out[30] |= in[78] << 23 ;
	out[31] |= in[79] << 23 ;

	out[32] = ( in[76] & 0x1fff ) >> ( 32 - 23 ) ;
	out[33] = ( in[77] & 0x1fff ) >> ( 32 - 23 ) ;
	out[34] = ( in[78] & 0x1fff ) >> ( 32 - 23 ) ;
	out[35] = ( in[79] & 0x1fff ) >> ( 32 - 23 ) ;

	out[32] |= ( in[80] & 0x1fff ) << 4 ;
	out[33] |= ( in[81] & 0x1fff ) << 4 ;
	out[34] |= ( in[82] & 0x1fff ) << 4 ;
	out[35] |= ( in[83] & 0x1fff ) << 4 ;

	out[32] |= ( in[84] & 0x1fff ) << 17 ;
	out[33] |= ( in[85] & 0x1fff ) << 17 ;
	out[34] |= ( in[86] & 0x1fff ) << 17 ;
	out[35] |= ( in[87] & 0x1fff ) << 17 ;

	out[32] |= in[88] << 30 ;
	out[33] |= in[89] << 30 ;
	out[34] |= in[90] << 30 ;
	out[35] |= in[91] << 30 ;

	out[36] = ( in[88] & 0x1fff ) >> ( 32 - 30 ) ;
	out[37] = ( in[89] & 0x1fff ) >> ( 32 - 30 ) ;
	out[38] = ( in[90] & 0x1fff ) >> ( 32 - 30 ) ;
	out[39] = ( in[91] & 0x1fff ) >> ( 32 - 30 ) ;

	out[36] |= ( in[92] & 0x1fff ) << 11 ;
	out[37] |= ( in[93] & 0x1fff ) << 11 ;
	out[38] |= ( in[94] & 0x1fff ) << 11 ;
	out[39] |= ( in[95] & 0x1fff ) << 11 ;

	out[36] |= in[96] << 24 ;
	out[37] |= in[97] << 24 ;
	out[38] |= in[98] << 24 ;
	out[39] |= in[99] << 24 ;

	out[40] = ( in[96] & 0x1fff ) >> ( 32 - 24 ) ;
	out[41] = ( in[97] & 0x1fff ) >> ( 32 - 24 ) ;
	out[42] = ( in[98] & 0x1fff ) >> ( 32 - 24 ) ;
	out[43] = ( in[99] & 0x1fff ) >> ( 32 - 24 ) ;

	out[40] |= ( in[100] & 0x1fff ) << 5 ;
	out[41] |= ( in[101] & 0x1fff ) << 5 ;
	out[42] |= ( in[102] & 0x1fff ) << 5 ;
	out[43] |= ( in[103] & 0x1fff ) << 5 ;

	out[40] |= ( in[104] & 0x1fff ) << 18 ;
	out[41] |= ( in[105] & 0x1fff ) << 18 ;
	out[42] |= ( in[106] & 0x1fff ) << 18 ;
	out[43] |= ( in[107] & 0x1fff ) << 18 ;

	out[40] |= in[108] << 31 ;
	out[41] |= in[109] << 31 ;
	out[42] |= in[110] << 31 ;
	out[43] |= in[111] << 31 ;

	out[44] = ( in[108] & 0x1fff ) >> ( 32 - 31 ) ;
	out[45] = ( in[109] & 0x1fff ) >> ( 32 - 31 ) ;
	out[46] = ( in[110] & 0x1fff ) >> ( 32 - 31 ) ;
	out[47] = ( in[111] & 0x1fff ) >> ( 32 - 31 ) ;

	out[44] |= ( in[112] & 0x1fff ) << 12 ;
	out[45] |= ( in[113] & 0x1fff ) << 12 ;
	out[46] |= ( in[114] & 0x1fff ) << 12 ;
	out[47] |= ( in[115] & 0x1fff ) << 12 ;

	out[44] |= in[116] << 25 ;
	out[45] |= in[117] << 25 ;
	out[46] |= in[118] << 25 ;
	out[47] |= in[119] << 25 ;

	out[48] = ( in[116] & 0x1fff ) >> ( 32 - 25 ) ;
	out[49] = ( in[117] & 0x1fff ) >> ( 32 - 25 ) ;
	out[50] = ( in[118] & 0x1fff ) >> ( 32 - 25 ) ;
	out[51] = ( in[119] & 0x1fff ) >> ( 32 - 25 ) ;

	out[48] |= ( in[120] & 0x1fff ) << 6 ;
	out[49] |= ( in[121] & 0x1fff ) << 6 ;
	out[50] |= ( in[122] & 0x1fff ) << 6 ;
	out[51] |= ( in[123] & 0x1fff ) << 6 ;

	out[48] |= in[124] << 19 ;
	out[49] |= in[125] << 19 ;
	out[50] |= in[126] << 19 ;
	out[51] |= in[127] << 19 ;
}


// 14-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c14(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x3fff ) << 0 ;
	out[1] = ( in[1] & 0x3fff ) << 0 ;
	out[2] = ( in[2] & 0x3fff ) << 0 ;
	out[3] = ( in[3] & 0x3fff ) << 0 ;

	out[0] |= ( in[4] & 0x3fff ) << 14 ;
	out[1] |= ( in[5] & 0x3fff ) << 14 ;
	out[2] |= ( in[6] & 0x3fff ) << 14 ;
	out[3] |= ( in[7] & 0x3fff ) << 14 ;

	out[0] |= in[8] << 28 ;
	out[1] |= in[9] << 28 ;
	out[2] |= in[10] << 28 ;
	out[3] |= in[11] << 28 ;

	out[4] = ( in[8] & 0x3fff ) >> ( 32 - 28 ) ;
	out[5] = ( in[9] & 0x3fff ) >> ( 32 - 28 ) ;
	out[6] = ( in[10] & 0x3fff ) >> ( 32 - 28 ) ;
	out[7] = ( in[11] & 0x3fff ) >> ( 32 - 28 ) ;

	out[4] |= ( in[12] & 0x3fff ) << 10 ;
	out[5] |= ( in[13] & 0x3fff ) << 10 ;
	out[6] |= ( in[14] & 0x3fff ) << 10 ;
	out[7] |= ( in[15] & 0x3fff ) << 10 ;

	out[4] |= in[16] << 24 ;
	out[5] |= in[17] << 24 ;
	out[6] |= in[18] << 24 ;
	out[7] |= in[19] << 24 ;

	out[8] = ( in[16] & 0x3fff ) >> ( 32 - 24 ) ;
	out[9] = ( in[17] & 0x3fff ) >> ( 32 - 24 ) ;
	out[10] = ( in[18] & 0x3fff ) >> ( 32 - 24 ) ;
	out[11] = ( in[19] & 0x3fff ) >> ( 32 - 24 ) ;

	out[8] |= ( in[20] & 0x3fff ) << 6 ;
	out[9] |= ( in[21] & 0x3fff ) << 6 ;
	out[10] |= ( in[22] & 0x3fff ) << 6 ;
	out[11] |= ( in[23] & 0x3fff ) << 6 ;

	out[8] |= in[24] << 20 ;
	out[9] |= in[25] << 20 ;
	out[10] |= in[26] << 20 ;
	out[11] |= in[27] << 20 ;

	out[12] = ( in[24] & 0x3fff ) >> ( 32 - 20 ) ;
	out[13] = ( in[25] & 0x3fff ) >> ( 32 - 20 ) ;
	out[14] = ( in[26] & 0x3fff ) >> ( 32 - 20 ) ;
	out[15] = ( in[27] & 0x3fff ) >> ( 32 - 20 ) ;

	out[12] |= ( in[28] & 0x3fff ) << 2 ;
	out[13] |= ( in[29] & 0x3fff ) << 2 ;
	out[14] |= ( in[30] & 0x3fff ) << 2 ;
	out[15] |= ( in[31] & 0x3fff ) << 2 ;

	out[12] |= ( in[32] & 0x3fff ) << 16 ;
	out[13] |= ( in[33] & 0x3fff ) << 16 ;
	out[14] |= ( in[34] & 0x3fff ) << 16 ;
	out[15] |= ( in[35] & 0x3fff ) << 16 ;

	out[12] |= in[36] << 30 ;
	out[13] |= in[37] << 30 ;
	out[14] |= in[38] << 30 ;
	out[15] |= in[39] << 30 ;

	out[16] = ( in[36] & 0x3fff ) >> ( 32 - 30 ) ;
	out[17] = ( in[37] & 0x3fff ) >> ( 32 - 30 ) ;
	out[18] = ( in[38] & 0x3fff ) >> ( 32 - 30 ) ;
	out[19] = ( in[39] & 0x3fff ) >> ( 32 - 30 ) ;

	out[16] |= ( in[40] & 0x3fff ) << 12 ;
	out[17] |= ( in[41] & 0x3fff ) << 12 ;
	out[18] |= ( in[42] & 0x3fff ) << 12 ;
	out[19] |= ( in[43] & 0x3fff ) << 12 ;

	out[16] |= in[44] << 26 ;
	out[17] |= in[45] << 26 ;
	out[18] |= in[46] << 26 ;
	out[19] |= in[47] << 26 ;

	out[20] = ( in[44] & 0x3fff ) >> ( 32 - 26 ) ;
	out[21] = ( in[45] & 0x3fff ) >> ( 32 - 26 ) ;
	out[22] = ( in[46] & 0x3fff ) >> ( 32 - 26 ) ;
	out[23] = ( in[47] & 0x3fff ) >> ( 32 - 26 ) ;

	out[20] |= ( in[48] & 0x3fff ) << 8 ;
	out[21] |= ( in[49] & 0x3fff ) << 8 ;
	out[22] |= ( in[50] & 0x3fff ) << 8 ;
	out[23] |= ( in[51] & 0x3fff ) << 8 ;

	out[20] |= in[52] << 22 ;
	out[21] |= in[53] << 22 ;
	out[22] |= in[54] << 22 ;
	out[23] |= in[55] << 22 ;

	out[24] = ( in[52] & 0x3fff ) >> ( 32 - 22 ) ;
	out[25] = ( in[53] & 0x3fff ) >> ( 32 - 22 ) ;
	out[26] = ( in[54] & 0x3fff ) >> ( 32 - 22 ) ;
	out[27] = ( in[55] & 0x3fff ) >> ( 32 - 22 ) ;

	out[24] |= ( in[56] & 0x3fff ) << 4 ;
	out[25] |= ( in[57] & 0x3fff ) << 4 ;
	out[26] |= ( in[58] & 0x3fff ) << 4 ;
	out[27] |= ( in[59] & 0x3fff ) << 4 ;

	out[24] |= in[60] << 18 ;
	out[25] |= in[61] << 18 ;
	out[26] |= in[62] << 18 ;
	out[27] |= in[63] << 18 ;

	out[28] = ( in[64] & 0x3fff ) << 0 ;
	out[29] = ( in[65] & 0x3fff ) << 0 ;
	out[30] = ( in[66] & 0x3fff ) << 0 ;
	out[31] = ( in[67] & 0x3fff ) << 0 ;

	out[28] |= ( in[68] & 0x3fff ) << 14 ;
	out[29] |= ( in[69] & 0x3fff ) << 14 ;
	out[30] |= ( in[70] & 0x3fff ) << 14 ;
	out[31] |= ( in[71] & 0x3fff ) << 14 ;

	out[28] |= in[72] << 28 ;
	out[29] |= in[73] << 28 ;
	out[30] |= in[74] << 28 ;
	out[31] |= in[75] << 28 ;

	out[32] = ( in[72] & 0x3fff ) >> ( 32 - 28 ) ;
	out[33] = ( in[73] & 0x3fff ) >> ( 32 - 28 ) ;
	out[34] = ( in[74] & 0x3fff ) >> ( 32 - 28 ) ;
	out[35] = ( in[75] & 0x3fff ) >> ( 32 - 28 ) ;

	out[32] |= ( in[76] & 0x3fff ) << 10 ;
	out[33] |= ( in[77] & 0x3fff ) << 10 ;
	out[34] |= ( in[78] & 0x3fff ) << 10 ;
	out[35] |= ( in[79] & 0x3fff ) << 10 ;

	out[32] |= in[80] << 24 ;
	out[33] |= in[81] << 24 ;
	out[34] |= in[82] << 24 ;
	out[35] |= in[83] << 24 ;

	out[36] = ( in[80] & 0x3fff ) >> ( 32 - 24 ) ;
	out[37] = ( in[81] & 0x3fff ) >> ( 32 - 24 ) ;
	out[38] = ( in[82] & 0x3fff ) >> ( 32 - 24 ) ;
	out[39] = ( in[83] & 0x3fff ) >> ( 32 - 24 ) ;

	out[36] |= ( in[84] & 0x3fff ) << 6 ;
	out[37] |= ( in[85] & 0x3fff ) << 6 ;
	out[38] |= ( in[86] & 0x3fff ) << 6 ;
	out[39] |= ( in[87] & 0x3fff ) << 6 ;

	out[36] |= in[88] << 20 ;
	out[37] |= in[89] << 20 ;
	out[38] |= in[90] << 20 ;
	out[39] |= in[91] << 20 ;

	out[40] = ( in[88] & 0x3fff ) >> ( 32 - 20 ) ;
	out[41] = ( in[89] & 0x3fff ) >> ( 32 - 20 ) ;
	out[42] = ( in[90] & 0x3fff ) >> ( 32 - 20 ) ;
	out[43] = ( in[91] & 0x3fff ) >> ( 32 - 20 ) ;

	out[40] |= ( in[92] & 0x3fff ) << 2 ;
	out[41] |= ( in[93] & 0x3fff ) << 2 ;
	out[42] |= ( in[94] & 0x3fff ) << 2 ;
	out[43] |= ( in[95] & 0x3fff ) << 2 ;

	out[40] |= ( in[96] & 0x3fff ) << 16 ;
	out[41] |= ( in[97] & 0x3fff ) << 16 ;
	out[42] |= ( in[98] & 0x3fff ) << 16 ;
	out[43] |= ( in[99] & 0x3fff ) << 16 ;

	out[40] |= in[100] << 30 ;
	out[41] |= in[101] << 30 ;
	out[42] |= in[102] << 30 ;
	out[43] |= in[103] << 30 ;

	out[44] = ( in[100] & 0x3fff ) >> ( 32 - 30 ) ;
	out[45] = ( in[101] & 0x3fff ) >> ( 32 - 30 ) ;
	out[46] = ( in[102] & 0x3fff ) >> ( 32 - 30 ) ;
	out[47] = ( in[103] & 0x3fff ) >> ( 32 - 30 ) ;

	out[44] |= ( in[104] & 0x3fff ) << 12 ;
	out[45] |= ( in[105] & 0x3fff ) << 12 ;
	out[46] |= ( in[106] & 0x3fff ) << 12 ;
	out[47] |= ( in[107] & 0x3fff ) << 12 ;

	out[44] |= in[108] << 26 ;
	out[45] |= in[109] << 26 ;
	out[46] |= in[110] << 26 ;
	out[47] |= in[111] << 26 ;

	out[48] = ( in[108] & 0x3fff ) >> ( 32 - 26 ) ;
	out[49] = ( in[109] & 0x3fff ) >> ( 32 - 26 ) ;
	out[50] = ( in[110] & 0x3fff ) >> ( 32 - 26 ) ;
	out[51] = ( in[111] & 0x3fff ) >> ( 32 - 26 ) ;

	out[48] |= ( in[112] & 0x3fff ) << 8 ;
	out[49] |= ( in[113] & 0x3fff ) << 8 ;
	out[50] |= ( in[114] & 0x3fff ) << 8 ;
	out[51] |= ( in[115] & 0x3fff ) << 8 ;

	out[48] |= in[116] << 22 ;
	out[49] |= in[117] << 22 ;
	out[50] |= in[118] << 22 ;
	out[51] |= in[119] << 22 ;

	out[52] = ( in[116] & 0x3fff ) >> ( 32 - 22 ) ;
	out[53] = ( in[117] & 0x3fff ) >> ( 32 - 22 ) ;
	out[54] = ( in[118] & 0x3fff ) >> ( 32 - 22 ) ;
	out[55] = ( in[119] & 0x3fff ) >> ( 32 - 22 ) ;

	out[52] |= ( in[120] & 0x3fff ) << 4 ;
	out[53] |= ( in[121] & 0x3fff ) << 4 ;
	out[54] |= ( in[122] & 0x3fff ) << 4 ;
	out[55] |= ( in[123] & 0x3fff ) << 4 ;

	out[52] |= in[124] << 18 ;
	out[53] |= in[125] << 18 ;
	out[54] |= in[126] << 18 ;
	out[55] |= in[127] << 18 ;
}


// 15-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c15(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x7fff ) << 0 ;
	out[1] = ( in[1] & 0x7fff ) << 0 ;
	out[2] = ( in[2] & 0x7fff ) << 0 ;
	out[3] = ( in[3] & 0x7fff ) << 0 ;

	out[0] |= ( in[4] & 0x7fff ) << 15 ;
	out[1] |= ( in[5] & 0x7fff ) << 15 ;
	out[2] |= ( in[6] & 0x7fff ) << 15 ;
	out[3] |= ( in[7] & 0x7fff ) << 15 ;

	out[0] |= in[8] << 30 ;
	out[1] |= in[9] << 30 ;
	out[2] |= in[10] << 30 ;
	out[3] |= in[11] << 30 ;

	out[4] = ( in[8] & 0x7fff ) >> ( 32 - 30 ) ;
	out[5] = ( in[9] & 0x7fff ) >> ( 32 - 30 ) ;
	out[6] = ( in[10] & 0x7fff ) >> ( 32 - 30 ) ;
	out[7] = ( in[11] & 0x7fff ) >> ( 32 - 30 ) ;

	out[4] |= ( in[12] & 0x7fff ) << 13 ;
	out[5] |= ( in[13] & 0x7fff ) << 13 ;
	out[6] |= ( in[14] & 0x7fff ) << 13 ;
	out[7] |= ( in[15] & 0x7fff ) << 13 ;

	out[4] |= in[16] << 28 ;
	out[5] |= in[17] << 28 ;
	out[6] |= in[18] << 28 ;
	out[7] |= in[19] << 28 ;

	out[8] = ( in[16] & 0x7fff ) >> ( 32 - 28 ) ;
	out[9] = ( in[17] & 0x7fff ) >> ( 32 - 28 ) ;
	out[10] = ( in[18] & 0x7fff ) >> ( 32 - 28 ) ;
	out[11] = ( in[19] & 0x7fff ) >> ( 32 - 28 ) ;

	out[8] |= ( in[20] & 0x7fff ) << 11 ;
	out[9] |= ( in[21] & 0x7fff ) << 11 ;
	out[10] |= ( in[22] & 0x7fff ) << 11 ;
	out[11] |= ( in[23] & 0x7fff ) << 11 ;

	out[8] |= in[24] << 26 ;
	out[9] |= in[25] << 26 ;
	out[10] |= in[26] << 26 ;
	out[11] |= in[27] << 26 ;

	out[12] = ( in[24] & 0x7fff ) >> ( 32 - 26 ) ;
	out[13] = ( in[25] & 0x7fff ) >> ( 32 - 26 ) ;
	out[14] = ( in[26] & 0x7fff ) >> ( 32 - 26 ) ;
	out[15] = ( in[27] & 0x7fff ) >> ( 32 - 26 ) ;

	out[12] |= ( in[28] & 0x7fff ) << 9 ;
	out[13] |= ( in[29] & 0x7fff ) << 9 ;
	out[14] |= ( in[30] & 0x7fff ) << 9 ;
	out[15] |= ( in[31] & 0x7fff ) << 9 ;

	out[12] |= in[32] << 24 ;
	out[13] |= in[33] << 24 ;
	out[14] |= in[34] << 24 ;
	out[15] |= in[35] << 24 ;

	out[16] = ( in[32] & 0x7fff ) >> ( 32 - 24 ) ;
	out[17] = ( in[33] & 0x7fff ) >> ( 32 - 24 ) ;
	out[18] = ( in[34] & 0x7fff ) >> ( 32 - 24 ) ;
	out[19] = ( in[35] & 0x7fff ) >> ( 32 - 24 ) ;

	out[16] |= ( in[36] & 0x7fff ) << 7 ;
	out[17] |= ( in[37] & 0x7fff ) << 7 ;
	out[18] |= ( in[38] & 0x7fff ) << 7 ;
	out[19] |= ( in[39] & 0x7fff ) << 7 ;

	out[16] |= in[40] << 22 ;
	out[17] |= in[41] << 22 ;
	out[18] |= in[42] << 22 ;
	out[19] |= in[43] << 22 ;

	out[20] = ( in[40] & 0x7fff ) >> ( 32 - 22 ) ;
	out[21] = ( in[41] & 0x7fff ) >> ( 32 - 22 ) ;
	out[22] = ( in[42] & 0x7fff ) >> ( 32 - 22 ) ;
	out[23] = ( in[43] & 0x7fff ) >> ( 32 - 22 ) ;

	out[20] |= ( in[44] & 0x7fff ) << 5 ;
	out[21] |= ( in[45] & 0x7fff ) << 5 ;
	out[22] |= ( in[46] & 0x7fff ) << 5 ;
	out[23] |= ( in[47] & 0x7fff ) << 5 ;

	out[20] |= in[48] << 20 ;
	out[21] |= in[49] << 20 ;
	out[22] |= in[50] << 20 ;
	out[23] |= in[51] << 20 ;

	out[24] = ( in[48] & 0x7fff ) >> ( 32 - 20 ) ;
	out[25] = ( in[49] & 0x7fff ) >> ( 32 - 20 ) ;
	out[26] = ( in[50] & 0x7fff ) >> ( 32 - 20 ) ;
	out[27] = ( in[51] & 0x7fff ) >> ( 32 - 20 ) ;

	out[24] |= ( in[52] & 0x7fff ) << 3 ;
	out[25] |= ( in[53] & 0x7fff ) << 3 ;
	out[26] |= ( in[54] & 0x7fff ) << 3 ;
	out[27] |= ( in[55] & 0x7fff ) << 3 ;

	out[24] |= in[56] << 18 ;
	out[25] |= in[57] << 18 ;
	out[26] |= in[58] << 18 ;
	out[27] |= in[59] << 18 ;

	out[28] = ( in[56] & 0x7fff ) >> ( 32 - 18 ) ;
	out[29] = ( in[57] & 0x7fff ) >> ( 32 - 18 ) ;
	out[30] = ( in[58] & 0x7fff ) >> ( 32 - 18 ) ;
	out[31] = ( in[59] & 0x7fff ) >> ( 32 - 18 ) ;

	out[28] |= ( in[60] & 0x7fff ) << 1 ;
	out[29] |= ( in[61] & 0x7fff ) << 1 ;
	out[30] |= ( in[62] & 0x7fff ) << 1 ;
	out[31] |= ( in[63] & 0x7fff ) << 1 ;

	out[28] |= ( in[64] & 0x7fff ) << 16 ;
	out[29] |= ( in[65] & 0x7fff ) << 16 ;
	out[30] |= ( in[66] & 0x7fff ) << 16 ;
	out[31] |= ( in[67] & 0x7fff ) << 16 ;

	out[28] |= in[68] << 31 ;
	out[29] |= in[69] << 31 ;
	out[30] |= in[70] << 31 ;
	out[31] |= in[71] << 31 ;

	out[32] = ( in[68] & 0x7fff ) >> ( 32 - 31 ) ;
	out[33] = ( in[69] & 0x7fff ) >> ( 32 - 31 ) ;
	out[34] = ( in[70] & 0x7fff ) >> ( 32 - 31 ) ;
	out[35] = ( in[71] & 0x7fff ) >> ( 32 - 31 ) ;

	out[32] |= ( in[72] & 0x7fff ) << 14 ;
	out[33] |= ( in[73] & 0x7fff ) << 14 ;
	out[34] |= ( in[74] & 0x7fff ) << 14 ;
	out[35] |= ( in[75] & 0x7fff ) << 14 ;

	out[32] |= in[76] << 29 ;
	out[33] |= in[77] << 29 ;
	out[34] |= in[78] << 29 ;
	out[35] |= in[79] << 29 ;

	out[36] = ( in[76] & 0x7fff ) >> ( 32 - 29 ) ;
	out[37] = ( in[77] & 0x7fff ) >> ( 32 - 29 ) ;
	out[38] = ( in[78] & 0x7fff ) >> ( 32 - 29 ) ;
	out[39] = ( in[79] & 0x7fff ) >> ( 32 - 29 ) ;

	out[36] |= ( in[80] & 0x7fff ) << 12 ;
	out[37] |= ( in[81] & 0x7fff ) << 12 ;
	out[38] |= ( in[82] & 0x7fff ) << 12 ;
	out[39] |= ( in[83] & 0x7fff ) << 12 ;

	out[36] |= in[84] << 27 ;
	out[37] |= in[85] << 27 ;
	out[38] |= in[86] << 27 ;
	out[39] |= in[87] << 27 ;

	out[40] = ( in[84] & 0x7fff ) >> ( 32 - 27 ) ;
	out[41] = ( in[85] & 0x7fff ) >> ( 32 - 27 ) ;
	out[42] = ( in[86] & 0x7fff ) >> ( 32 - 27 ) ;
	out[43] = ( in[87] & 0x7fff ) >> ( 32 - 27 ) ;

	out[40] |= ( in[88] & 0x7fff ) << 10 ;
	out[41] |= ( in[89] & 0x7fff ) << 10 ;
	out[42] |= ( in[90] & 0x7fff ) << 10 ;
	out[43] |= ( in[91] & 0x7fff ) << 10 ;

	out[40] |= in[92] << 25 ;
	out[41] |= in[93] << 25 ;
	out[42] |= in[94] << 25 ;
	out[43] |= in[95] << 25 ;

	out[44] = ( in[92] & 0x7fff ) >> ( 32 - 25 ) ;
	out[45] = ( in[93] & 0x7fff ) >> ( 32 - 25 ) ;
	out[46] = ( in[94] & 0x7fff ) >> ( 32 - 25 ) ;
	out[47] = ( in[95] & 0x7fff ) >> ( 32 - 25 ) ;

	out[44] |= ( in[96] & 0x7fff ) << 8 ;
	out[45] |= ( in[97] & 0x7fff ) << 8 ;
	out[46] |= ( in[98] & 0x7fff ) << 8 ;
	out[47] |= ( in[99] & 0x7fff ) << 8 ;

	out[44] |= in[100] << 23 ;
	out[45] |= in[101] << 23 ;
	out[46] |= in[102] << 23 ;
	out[47] |= in[103] << 23 ;

	out[48] = ( in[100] & 0x7fff ) >> ( 32 - 23 ) ;
	out[49] = ( in[101] & 0x7fff ) >> ( 32 - 23 ) ;
	out[50] = ( in[102] & 0x7fff ) >> ( 32 - 23 ) ;
	out[51] = ( in[103] & 0x7fff ) >> ( 32 - 23 ) ;

	out[48] |= ( in[104] & 0x7fff ) << 6 ;
	out[49] |= ( in[105] & 0x7fff ) << 6 ;
	out[50] |= ( in[106] & 0x7fff ) << 6 ;
	out[51] |= ( in[107] & 0x7fff ) << 6 ;

	out[48] |= in[108] << 21 ;
	out[49] |= in[109] << 21 ;
	out[50] |= in[110] << 21 ;
	out[51] |= in[111] << 21 ;

	out[52] = ( in[108] & 0x7fff ) >> ( 32 - 21 ) ;
	out[53] = ( in[109] & 0x7fff ) >> ( 32 - 21 ) ;
	out[54] = ( in[110] & 0x7fff ) >> ( 32 - 21 ) ;
	out[55] = ( in[111] & 0x7fff ) >> ( 32 - 21 ) ;

	out[52] |= ( in[112] & 0x7fff ) << 4 ;
	out[53] |= ( in[113] & 0x7fff ) << 4 ;
	out[54] |= ( in[114] & 0x7fff ) << 4 ;
	out[55] |= ( in[115] & 0x7fff ) << 4 ;

	out[52] |= in[116] << 19 ;
	out[53] |= in[117] << 19 ;
	out[54] |= in[118] << 19 ;
	out[55] |= in[119] << 19 ;

	out[56] = ( in[116] & 0x7fff ) >> ( 32 - 19 ) ;
	out[57] = ( in[117] & 0x7fff ) >> ( 32 - 19 ) ;
	out[58] = ( in[118] & 0x7fff ) >> ( 32 - 19 ) ;
	out[59] = ( in[119] & 0x7fff ) >> ( 32 - 19 ) ;

	out[56] |= ( in[120] & 0x7fff ) << 2 ;
	out[57] |= ( in[121] & 0x7fff ) << 2 ;
	out[58] |= ( in[122] & 0x7fff ) << 2 ;
	out[59] |= ( in[123] & 0x7fff ) << 2 ;

	out[56] |= in[124] << 17 ;
	out[57] |= in[125] << 17 ;
	out[58] |= in[126] << 17 ;
	out[59] |= in[127] << 17 ;
}


// 16-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c16(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0xffff ) << 0 ;
	out[1] = ( in[1] & 0xffff ) << 0 ;
	out[2] = ( in[2] & 0xffff ) << 0 ;
	out[3] = ( in[3] & 0xffff ) << 0 ;

	out[0] |= in[4] << 16 ;
	out[1] |= in[5] << 16 ;
	out[2] |= in[6] << 16 ;
	out[3] |= in[7] << 16 ;

	out[4] = ( in[8] & 0xffff ) << 0 ;
	out[5] = ( in[9] & 0xffff ) << 0 ;
	out[6] = ( in[10] & 0xffff ) << 0 ;
	out[7] = ( in[11] & 0xffff ) << 0 ;

	out[4] |= in[12] << 16 ;
	out[5] |= in[13] << 16 ;
	out[6] |= in[14] << 16 ;
	out[7] |= in[15] << 16 ;

	out[8] = ( in[16] & 0xffff ) << 0 ;
	out[9] = ( in[17] & 0xffff ) << 0 ;
	out[10] = ( in[18] & 0xffff ) << 0 ;
	out[11] = ( in[19] & 0xffff ) << 0 ;

	out[8] |= in[20] << 16 ;
	out[9] |= in[21] << 16 ;
	out[10] |= in[22] << 16 ;
	out[11] |= in[23] << 16 ;

	out[12] = ( in[24] & 0xffff ) << 0 ;
	out[13] = ( in[25] & 0xffff ) << 0 ;
	out[14] = ( in[26] & 0xffff ) << 0 ;
	out[15] = ( in[27] & 0xffff ) << 0 ;

	out[12] |= in[28] << 16 ;
	out[13] |= in[29] << 16 ;
	out[14] |= in[30] << 16 ;
	out[15] |= in[31] << 16 ;

	out[16] = ( in[32] & 0xffff ) << 0 ;
	out[17] = ( in[33] & 0xffff ) << 0 ;
	out[18] = ( in[34] & 0xffff ) << 0 ;
	out[19] = ( in[35] & 0xffff ) << 0 ;

	out[16] |= in[36] << 16 ;
	out[17] |= in[37] << 16 ;
	out[18] |= in[38] << 16 ;
	out[19] |= in[39] << 16 ;

	out[20] = ( in[40] & 0xffff ) << 0 ;
	out[21] = ( in[41] & 0xffff ) << 0 ;
	out[22] = ( in[42] & 0xffff ) << 0 ;
	out[23] = ( in[43] & 0xffff ) << 0 ;

	out[20] |= in[44] << 16 ;
	out[21] |= in[45] << 16 ;
	out[22] |= in[46] << 16 ;
	out[23] |= in[47] << 16 ;

	out[24] = ( in[48] & 0xffff ) << 0 ;
	out[25] = ( in[49] & 0xffff ) << 0 ;
	out[26] = ( in[50] & 0xffff ) << 0 ;
	out[27] = ( in[51] & 0xffff ) << 0 ;

	out[24] |= in[52] << 16 ;
	out[25] |= in[53] << 16 ;
	out[26] |= in[54] << 16 ;
	out[27] |= in[55] << 16 ;

	out[28] = ( in[56] & 0xffff ) << 0 ;
	out[29] = ( in[57] & 0xffff ) << 0 ;
	out[30] = ( in[58] & 0xffff ) << 0 ;
	out[31] = ( in[59] & 0xffff ) << 0 ;

	out[28] |= in[60] << 16 ;
	out[29] |= in[61] << 16 ;
	out[30] |= in[62] << 16 ;
	out[31] |= in[63] << 16 ;

	out[32] = ( in[64] & 0xffff ) << 0 ;
	out[33] = ( in[65] & 0xffff ) << 0 ;
	out[34] = ( in[66] & 0xffff ) << 0 ;
	out[35] = ( in[67] & 0xffff ) << 0 ;

	out[32] |= in[68] << 16 ;
	out[33] |= in[69] << 16 ;
	out[34] |= in[70] << 16 ;
	out[35] |= in[71] << 16 ;

	out[36] = ( in[72] & 0xffff ) << 0 ;
	out[37] = ( in[73] & 0xffff ) << 0 ;
	out[38] = ( in[74] & 0xffff ) << 0 ;
	out[39] = ( in[75] & 0xffff ) << 0 ;

	out[36] |= in[76] << 16 ;
	out[37] |= in[77] << 16 ;
	out[38] |= in[78] << 16 ;
	out[39] |= in[79] << 16 ;

	out[40] = ( in[80] & 0xffff ) << 0 ;
	out[41] = ( in[81] & 0xffff ) << 0 ;
	out[42] = ( in[82] & 0xffff ) << 0 ;
	out[43] = ( in[83] & 0xffff ) << 0 ;

	out[40] |= in[84] << 16 ;
	out[41] |= in[85] << 16 ;
	out[42] |= in[86] << 16 ;
	out[43] |= in[87] << 16 ;

	out[44] = ( in[88] & 0xffff ) << 0 ;
	out[45] = ( in[89] & 0xffff ) << 0 ;
	out[46] = ( in[90] & 0xffff ) << 0 ;
	out[47] = ( in[91] & 0xffff ) << 0 ;

	out[44] |= in[92] << 16 ;
	out[45] |= in[93] << 16 ;
	out[46] |= in[94] << 16 ;
	out[47] |= in[95] << 16 ;

	out[48] = ( in[96] & 0xffff ) << 0 ;
	out[49] = ( in[97] & 0xffff ) << 0 ;
	out[50] = ( in[98] & 0xffff ) << 0 ;
	out[51] = ( in[99] & 0xffff ) << 0 ;

	out[48] |= in[100] << 16 ;
	out[49] |= in[101] << 16 ;
	out[50] |= in[102] << 16 ;
	out[51] |= in[103] << 16 ;

	out[52] = ( in[104] & 0xffff ) << 0 ;
	out[53] = ( in[105] & 0xffff ) << 0 ;
	out[54] = ( in[106] & 0xffff ) << 0 ;
	out[55] = ( in[107] & 0xffff ) << 0 ;

	out[52] |= in[108] << 16 ;
	out[53] |= in[109] << 16 ;
	out[54] |= in[110] << 16 ;
	out[55] |= in[111] << 16 ;

	out[56] = ( in[112] & 0xffff ) << 0 ;
	out[57] = ( in[113] & 0xffff ) << 0 ;
	out[58] = ( in[114] & 0xffff ) << 0 ;
	out[59] = ( in[115] & 0xffff ) << 0 ;

	out[56] |= in[116] << 16 ;
	out[57] |= in[117] << 16 ;
	out[58] |= in[118] << 16 ;
	out[59] |= in[119] << 16 ;

	out[60] = ( in[120] & 0xffff ) << 0 ;
	out[61] = ( in[121] & 0xffff ) << 0 ;
	out[62] = ( in[122] & 0xffff ) << 0 ;
	out[63] = ( in[123] & 0xffff ) << 0 ;

	out[60] |= in[124] << 16 ;
	out[61] |= in[125] << 16 ;
	out[62] |= in[126] << 16 ;
	out[63] |= in[127] << 16 ;
}


// 17-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c17(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x01ffff ) << 0 ;
	out[1] = ( in[1] & 0x01ffff ) << 0 ;
	out[2] = ( in[2] & 0x01ffff ) << 0 ;
	out[3] = ( in[3] & 0x01ffff ) << 0 ;

	out[0] |= in[4] << 17 ;
	out[1] |= in[5] << 17 ;
	out[2] |= in[6] << 17 ;
	out[3] |= in[7] << 17 ;

	out[4] = ( in[4] & 0x01ffff ) >> ( 32 - 17 ) ;
	out[5] = ( in[5] & 0x01ffff ) >> ( 32 - 17 ) ;
	out[6] = ( in[6] & 0x01ffff ) >> ( 32 - 17 ) ;
	out[7] = ( in[7] & 0x01ffff ) >> ( 32 - 17 ) ;

	out[4] |= ( in[8] & 0x01ffff ) << 2 ;
	out[5] |= ( in[9] & 0x01ffff ) << 2 ;
	out[6] |= ( in[10] & 0x01ffff ) << 2 ;
	out[7] |= ( in[11] & 0x01ffff ) << 2 ;

	out[4] |= in[12] << 19 ;
	out[5] |= in[13] << 19 ;
	out[6] |= in[14] << 19 ;
	out[7] |= in[15] << 19 ;

	out[8] = ( in[12] & 0x01ffff ) >> ( 32 - 19 ) ;
	out[9] = ( in[13] & 0x01ffff ) >> ( 32 - 19 ) ;
	out[10] = ( in[14] & 0x01ffff ) >> ( 32 - 19 ) ;
	out[11] = ( in[15] & 0x01ffff ) >> ( 32 - 19 ) ;

	out[8] |= ( in[16] & 0x01ffff ) << 4 ;
	out[9] |= ( in[17] & 0x01ffff ) << 4 ;
	out[10] |= ( in[18] & 0x01ffff ) << 4 ;
	out[11] |= ( in[19] & 0x01ffff ) << 4 ;

	out[8] |= in[20] << 21 ;
	out[9] |= in[21] << 21 ;
	out[10] |= in[22] << 21 ;
	out[11] |= in[23] << 21 ;

	out[12] = ( in[20] & 0x01ffff ) >> ( 32 - 21 ) ;
	out[13] = ( in[21] & 0x01ffff ) >> ( 32 - 21 ) ;
	out[14] = ( in[22] & 0x01ffff ) >> ( 32 - 21 ) ;
	out[15] = ( in[23] & 0x01ffff ) >> ( 32 - 21 ) ;

	out[12] |= ( in[24] & 0x01ffff ) << 6 ;
	out[13] |= ( in[25] & 0x01ffff ) << 6 ;
	out[14] |= ( in[26] & 0x01ffff ) << 6 ;
	out[15] |= ( in[27] & 0x01ffff ) << 6 ;

	out[12] |= in[28] << 23 ;
	out[13] |= in[29] << 23 ;
	out[14] |= in[30] << 23 ;
	out[15] |= in[31] << 23 ;

	out[16] = ( in[28] & 0x01ffff ) >> ( 32 - 23 ) ;
	out[17] = ( in[29] & 0x01ffff ) >> ( 32 - 23 ) ;
	out[18] = ( in[30] & 0x01ffff ) >> ( 32 - 23 ) ;
	out[19] = ( in[31] & 0x01ffff ) >> ( 32 - 23 ) ;

	out[16] |= ( in[32] & 0x01ffff ) << 8 ;
	out[17] |= ( in[33] & 0x01ffff ) << 8 ;
	out[18] |= ( in[34] & 0x01ffff ) << 8 ;
	out[19] |= ( in[35] & 0x01ffff ) << 8 ;

	out[16] |= in[36] << 25 ;
	out[17] |= in[37] << 25 ;
	out[18] |= in[38] << 25 ;
	out[19] |= in[39] << 25 ;

	out[20] = ( in[36] & 0x01ffff ) >> ( 32 - 25 ) ;
	out[21] = ( in[37] & 0x01ffff ) >> ( 32 - 25 ) ;
	out[22] = ( in[38] & 0x01ffff ) >> ( 32 - 25 ) ;
	out[23] = ( in[39] & 0x01ffff ) >> ( 32 - 25 ) ;

	out[20] |= ( in[40] & 0x01ffff ) << 10 ;
	out[21] |= ( in[41] & 0x01ffff ) << 10 ;
	out[22] |= ( in[42] & 0x01ffff ) << 10 ;
	out[23] |= ( in[43] & 0x01ffff ) << 10 ;

	out[20] |= in[44] << 27 ;
	out[21] |= in[45] << 27 ;
	out[22] |= in[46] << 27 ;
	out[23] |= in[47] << 27 ;

	out[24] = ( in[44] & 0x01ffff ) >> ( 32 - 27 ) ;
	out[25] = ( in[45] & 0x01ffff ) >> ( 32 - 27 ) ;
	out[26] = ( in[46] & 0x01ffff ) >> ( 32 - 27 ) ;
	out[27] = ( in[47] & 0x01ffff ) >> ( 32 - 27 ) ;

	out[24] |= ( in[48] & 0x01ffff ) << 12 ;
	out[25] |= ( in[49] & 0x01ffff ) << 12 ;
	out[26] |= ( in[50] & 0x01ffff ) << 12 ;
	out[27] |= ( in[51] & 0x01ffff ) << 12 ;

	out[24] |= in[52] << 29 ;
	out[25] |= in[53] << 29 ;
	out[26] |= in[54] << 29 ;
	out[27] |= in[55] << 29 ;

	out[28] = ( in[52] & 0x01ffff ) >> ( 32 - 29 ) ;
	out[29] = ( in[53] & 0x01ffff ) >> ( 32 - 29 ) ;
	out[30] = ( in[54] & 0x01ffff ) >> ( 32 - 29 ) ;
	out[31] = ( in[55] & 0x01ffff ) >> ( 32 - 29 ) ;

	out[28] |= ( in[56] & 0x01ffff ) << 14 ;
	out[29] |= ( in[57] & 0x01ffff ) << 14 ;
	out[30] |= ( in[58] & 0x01ffff ) << 14 ;
	out[31] |= ( in[59] & 0x01ffff ) << 14 ;

	out[28] |= in[60] << 31 ;
	out[29] |= in[61] << 31 ;
	out[30] |= in[62] << 31 ;
	out[31] |= in[63] << 31 ;

	out[32] = ( in[60] & 0x01ffff ) >> ( 32 - 31 ) ;
	out[33] = ( in[61] & 0x01ffff ) >> ( 32 - 31 ) ;
	out[34] = ( in[62] & 0x01ffff ) >> ( 32 - 31 ) ;
	out[35] = ( in[63] & 0x01ffff ) >> ( 32 - 31 ) ;

	out[32] |= in[64] << 16 ;
	out[33] |= in[65] << 16 ;
	out[34] |= in[66] << 16 ;
	out[35] |= in[67] << 16 ;

	out[36] = ( in[64] & 0x01ffff ) >> ( 32 - 16 ) ;
	out[37] = ( in[65] & 0x01ffff ) >> ( 32 - 16 ) ;
	out[38] = ( in[66] & 0x01ffff ) >> ( 32 - 16 ) ;
	out[39] = ( in[67] & 0x01ffff ) >> ( 32 - 16 ) ;

	out[36] |= ( in[68] & 0x01ffff ) << 1 ;
	out[37] |= ( in[69] & 0x01ffff ) << 1 ;
	out[38] |= ( in[70] & 0x01ffff ) << 1 ;
	out[39] |= ( in[71] & 0x01ffff ) << 1 ;

	out[36] |= in[72] << 18 ;
	out[37] |= in[73] << 18 ;
	out[38] |= in[74] << 18 ;
	out[39] |= in[75] << 18 ;

	out[40] = ( in[72] & 0x01ffff ) >> ( 32 - 18 ) ;
	out[41] = ( in[73] & 0x01ffff ) >> ( 32 - 18 ) ;
	out[42] = ( in[74] & 0x01ffff ) >> ( 32 - 18 ) ;
	out[43] = ( in[75] & 0x01ffff ) >> ( 32 - 18 ) ;

	out[40] |= ( in[76] & 0x01ffff ) << 3 ;
	out[41] |= ( in[77] & 0x01ffff ) << 3 ;
	out[42] |= ( in[78] & 0x01ffff ) << 3 ;
	out[43] |= ( in[79] & 0x01ffff ) << 3 ;

	out[40] |= in[80] << 20 ;
	out[41] |= in[81] << 20 ;
	out[42] |= in[82] << 20 ;
	out[43] |= in[83] << 20 ;

	out[44] = ( in[80] & 0x01ffff ) >> ( 32 - 20 ) ;
	out[45] = ( in[81] & 0x01ffff ) >> ( 32 - 20 ) ;
	out[46] = ( in[82] & 0x01ffff ) >> ( 32 - 20 ) ;
	out[47] = ( in[83] & 0x01ffff ) >> ( 32 - 20 ) ;

	out[44] |= ( in[84] & 0x01ffff ) << 5 ;
	out[45] |= ( in[85] & 0x01ffff ) << 5 ;
	out[46] |= ( in[86] & 0x01ffff ) << 5 ;
	out[47] |= ( in[87] & 0x01ffff ) << 5 ;

	out[44] |= in[88] << 22 ;
	out[45] |= in[89] << 22 ;
	out[46] |= in[90] << 22 ;
	out[47] |= in[91] << 22 ;

	out[48] = ( in[88] & 0x01ffff ) >> ( 32 - 22 ) ;
	out[49] = ( in[89] & 0x01ffff ) >> ( 32 - 22 ) ;
	out[50] = ( in[90] & 0x01ffff ) >> ( 32 - 22 ) ;
	out[51] = ( in[91] & 0x01ffff ) >> ( 32 - 22 ) ;

	out[48] |= ( in[92] & 0x01ffff ) << 7 ;
	out[49] |= ( in[93] & 0x01ffff ) << 7 ;
	out[50] |= ( in[94] & 0x01ffff ) << 7 ;
	out[51] |= ( in[95] & 0x01ffff ) << 7 ;

	out[48] |= in[96] << 24 ;
	out[49] |= in[97] << 24 ;
	out[50] |= in[98] << 24 ;
	out[51] |= in[99] << 24 ;

	out[52] = ( in[96] & 0x01ffff ) >> ( 32 - 24 ) ;
	out[53] = ( in[97] & 0x01ffff ) >> ( 32 - 24 ) ;
	out[54] = ( in[98] & 0x01ffff ) >> ( 32 - 24 ) ;
	out[55] = ( in[99] & 0x01ffff ) >> ( 32 - 24 ) ;

	out[52] |= ( in[100] & 0x01ffff ) << 9 ;
	out[53] |= ( in[101] & 0x01ffff ) << 9 ;
	out[54] |= ( in[102] & 0x01ffff ) << 9 ;
	out[55] |= ( in[103] & 0x01ffff ) << 9 ;

	out[52] |= in[104] << 26 ;
	out[53] |= in[105] << 26 ;
	out[54] |= in[106] << 26 ;
	out[55] |= in[107] << 26 ;

	out[56] = ( in[104] & 0x01ffff ) >> ( 32 - 26 ) ;
	out[57] = ( in[105] & 0x01ffff ) >> ( 32 - 26 ) ;
	out[58] = ( in[106] & 0x01ffff ) >> ( 32 - 26 ) ;
	out[59] = ( in[107] & 0x01ffff ) >> ( 32 - 26 ) ;

	out[56] |= ( in[108] & 0x01ffff ) << 11 ;
	out[57] |= ( in[109] & 0x01ffff ) << 11 ;
	out[58] |= ( in[110] & 0x01ffff ) << 11 ;
	out[59] |= ( in[111] & 0x01ffff ) << 11 ;

	out[56] |= in[112] << 28 ;
	out[57] |= in[113] << 28 ;
	out[58] |= in[114] << 28 ;
	out[59] |= in[115] << 28 ;

	out[60] = ( in[112] & 0x01ffff ) >> ( 32 - 28 ) ;
	out[61] = ( in[113] & 0x01ffff ) >> ( 32 - 28 ) ;
	out[62] = ( in[114] & 0x01ffff ) >> ( 32 - 28 ) ;
	out[63] = ( in[115] & 0x01ffff ) >> ( 32 - 28 ) ;

	out[60] |= ( in[116] & 0x01ffff ) << 13 ;
	out[61] |= ( in[117] & 0x01ffff ) << 13 ;
	out[62] |= ( in[118] & 0x01ffff ) << 13 ;
	out[63] |= ( in[119] & 0x01ffff ) << 13 ;

	out[60] |= in[120] << 30 ;
	out[61] |= in[121] << 30 ;
	out[62] |= in[122] << 30 ;
	out[63] |= in[123] << 30 ;

	out[64] = ( in[120] & 0x01ffff ) >> ( 32 - 30 ) ;
	out[65] = ( in[121] & 0x01ffff ) >> ( 32 - 30 ) ;
	out[66] = ( in[122] & 0x01ffff ) >> ( 32 - 30 ) ;
	out[67] = ( in[123] & 0x01ffff ) >> ( 32 - 30 ) ;

	out[64] |= in[124] << 15 ;
	out[65] |= in[125] << 15 ;
	out[66] |= in[126] << 15 ;
	out[67] |= in[127] << 15 ;
}


// 18-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c18(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x03ffff ) << 0 ;
	out[1] = ( in[1] & 0x03ffff ) << 0 ;
	out[2] = ( in[2] & 0x03ffff ) << 0 ;
	out[3] = ( in[3] & 0x03ffff ) << 0 ;

	out[0] |= in[4] << 18 ;
	out[1] |= in[5] << 18 ;
	out[2] |= in[6] << 18 ;
	out[3] |= in[7] << 18 ;

	out[4] = ( in[4] & 0x03ffff ) >> ( 32 - 18 ) ;
	out[5] = ( in[5] & 0x03ffff ) >> ( 32 - 18 ) ;
	out[6] = ( in[6] & 0x03ffff ) >> ( 32 - 18 ) ;
	out[7] = ( in[7] & 0x03ffff ) >> ( 32 - 18 ) ;

	out[4] |= ( in[8] & 0x03ffff ) << 4 ;
	out[5] |= ( in[9] & 0x03ffff ) << 4 ;
	out[6] |= ( in[10] & 0x03ffff ) << 4 ;
	out[7] |= ( in[11] & 0x03ffff ) << 4 ;

	out[4] |= in[12] << 22 ;
	out[5] |= in[13] << 22 ;
	out[6] |= in[14] << 22 ;
	out[7] |= in[15] << 22 ;

	out[8] = ( in[12] & 0x03ffff ) >> ( 32 - 22 ) ;
	out[9] = ( in[13] & 0x03ffff ) >> ( 32 - 22 ) ;
	out[10] = ( in[14] & 0x03ffff ) >> ( 32 - 22 ) ;
	out[11] = ( in[15] & 0x03ffff ) >> ( 32 - 22 ) ;

	out[8] |= ( in[16] & 0x03ffff ) << 8 ;
	out[9] |= ( in[17] & 0x03ffff ) << 8 ;
	out[10] |= ( in[18] & 0x03ffff ) << 8 ;
	out[11] |= ( in[19] & 0x03ffff ) << 8 ;

	out[8] |= in[20] << 26 ;
	out[9] |= in[21] << 26 ;
	out[10] |= in[22] << 26 ;
	out[11] |= in[23] << 26 ;

	out[12] = ( in[20] & 0x03ffff ) >> ( 32 - 26 ) ;
	out[13] = ( in[21] & 0x03ffff ) >> ( 32 - 26 ) ;
	out[14] = ( in[22] & 0x03ffff ) >> ( 32 - 26 ) ;
	out[15] = ( in[23] & 0x03ffff ) >> ( 32 - 26 ) ;

	out[12] |= ( in[24] & 0x03ffff ) << 12 ;
	out[13] |= ( in[25] & 0x03ffff ) << 12 ;
	out[14] |= ( in[26] & 0x03ffff ) << 12 ;
	out[15] |= ( in[27] & 0x03ffff ) << 12 ;

	out[12] |= in[28] << 30 ;
	out[13] |= in[29] << 30 ;
	out[14] |= in[30] << 30 ;
	out[15] |= in[31] << 30 ;

	out[16] = ( in[28] & 0x03ffff ) >> ( 32 - 30 ) ;
	out[17] = ( in[29] & 0x03ffff ) >> ( 32 - 30 ) ;
	out[18] = ( in[30] & 0x03ffff ) >> ( 32 - 30 ) ;
	out[19] = ( in[31] & 0x03ffff ) >> ( 32 - 30 ) ;

	out[16] |= in[32] << 16 ;
	out[17] |= in[33] << 16 ;
	out[18] |= in[34] << 16 ;
	out[19] |= in[35] << 16 ;

	out[20] = ( in[32] & 0x03ffff ) >> ( 32 - 16 ) ;
	out[21] = ( in[33] & 0x03ffff ) >> ( 32 - 16 ) ;
	out[22] = ( in[34] & 0x03ffff ) >> ( 32 - 16 ) ;
	out[23] = ( in[35] & 0x03ffff ) >> ( 32 - 16 ) ;

	out[20] |= ( in[36] & 0x03ffff ) << 2 ;
	out[21] |= ( in[37] & 0x03ffff ) << 2 ;
	out[22] |= ( in[38] & 0x03ffff ) << 2 ;
	out[23] |= ( in[39] & 0x03ffff ) << 2 ;

	out[20] |= in[40] << 20 ;
	out[21] |= in[41] << 20 ;
	out[22] |= in[42] << 20 ;
	out[23] |= in[43] << 20 ;

	out[24] = ( in[40] & 0x03ffff ) >> ( 32 - 20 ) ;
	out[25] = ( in[41] & 0x03ffff ) >> ( 32 - 20 ) ;
	out[26] = ( in[42] & 0x03ffff ) >> ( 32 - 20 ) ;
	out[27] = ( in[43] & 0x03ffff ) >> ( 32 - 20 ) ;

	out[24] |= ( in[44] & 0x03ffff ) << 6 ;
	out[25] |= ( in[45] & 0x03ffff ) << 6 ;
	out[26] |= ( in[46] & 0x03ffff ) << 6 ;
	out[27] |= ( in[47] & 0x03ffff ) << 6 ;

	out[24] |= in[48] << 24 ;
	out[25] |= in[49] << 24 ;
	out[26] |= in[50] << 24 ;
	out[27] |= in[51] << 24 ;

	out[28] = ( in[48] & 0x03ffff ) >> ( 32 - 24 ) ;
	out[29] = ( in[49] & 0x03ffff ) >> ( 32 - 24 ) ;
	out[30] = ( in[50] & 0x03ffff ) >> ( 32 - 24 ) ;
	out[31] = ( in[51] & 0x03ffff ) >> ( 32 - 24 ) ;

	out[28] |= ( in[52] & 0x03ffff ) << 10 ;
	out[29] |= ( in[53] & 0x03ffff ) << 10 ;
	out[30] |= ( in[54] & 0x03ffff ) << 10 ;
	out[31] |= ( in[55] & 0x03ffff ) << 10 ;

	out[28] |= in[56] << 28 ;
	out[29] |= in[57] << 28 ;
	out[30] |= in[58] << 28 ;
	out[31] |= in[59] << 28 ;

	out[32] = ( in[56] & 0x03ffff ) >> ( 32 - 28 ) ;
	out[33] = ( in[57] & 0x03ffff ) >> ( 32 - 28 ) ;
	out[34] = ( in[58] & 0x03ffff ) >> ( 32 - 28 ) ;
	out[35] = ( in[59] & 0x03ffff ) >> ( 32 - 28 ) ;

	out[32] |= in[60] << 14 ;
	out[33] |= in[61] << 14 ;
	out[34] |= in[62] << 14 ;
	out[35] |= in[63] << 14 ;

	out[36] = ( in[64] & 0x03ffff ) << 0 ;
	out[37] = ( in[65] & 0x03ffff ) << 0 ;
	out[38] = ( in[66] & 0x03ffff ) << 0 ;
	out[39] = ( in[67] & 0x03ffff ) << 0 ;

	out[36] |= in[68] << 18 ;
	out[37] |= in[69] << 18 ;
	out[38] |= in[70] << 18 ;
	out[39] |= in[71] << 18 ;

	out[40] = ( in[68] & 0x03ffff ) >> ( 32 - 18 ) ;
	out[41] = ( in[69] & 0x03ffff ) >> ( 32 - 18 ) ;
	out[42] = ( in[70] & 0x03ffff ) >> ( 32 - 18 ) ;
	out[43] = ( in[71] & 0x03ffff ) >> ( 32 - 18 ) ;

	out[40] |= ( in[72] & 0x03ffff ) << 4 ;
	out[41] |= ( in[73] & 0x03ffff ) << 4 ;
	out[42] |= ( in[74] & 0x03ffff ) << 4 ;
	out[43] |= ( in[75] & 0x03ffff ) << 4 ;

	out[40] |= in[76] << 22 ;
	out[41] |= in[77] << 22 ;
	out[42] |= in[78] << 22 ;
	out[43] |= in[79] << 22 ;

	out[44] = ( in[76] & 0x03ffff ) >> ( 32 - 22 ) ;
	out[45] = ( in[77] & 0x03ffff ) >> ( 32 - 22 ) ;
	out[46] = ( in[78] & 0x03ffff ) >> ( 32 - 22 ) ;
	out[47] = ( in[79] & 0x03ffff ) >> ( 32 - 22 ) ;

	out[44] |= ( in[80] & 0x03ffff ) << 8 ;
	out[45] |= ( in[81] & 0x03ffff ) << 8 ;
	out[46] |= ( in[82] & 0x03ffff ) << 8 ;
	out[47] |= ( in[83] & 0x03ffff ) << 8 ;

	out[44] |= in[84] << 26 ;
	out[45] |= in[85] << 26 ;
	out[46] |= in[86] << 26 ;
	out[47] |= in[87] << 26 ;

	out[48] = ( in[84] & 0x03ffff ) >> ( 32 - 26 ) ;
	out[49] = ( in[85] & 0x03ffff ) >> ( 32 - 26 ) ;
	out[50] = ( in[86] & 0x03ffff ) >> ( 32 - 26 ) ;
	out[51] = ( in[87] & 0x03ffff ) >> ( 32 - 26 ) ;

	out[48] |= ( in[88] & 0x03ffff ) << 12 ;
	out[49] |= ( in[89] & 0x03ffff ) << 12 ;
	out[50] |= ( in[90] & 0x03ffff ) << 12 ;
	out[51] |= ( in[91] & 0x03ffff ) << 12 ;

	out[48] |= in[92] << 30 ;
	out[49] |= in[93] << 30 ;
	out[50] |= in[94] << 30 ;
	out[51] |= in[95] << 30 ;

	out[52] = ( in[92] & 0x03ffff ) >> ( 32 - 30 ) ;
	out[53] = ( in[93] & 0x03ffff ) >> ( 32 - 30 ) ;
	out[54] = ( in[94] & 0x03ffff ) >> ( 32 - 30 ) ;
	out[55] = ( in[95] & 0x03ffff ) >> ( 32 - 30 ) ;

	out[52] |= in[96] << 16 ;
	out[53] |= in[97] << 16 ;
	out[54] |= in[98] << 16 ;
	out[55] |= in[99] << 16 ;

	out[56] = ( in[96] & 0x03ffff ) >> ( 32 - 16 ) ;
	out[57] = ( in[97] & 0x03ffff ) >> ( 32 - 16 ) ;
	out[58] = ( in[98] & 0x03ffff ) >> ( 32 - 16 ) ;
	out[59] = ( in[99] & 0x03ffff ) >> ( 32 - 16 ) ;

	out[56] |= ( in[100] & 0x03ffff ) << 2 ;
	out[57] |= ( in[101] & 0x03ffff ) << 2 ;
	out[58] |= ( in[102] & 0x03ffff ) << 2 ;
	out[59] |= ( in[103] & 0x03ffff ) << 2 ;

	out[56] |= in[104] << 20 ;
	out[57] |= in[105] << 20 ;
	out[58] |= in[106] << 20 ;
	out[59] |= in[107] << 20 ;

	out[60] = ( in[104] & 0x03ffff ) >> ( 32 - 20 ) ;
	out[61] = ( in[105] & 0x03ffff ) >> ( 32 - 20 ) ;
	out[62] = ( in[106] & 0x03ffff ) >> ( 32 - 20 ) ;
	out[63] = ( in[107] & 0x03ffff ) >> ( 32 - 20 ) ;

	out[60] |= ( in[108] & 0x03ffff ) << 6 ;
	out[61] |= ( in[109] & 0x03ffff ) << 6 ;
	out[62] |= ( in[110] & 0x03ffff ) << 6 ;
	out[63] |= ( in[111] & 0x03ffff ) << 6 ;

	out[60] |= in[112] << 24 ;
	out[61] |= in[113] << 24 ;
	out[62] |= in[114] << 24 ;
	out[63] |= in[115] << 24 ;

	out[64] = ( in[112] & 0x03ffff ) >> ( 32 - 24 ) ;
	out[65] = ( in[113] & 0x03ffff ) >> ( 32 - 24 ) ;
	out[66] = ( in[114] & 0x03ffff ) >> ( 32 - 24 ) ;
	out[67] = ( in[115] & 0x03ffff ) >> ( 32 - 24 ) ;

	out[64] |= ( in[116] & 0x03ffff ) << 10 ;
	out[65] |= ( in[117] & 0x03ffff ) << 10 ;
	out[66] |= ( in[118] & 0x03ffff ) << 10 ;
	out[67] |= ( in[119] & 0x03ffff ) << 10 ;

	out[64] |= in[120] << 28 ;
	out[65] |= in[121] << 28 ;
	out[66] |= in[122] << 28 ;
	out[67] |= in[123] << 28 ;

	out[68] = ( in[120] & 0x03ffff ) >> ( 32 - 28 ) ;
	out[69] = ( in[121] & 0x03ffff ) >> ( 32 - 28 ) ;
	out[70] = ( in[122] & 0x03ffff ) >> ( 32 - 28 ) ;
	out[71] = ( in[123] & 0x03ffff ) >> ( 32 - 28 ) ;

	out[68] |= in[124] << 14 ;
	out[69] |= in[125] << 14 ;
	out[70] |= in[126] << 14 ;
	out[71] |= in[127] << 14 ;
}


// 19-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c19(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x07ffff ) << 0 ;
	out[1] = ( in[1] & 0x07ffff ) << 0 ;
	out[2] = ( in[2] & 0x07ffff ) << 0 ;
	out[3] = ( in[3] & 0x07ffff ) << 0 ;

	out[0] |= in[4] << 19 ;
	out[1] |= in[5] << 19 ;
	out[2] |= in[6] << 19 ;
	out[3] |= in[7] << 19 ;

	out[4] = ( in[4] & 0x07ffff ) >> ( 32 - 19 ) ;
	out[5] = ( in[5] & 0x07ffff ) >> ( 32 - 19 ) ;
	out[6] = ( in[6] & 0x07ffff ) >> ( 32 - 19 ) ;
	out[7] = ( in[7] & 0x07ffff ) >> ( 32 - 19 ) ;

	out[4] |= ( in[8] & 0x07ffff ) << 6 ;
	out[5] |= ( in[9] & 0x07ffff ) << 6 ;
	out[6] |= ( in[10] & 0x07ffff ) << 6 ;
	out[7] |= ( in[11] & 0x07ffff ) << 6 ;

	out[4] |= in[12] << 25 ;
	out[5] |= in[13] << 25 ;
	out[6] |= in[14] << 25 ;
	out[7] |= in[15] << 25 ;

	out[8] = ( in[12] & 0x07ffff ) >> ( 32 - 25 ) ;
	out[9] = ( in[13] & 0x07ffff ) >> ( 32 - 25 ) ;
	out[10] = ( in[14] & 0x07ffff ) >> ( 32 - 25 ) ;
	out[11] = ( in[15] & 0x07ffff ) >> ( 32 - 25 ) ;

	out[8] |= ( in[16] & 0x07ffff ) << 12 ;
	out[9] |= ( in[17] & 0x07ffff ) << 12 ;
	out[10] |= ( in[18] & 0x07ffff ) << 12 ;
	out[11] |= ( in[19] & 0x07ffff ) << 12 ;

	out[8] |= in[20] << 31 ;
	out[9] |= in[21] << 31 ;
	out[10] |= in[22] << 31 ;
	out[11] |= in[23] << 31 ;

	out[12] = ( in[20] & 0x07ffff ) >> ( 32 - 31 ) ;
	out[13] = ( in[21] & 0x07ffff ) >> ( 32 - 31 ) ;
	out[14] = ( in[22] & 0x07ffff ) >> ( 32 - 31 ) ;
	out[15] = ( in[23] & 0x07ffff ) >> ( 32 - 31 ) ;

	out[12] |= in[24] << 18 ;
	out[13] |= in[25] << 18 ;
	out[14] |= in[26] << 18 ;
	out[15] |= in[27] << 18 ;

	out[16] = ( in[24] & 0x07ffff ) >> ( 32 - 18 ) ;
	out[17] = ( in[25] & 0x07ffff ) >> ( 32 - 18 ) ;
	out[18] = ( in[26] & 0x07ffff ) >> ( 32 - 18 ) ;
	out[19] = ( in[27] & 0x07ffff ) >> ( 32 - 18 ) ;

	out[16] |= ( in[28] & 0x07ffff ) << 5 ;
	out[17] |= ( in[29] & 0x07ffff ) << 5 ;
	out[18] |= ( in[30] & 0x07ffff ) << 5 ;
	out[19] |= ( in[31] & 0x07ffff ) << 5 ;

	out[16] |= in[32] << 24 ;
	out[17] |= in[33] << 24 ;
	out[18] |= in[34] << 24 ;
	out[19] |= in[35] << 24 ;

	out[20] = ( in[32] & 0x07ffff ) >> ( 32 - 24 ) ;
	out[21] = ( in[33] & 0x07ffff ) >> ( 32 - 24 ) ;
	out[22] = ( in[34] & 0x07ffff ) >> ( 32 - 24 ) ;
	out[23] = ( in[35] & 0x07ffff ) >> ( 32 - 24 ) ;

	out[20] |= ( in[36] & 0x07ffff ) << 11 ;
	out[21] |= ( in[37] & 0x07ffff ) << 11 ;
	out[22] |= ( in[38] & 0x07ffff ) << 11 ;
	out[23] |= ( in[39] & 0x07ffff ) << 11 ;

	out[20] |= in[40] << 30 ;
	out[21] |= in[41] << 30 ;
	out[22] |= in[42] << 30 ;
	out[23] |= in[43] << 30 ;

	out[24] = ( in[40] & 0x07ffff ) >> ( 32 - 30 ) ;
	out[25] = ( in[41] & 0x07ffff ) >> ( 32 - 30 ) ;
	out[26] = ( in[42] & 0x07ffff ) >> ( 32 - 30 ) ;
	out[27] = ( in[43] & 0x07ffff ) >> ( 32 - 30 ) ;

	out[24] |= in[44] << 17 ;
	out[25] |= in[45] << 17 ;
	out[26] |= in[46] << 17 ;
	out[27] |= in[47] << 17 ;

	out[28] = ( in[44] & 0x07ffff ) >> ( 32 - 17 ) ;
	out[29] = ( in[45] & 0x07ffff ) >> ( 32 - 17 ) ;
	out[30] = ( in[46] & 0x07ffff ) >> ( 32 - 17 ) ;
	out[31] = ( in[47] & 0x07ffff ) >> ( 32 - 17 ) ;

	out[28] |= ( in[48] & 0x07ffff ) << 4 ;
	out[29] |= ( in[49] & 0x07ffff ) << 4 ;
	out[30] |= ( in[50] & 0x07ffff ) << 4 ;
	out[31] |= ( in[51] & 0x07ffff ) << 4 ;

	out[28] |= in[52] << 23 ;
	out[29] |= in[53] << 23 ;
	out[30] |= in[54] << 23 ;
	out[31] |= in[55] << 23 ;

	out[32] = ( in[52] & 0x07ffff ) >> ( 32 - 23 ) ;
	out[33] = ( in[53] & 0x07ffff ) >> ( 32 - 23 ) ;
	out[34] = ( in[54] & 0x07ffff ) >> ( 32 - 23 ) ;
	out[35] = ( in[55] & 0x07ffff ) >> ( 32 - 23 ) ;

	out[32] |= ( in[56] & 0x07ffff ) << 10 ;
	out[33] |= ( in[57] & 0x07ffff ) << 10 ;
	out[34] |= ( in[58] & 0x07ffff ) << 10 ;
	out[35] |= ( in[59] & 0x07ffff ) << 10 ;

	out[32] |= in[60] << 29 ;
	out[33] |= in[61] << 29 ;
	out[34] |= in[62] << 29 ;
	out[35] |= in[63] << 29 ;

	out[36] = ( in[60] & 0x07ffff ) >> ( 32 - 29 ) ;
	out[37] = ( in[61] & 0x07ffff ) >> ( 32 - 29 ) ;
	out[38] = ( in[62] & 0x07ffff ) >> ( 32 - 29 ) ;
	out[39] = ( in[63] & 0x07ffff ) >> ( 32 - 29 ) ;

	out[36] |= in[64] << 16 ;
	out[37] |= in[65] << 16 ;
	out[38] |= in[66] << 16 ;
	out[39] |= in[67] << 16 ;

	out[40] = ( in[64] & 0x07ffff ) >> ( 32 - 16 ) ;
	out[41] = ( in[65] & 0x07ffff ) >> ( 32 - 16 ) ;
	out[42] = ( in[66] & 0x07ffff ) >> ( 32 - 16 ) ;
	out[43] = ( in[67] & 0x07ffff ) >> ( 32 - 16 ) ;

	out[40] |= ( in[68] & 0x07ffff ) << 3 ;
	out[41] |= ( in[69] & 0x07ffff ) << 3 ;
	out[42] |= ( in[70] & 0x07ffff ) << 3 ;
	out[43] |= ( in[71] & 0x07ffff ) << 3 ;

	out[40] |= in[72] << 22 ;
	out[41] |= in[73] << 22 ;
	out[42] |= in[74] << 22 ;
	out[43] |= in[75] << 22 ;

	out[44] = ( in[72] & 0x07ffff ) >> ( 32 - 22 ) ;
	out[45] = ( in[73] & 0x07ffff ) >> ( 32 - 22 ) ;
	out[46] = ( in[74] & 0x07ffff ) >> ( 32 - 22 ) ;
	out[47] = ( in[75] & 0x07ffff ) >> ( 32 - 22 ) ;

	out[44] |= ( in[76] & 0x07ffff ) << 9 ;
	out[45] |= ( in[77] & 0x07ffff ) << 9 ;
	out[46] |= ( in[78] & 0x07ffff ) << 9 ;
	out[47] |= ( in[79] & 0x07ffff ) << 9 ;

	out[44] |= in[80] << 28 ;
	out[45] |= in[81] << 28 ;
	out[46] |= in[82] << 28 ;
	out[47] |= in[83] << 28 ;

	out[48] = ( in[80] & 0x07ffff ) >> ( 32 - 28 ) ;
	out[49] = ( in[81] & 0x07ffff ) >> ( 32 - 28 ) ;
	out[50] = ( in[82] & 0x07ffff ) >> ( 32 - 28 ) ;
	out[51] = ( in[83] & 0x07ffff ) >> ( 32 - 28 ) ;

	out[48] |= in[84] << 15 ;
	out[49] |= in[85] << 15 ;
	out[50] |= in[86] << 15 ;
	out[51] |= in[87] << 15 ;

	out[52] = ( in[84] & 0x07ffff ) >> ( 32 - 15 ) ;
	out[53] = ( in[85] & 0x07ffff ) >> ( 32 - 15 ) ;
	out[54] = ( in[86] & 0x07ffff ) >> ( 32 - 15 ) ;
	out[55] = ( in[87] & 0x07ffff ) >> ( 32 - 15 ) ;

	out[52] |= ( in[88] & 0x07ffff ) << 2 ;
	out[53] |= ( in[89] & 0x07ffff ) << 2 ;
	out[54] |= ( in[90] & 0x07ffff ) << 2 ;
	out[55] |= ( in[91] & 0x07ffff ) << 2 ;

	out[52] |= in[92] << 21 ;
	out[53] |= in[93] << 21 ;
	out[54] |= in[94] << 21 ;
	out[55] |= in[95] << 21 ;

	out[56] = ( in[92] & 0x07ffff ) >> ( 32 - 21 ) ;
	out[57] = ( in[93] & 0x07ffff ) >> ( 32 - 21 ) ;
	out[58] = ( in[94] & 0x07ffff ) >> ( 32 - 21 ) ;
	out[59] = ( in[95] & 0x07ffff ) >> ( 32 - 21 ) ;

	out[56] |= ( in[96] & 0x07ffff ) << 8 ;
	out[57] |= ( in[97] & 0x07ffff ) << 8 ;
	out[58] |= ( in[98] & 0x07ffff ) << 8 ;
	out[59] |= ( in[99] & 0x07ffff ) << 8 ;

	out[56] |= in[100] << 27 ;
	out[57] |= in[101] << 27 ;
	out[58] |= in[102] << 27 ;
	out[59] |= in[103] << 27 ;

	out[60] = ( in[100] & 0x07ffff ) >> ( 32 - 27 ) ;
	out[61] = ( in[101] & 0x07ffff ) >> ( 32 - 27 ) ;
	out[62] = ( in[102] & 0x07ffff ) >> ( 32 - 27 ) ;
	out[63] = ( in[103] & 0x07ffff ) >> ( 32 - 27 ) ;

	out[60] |= in[104] << 14 ;
	out[61] |= in[105] << 14 ;
	out[62] |= in[106] << 14 ;
	out[63] |= in[107] << 14 ;

	out[64] = ( in[104] & 0x07ffff ) >> ( 32 - 14 ) ;
	out[65] = ( in[105] & 0x07ffff ) >> ( 32 - 14 ) ;
	out[66] = ( in[106] & 0x07ffff ) >> ( 32 - 14 ) ;
	out[67] = ( in[107] & 0x07ffff ) >> ( 32 - 14 ) ;

	out[64] |= ( in[108] & 0x07ffff ) << 1 ;
	out[65] |= ( in[109] & 0x07ffff ) << 1 ;
	out[66] |= ( in[110] & 0x07ffff ) << 1 ;
	out[67] |= ( in[111] & 0x07ffff ) << 1 ;

	out[64] |= in[112] << 20 ;
	out[65] |= in[113] << 20 ;
	out[66] |= in[114] << 20 ;
	out[67] |= in[115] << 20 ;

	out[68] = ( in[112] & 0x07ffff ) >> ( 32 - 20 ) ;
	out[69] = ( in[113] & 0x07ffff ) >> ( 32 - 20 ) ;
	out[70] = ( in[114] & 0x07ffff ) >> ( 32 - 20 ) ;
	out[71] = ( in[115] & 0x07ffff ) >> ( 32 - 20 ) ;

	out[68] |= ( in[116] & 0x07ffff ) << 7 ;
	out[69] |= ( in[117] & 0x07ffff ) << 7 ;
	out[70] |= ( in[118] & 0x07ffff ) << 7 ;
	out[71] |= ( in[119] & 0x07ffff ) << 7 ;

	out[68] |= in[120] << 26 ;
	out[69] |= in[121] << 26 ;
	out[70] |= in[122] << 26 ;
	out[71] |= in[123] << 26 ;

	out[72] = ( in[120] & 0x07ffff ) >> ( 32 - 26 ) ;
	out[73] = ( in[121] & 0x07ffff ) >> ( 32 - 26 ) ;
	out[74] = ( in[122] & 0x07ffff ) >> ( 32 - 26 ) ;
	out[75] = ( in[123] & 0x07ffff ) >> ( 32 - 26 ) ;

	out[72] |= in[124] << 13 ;
	out[73] |= in[125] << 13 ;
	out[74] |= in[126] << 13 ;
	out[75] |= in[127] << 13 ;
}


// 20-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c20(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x0fffff ) << 0 ;
	out[1] = ( in[1] & 0x0fffff ) << 0 ;
	out[2] = ( in[2] & 0x0fffff ) << 0 ;
	out[3] = ( in[3] & 0x0fffff ) << 0 ;

	out[0] |= in[4] << 20 ;
	out[1] |= in[5] << 20 ;
	out[2] |= in[6] << 20 ;
	out[3] |= in[7] << 20 ;

	out[4] = ( in[4] & 0x0fffff ) >> ( 32 - 20 ) ;
	out[5] = ( in[5] & 0x0fffff ) >> ( 32 - 20 ) ;
	out[6] = ( in[6] & 0x0fffff ) >> ( 32 - 20 ) ;
	out[7] = ( in[7] & 0x0fffff ) >> ( 32 - 20 ) ;

	out[4] |= ( in[8] & 0x0fffff ) << 8 ;
	out[5] |= ( in[9] & 0x0fffff ) << 8 ;
	out[6] |= ( in[10] & 0x0fffff ) << 8 ;
	out[7] |= ( in[11] & 0x0fffff ) << 8 ;

	out[4] |= in[12] << 28 ;
	out[5] |= in[13] << 28 ;
	out[6] |= in[14] << 28 ;
	out[7] |= in[15] << 28 ;

	out[8] = ( in[12] & 0x0fffff ) >> ( 32 - 28 ) ;
	out[9] = ( in[13] & 0x0fffff ) >> ( 32 - 28 ) ;
	out[10] = ( in[14] & 0x0fffff ) >> ( 32 - 28 ) ;
	out[11] = ( in[15] & 0x0fffff ) >> ( 32 - 28 ) ;

	out[8] |= in[16] << 16 ;
	out[9] |= in[17] << 16 ;
	out[10] |= in[18] << 16 ;
	out[11] |= in[19] << 16 ;

	out[12] = ( in[16] & 0x0fffff ) >> ( 32 - 16 ) ;
	out[13] = ( in[17] & 0x0fffff ) >> ( 32 - 16 ) ;
	out[14] = ( in[18] & 0x0fffff ) >> ( 32 - 16 ) ;
	out[15] = ( in[19] & 0x0fffff ) >> ( 32 - 16 ) ;

	out[12] |= ( in[20] & 0x0fffff ) << 4 ;
	out[13] |= ( in[21] & 0x0fffff ) << 4 ;
	out[14] |= ( in[22] & 0x0fffff ) << 4 ;
	out[15] |= ( in[23] & 0x0fffff ) << 4 ;

	out[12] |= in[24] << 24 ;
	out[13] |= in[25] << 24 ;
	out[14] |= in[26] << 24 ;
	out[15] |= in[27] << 24 ;

	out[16] = ( in[24] & 0x0fffff ) >> ( 32 - 24 ) ;
	out[17] = ( in[25] & 0x0fffff ) >> ( 32 - 24 ) ;
	out[18] = ( in[26] & 0x0fffff ) >> ( 32 - 24 ) ;
	out[19] = ( in[27] & 0x0fffff ) >> ( 32 - 24 ) ;

	out[16] |= in[28] << 12 ;
	out[17] |= in[29] << 12 ;
	out[18] |= in[30] << 12 ;
	out[19] |= in[31] << 12 ;

	out[20] = ( in[32] & 0x0fffff ) << 0 ;
	out[21] = ( in[33] & 0x0fffff ) << 0 ;
	out[22] = ( in[34] & 0x0fffff ) << 0 ;
	out[23] = ( in[35] & 0x0fffff ) << 0 ;

	out[20] |= in[36] << 20 ;
	out[21] |= in[37] << 20 ;
	out[22] |= in[38] << 20 ;
	out[23] |= in[39] << 20 ;

	out[24] = ( in[36] & 0x0fffff ) >> ( 32 - 20 ) ;
	out[25] = ( in[37] & 0x0fffff ) >> ( 32 - 20 ) ;
	out[26] = ( in[38] & 0x0fffff ) >> ( 32 - 20 ) ;
	out[27] = ( in[39] & 0x0fffff ) >> ( 32 - 20 ) ;

	out[24] |= ( in[40] & 0x0fffff ) << 8 ;
	out[25] |= ( in[41] & 0x0fffff ) << 8 ;
	out[26] |= ( in[42] & 0x0fffff ) << 8 ;
	out[27] |= ( in[43] & 0x0fffff ) << 8 ;

	out[24] |= in[44] << 28 ;
	out[25] |= in[45] << 28 ;
	out[26] |= in[46] << 28 ;
	out[27] |= in[47] << 28 ;

	out[28] = ( in[44] & 0x0fffff ) >> ( 32 - 28 ) ;
	out[29] = ( in[45] & 0x0fffff ) >> ( 32 - 28 ) ;
	out[30] = ( in[46] & 0x0fffff ) >> ( 32 - 28 ) ;
	out[31] = ( in[47] & 0x0fffff ) >> ( 32 - 28 ) ;

	out[28] |= in[48] << 16 ;
	out[29] |= in[49] << 16 ;
	out[30] |= in[50] << 16 ;
	out[31] |= in[51] << 16 ;

	out[32] = ( in[48] & 0x0fffff ) >> ( 32 - 16 ) ;
	out[33] = ( in[49] & 0x0fffff ) >> ( 32 - 16 ) ;
	out[34] = ( in[50] & 0x0fffff ) >> ( 32 - 16 ) ;
	out[35] = ( in[51] & 0x0fffff ) >> ( 32 - 16 ) ;

	out[32] |= ( in[52] & 0x0fffff ) << 4 ;
	out[33] |= ( in[53] & 0x0fffff ) << 4 ;
	out[34] |= ( in[54] & 0x0fffff ) << 4 ;
	out[35] |= ( in[55] & 0x0fffff ) << 4 ;

	out[32] |= in[56] << 24 ;
	out[33] |= in[57] << 24 ;
	out[34] |= in[58] << 24 ;
	out[35] |= in[59] << 24 ;

	out[36] = ( in[56] & 0x0fffff ) >> ( 32 - 24 ) ;
	out[37] = ( in[57] & 0x0fffff ) >> ( 32 - 24 ) ;
	out[38] = ( in[58] & 0x0fffff ) >> ( 32 - 24 ) ;
	out[39] = ( in[59] & 0x0fffff ) >> ( 32 - 24 ) ;

	out[36] |= in[60] << 12 ;
	out[37] |= in[61] << 12 ;
	out[38] |= in[62] << 12 ;
	out[39] |= in[63] << 12 ;

	out[40] = ( in[64] & 0x0fffff ) << 0 ;
	out[41] = ( in[65] & 0x0fffff ) << 0 ;
	out[42] = ( in[66] & 0x0fffff ) << 0 ;
	out[43] = ( in[67] & 0x0fffff ) << 0 ;

	out[40] |= in[68] << 20 ;
	out[41] |= in[69] << 20 ;
	out[42] |= in[70] << 20 ;
	out[43] |= in[71] << 20 ;

	out[44] = ( in[68] & 0x0fffff ) >> ( 32 - 20 ) ;
	out[45] = ( in[69] & 0x0fffff ) >> ( 32 - 20 ) ;
	out[46] = ( in[70] & 0x0fffff ) >> ( 32 - 20 ) ;
	out[47] = ( in[71] & 0x0fffff ) >> ( 32 - 20 ) ;

	out[44] |= ( in[72] & 0x0fffff ) << 8 ;
	out[45] |= ( in[73] & 0x0fffff ) << 8 ;
	out[46] |= ( in[74] & 0x0fffff ) << 8 ;
	out[47] |= ( in[75] & 0x0fffff ) << 8 ;

	out[44] |= in[76] << 28 ;
	out[45] |= in[77] << 28 ;
	out[46] |= in[78] << 28 ;
	out[47] |= in[79] << 28 ;

	out[48] = ( in[76] & 0x0fffff ) >> ( 32 - 28 ) ;
	out[49] = ( in[77] & 0x0fffff ) >> ( 32 - 28 ) ;
	out[50] = ( in[78] & 0x0fffff ) >> ( 32 - 28 ) ;
	out[51] = ( in[79] & 0x0fffff ) >> ( 32 - 28 ) ;

	out[48] |= in[80] << 16 ;
	out[49] |= in[81] << 16 ;
	out[50] |= in[82] << 16 ;
	out[51] |= in[83] << 16 ;

	out[52] = ( in[80] & 0x0fffff ) >> ( 32 - 16 ) ;
	out[53] = ( in[81] & 0x0fffff ) >> ( 32 - 16 ) ;
	out[54] = ( in[82] & 0x0fffff ) >> ( 32 - 16 ) ;
	out[55] = ( in[83] & 0x0fffff ) >> ( 32 - 16 ) ;

	out[52] |= ( in[84] & 0x0fffff ) << 4 ;
	out[53] |= ( in[85] & 0x0fffff ) << 4 ;
	out[54] |= ( in[86] & 0x0fffff ) << 4 ;
	out[55] |= ( in[87] & 0x0fffff ) << 4 ;

	out[52] |= in[88] << 24 ;
	out[53] |= in[89] << 24 ;
	out[54] |= in[90] << 24 ;
	out[55] |= in[91] << 24 ;

	out[56] = ( in[88] & 0x0fffff ) >> ( 32 - 24 ) ;
	out[57] = ( in[89] & 0x0fffff ) >> ( 32 - 24 ) ;
	out[58] = ( in[90] & 0x0fffff ) >> ( 32 - 24 ) ;
	out[59] = ( in[91] & 0x0fffff ) >> ( 32 - 24 ) ;

	out[56] |= in[92] << 12 ;
	out[57] |= in[93] << 12 ;
	out[58] |= in[94] << 12 ;
	out[59] |= in[95] << 12 ;

	out[60] = ( in[96] & 0x0fffff ) << 0 ;
	out[61] = ( in[97] & 0x0fffff ) << 0 ;
	out[62] = ( in[98] & 0x0fffff ) << 0 ;
	out[63] = ( in[99] & 0x0fffff ) << 0 ;

	out[60] |= in[100] << 20 ;
	out[61] |= in[101] << 20 ;
	out[62] |= in[102] << 20 ;
	out[63] |= in[103] << 20 ;

	out[64] = ( in[100] & 0x0fffff ) >> ( 32 - 20 ) ;
	out[65] = ( in[101] & 0x0fffff ) >> ( 32 - 20 ) ;
	out[66] = ( in[102] & 0x0fffff ) >> ( 32 - 20 ) ;
	out[67] = ( in[103] & 0x0fffff ) >> ( 32 - 20 ) ;

	out[64] |= ( in[104] & 0x0fffff ) << 8 ;
	out[65] |= ( in[105] & 0x0fffff ) << 8 ;
	out[66] |= ( in[106] & 0x0fffff ) << 8 ;
	out[67] |= ( in[107] & 0x0fffff ) << 8 ;

	out[64] |= in[108] << 28 ;
	out[65] |= in[109] << 28 ;
	out[66] |= in[110] << 28 ;
	out[67] |= in[111] << 28 ;

	out[68] = ( in[108] & 0x0fffff ) >> ( 32 - 28 ) ;
	out[69] = ( in[109] & 0x0fffff ) >> ( 32 - 28 ) ;
	out[70] = ( in[110] & 0x0fffff ) >> ( 32 - 28 ) ;
	out[71] = ( in[111] & 0x0fffff ) >> ( 32 - 28 ) ;

	out[68] |= in[112] << 16 ;
	out[69] |= in[113] << 16 ;
	out[70] |= in[114] << 16 ;
	out[71] |= in[115] << 16 ;

	out[72] = ( in[112] & 0x0fffff ) >> ( 32 - 16 ) ;
	out[73] = ( in[113] & 0x0fffff ) >> ( 32 - 16 ) ;
	out[74] = ( in[114] & 0x0fffff ) >> ( 32 - 16 ) ;
	out[75] = ( in[115] & 0x0fffff ) >> ( 32 - 16 ) ;

	out[72] |= ( in[116] & 0x0fffff ) << 4 ;
	out[73] |= ( in[117] & 0x0fffff ) << 4 ;
	out[74] |= ( in[118] & 0x0fffff ) << 4 ;
	out[75] |= ( in[119] & 0x0fffff ) << 4 ;

	out[72] |= in[120] << 24 ;
	out[73] |= in[121] << 24 ;
	out[74] |= in[122] << 24 ;
	out[75] |= in[123] << 24 ;

	out[76] = ( in[120] & 0x0fffff ) >> ( 32 - 24 ) ;
	out[77] = ( in[121] & 0x0fffff ) >> ( 32 - 24 ) ;
	out[78] = ( in[122] & 0x0fffff ) >> ( 32 - 24 ) ;
	out[79] = ( in[123] & 0x0fffff ) >> ( 32 - 24 ) ;

	out[76] |= in[124] << 12 ;
	out[77] |= in[125] << 12 ;
	out[78] |= in[126] << 12 ;
	out[79] |= in[127] << 12 ;
}


// 21-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c21(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x1fffff ) << 0 ;
	out[1] = ( in[1] & 0x1fffff ) << 0 ;
	out[2] = ( in[2] & 0x1fffff ) << 0 ;
	out[3] = ( in[3] & 0x1fffff ) << 0 ;

	out[0] |= in[4] << 21 ;
	out[1] |= in[5] << 21 ;
	out[2] |= in[6] << 21 ;
	out[3] |= in[7] << 21 ;

	out[4] = ( in[4] & 0x1fffff ) >> ( 32 - 21 ) ;
	out[5] = ( in[5] & 0x1fffff ) >> ( 32 - 21 ) ;
	out[6] = ( in[6] & 0x1fffff ) >> ( 32 - 21 ) ;
	out[7] = ( in[7] & 0x1fffff ) >> ( 32 - 21 ) ;

	out[4] |= ( in[8] & 0x1fffff ) << 10 ;
	out[5] |= ( in[9] & 0x1fffff ) << 10 ;
	out[6] |= ( in[10] & 0x1fffff ) << 10 ;
	out[7] |= ( in[11] & 0x1fffff ) << 10 ;

	out[4] |= in[12] << 31 ;
	out[5] |= in[13] << 31 ;
	out[6] |= in[14] << 31 ;
	out[7] |= in[15] << 31 ;

	out[8] = ( in[12] & 0x1fffff ) >> ( 32 - 31 ) ;
	out[9] = ( in[13] & 0x1fffff ) >> ( 32 - 31 ) ;
	out[10] = ( in[14] & 0x1fffff ) >> ( 32 - 31 ) ;
	out[11] = ( in[15] & 0x1fffff ) >> ( 32 - 31 ) ;

	out[8] |= in[16] << 20 ;
	out[9] |= in[17] << 20 ;
	out[10] |= in[18] << 20 ;
	out[11] |= in[19] << 20 ;

	out[12] = ( in[16] & 0x1fffff ) >> ( 32 - 20 ) ;
	out[13] = ( in[17] & 0x1fffff ) >> ( 32 - 20 ) ;
	out[14] = ( in[18] & 0x1fffff ) >> ( 32 - 20 ) ;
	out[15] = ( in[19] & 0x1fffff ) >> ( 32 - 20 ) ;

	out[12] |= ( in[20] & 0x1fffff ) << 9 ;
	out[13] |= ( in[21] & 0x1fffff ) << 9 ;
	out[14] |= ( in[22] & 0x1fffff ) << 9 ;
	out[15] |= ( in[23] & 0x1fffff ) << 9 ;

	out[12] |= in[24] << 30 ;
	out[13] |= in[25] << 30 ;
	out[14] |= in[26] << 30 ;
	out[15] |= in[27] << 30 ;

	out[16] = ( in[24] & 0x1fffff ) >> ( 32 - 30 ) ;
	out[17] = ( in[25] & 0x1fffff ) >> ( 32 - 30 ) ;
	out[18] = ( in[26] & 0x1fffff ) >> ( 32 - 30 ) ;
	out[19] = ( in[27] & 0x1fffff ) >> ( 32 - 30 ) ;

	out[16] |= in[28] << 19 ;
	out[17] |= in[29] << 19 ;
	out[18] |= in[30] << 19 ;
	out[19] |= in[31] << 19 ;

	out[20] = ( in[28] & 0x1fffff ) >> ( 32 - 19 ) ;
	out[21] = ( in[29] & 0x1fffff ) >> ( 32 - 19 ) ;
	out[22] = ( in[30] & 0x1fffff ) >> ( 32 - 19 ) ;
	out[23] = ( in[31] & 0x1fffff ) >> ( 32 - 19 ) ;

	out[20] |= ( in[32] & 0x1fffff ) << 8 ;
	out[21] |= ( in[33] & 0x1fffff ) << 8 ;
	out[22] |= ( in[34] & 0x1fffff ) << 8 ;
	out[23] |= ( in[35] & 0x1fffff ) << 8 ;

	out[20] |= in[36] << 29 ;
	out[21] |= in[37] << 29 ;
	out[22] |= in[38] << 29 ;
	out[23] |= in[39] << 29 ;

	out[24] = ( in[36] & 0x1fffff ) >> ( 32 - 29 ) ;
	out[25] = ( in[37] & 0x1fffff ) >> ( 32 - 29 ) ;
	out[26] = ( in[38] & 0x1fffff ) >> ( 32 - 29 ) ;
	out[27] = ( in[39] & 0x1fffff ) >> ( 32 - 29 ) ;

	out[24] |= in[40] << 18 ;
	out[25] |= in[41] << 18 ;
	out[26] |= in[42] << 18 ;
	out[27] |= in[43] << 18 ;

	out[28] = ( in[40] & 0x1fffff ) >> ( 32 - 18 ) ;
	out[29] = ( in[41] & 0x1fffff ) >> ( 32 - 18 ) ;
	out[30] = ( in[42] & 0x1fffff ) >> ( 32 - 18 ) ;
	out[31] = ( in[43] & 0x1fffff ) >> ( 32 - 18 ) ;

	out[28] |= ( in[44] & 0x1fffff ) << 7 ;
	out[29] |= ( in[45] & 0x1fffff ) << 7 ;
	out[30] |= ( in[46] & 0x1fffff ) << 7 ;
	out[31] |= ( in[47] & 0x1fffff ) << 7 ;

	out[28] |= in[48] << 28 ;
	out[29] |= in[49] << 28 ;
	out[30] |= in[50] << 28 ;
	out[31] |= in[51] << 28 ;

	out[32] = ( in[48] & 0x1fffff ) >> ( 32 - 28 ) ;
	out[33] = ( in[49] & 0x1fffff ) >> ( 32 - 28 ) ;
	out[34] = ( in[50] & 0x1fffff ) >> ( 32 - 28 ) ;
	out[35] = ( in[51] & 0x1fffff ) >> ( 32 - 28 ) ;

	out[32] |= in[52] << 17 ;
	out[33] |= in[53] << 17 ;
	out[34] |= in[54] << 17 ;
	out[35] |= in[55] << 17 ;

	out[36] = ( in[52] & 0x1fffff ) >> ( 32 - 17 ) ;
	out[37] = ( in[53] & 0x1fffff ) >> ( 32 - 17 ) ;
	out[38] = ( in[54] & 0x1fffff ) >> ( 32 - 17 ) ;
	out[39] = ( in[55] & 0x1fffff ) >> ( 32 - 17 ) ;

	out[36] |= ( in[56] & 0x1fffff ) << 6 ;
	out[37] |= ( in[57] & 0x1fffff ) << 6 ;
	out[38] |= ( in[58] & 0x1fffff ) << 6 ;
	out[39] |= ( in[59] & 0x1fffff ) << 6 ;

	out[36] |= in[60] << 27 ;
	out[37] |= in[61] << 27 ;
	out[38] |= in[62] << 27 ;
	out[39] |= in[63] << 27 ;

	out[40] = ( in[60] & 0x1fffff ) >> ( 32 - 27 ) ;
	out[41] = ( in[61] & 0x1fffff ) >> ( 32 - 27 ) ;
	out[42] = ( in[62] & 0x1fffff ) >> ( 32 - 27 ) ;
	out[43] = ( in[63] & 0x1fffff ) >> ( 32 - 27 ) ;

	out[40] |= in[64] << 16 ;
	out[41] |= in[65] << 16 ;
	out[42] |= in[66] << 16 ;
	out[43] |= in[67] << 16 ;

	out[44] = ( in[64] & 0x1fffff ) >> ( 32 - 16 ) ;
	out[45] = ( in[65] & 0x1fffff ) >> ( 32 - 16 ) ;
	out[46] = ( in[66] & 0x1fffff ) >> ( 32 - 16 ) ;
	out[47] = ( in[67] & 0x1fffff ) >> ( 32 - 16 ) ;

	out[44] |= ( in[68] & 0x1fffff ) << 5 ;
	out[45] |= ( in[69] & 0x1fffff ) << 5 ;
	out[46] |= ( in[70] & 0x1fffff ) << 5 ;
	out[47] |= ( in[71] & 0x1fffff ) << 5 ;

	out[44] |= in[72] << 26 ;
	out[45] |= in[73] << 26 ;
	out[46] |= in[74] << 26 ;
	out[47] |= in[75] << 26 ;

	out[48] = ( in[72] & 0x1fffff ) >> ( 32 - 26 ) ;
	out[49] = ( in[73] & 0x1fffff ) >> ( 32 - 26 ) ;
	out[50] = ( in[74] & 0x1fffff ) >> ( 32 - 26 ) ;
	out[51] = ( in[75] & 0x1fffff ) >> ( 32 - 26 ) ;

	out[48] |= in[76] << 15 ;
	out[49] |= in[77] << 15 ;
	out[50] |= in[78] << 15 ;
	out[51] |= in[79] << 15 ;

	out[52] = ( in[76] & 0x1fffff ) >> ( 32 - 15 ) ;
	out[53] = ( in[77] & 0x1fffff ) >> ( 32 - 15 ) ;
	out[54] = ( in[78] & 0x1fffff ) >> ( 32 - 15 ) ;
	out[55] = ( in[79] & 0x1fffff ) >> ( 32 - 15 ) ;

	out[52] |= ( in[80] & 0x1fffff ) << 4 ;
	out[53] |= ( in[81] & 0x1fffff ) << 4 ;
	out[54] |= ( in[82] & 0x1fffff ) << 4 ;
	out[55] |= ( in[83] & 0x1fffff ) << 4 ;

	out[52] |= in[84] << 25 ;
	out[53] |= in[85] << 25 ;
	out[54] |= in[86] << 25 ;
	out[55] |= in[87] << 25 ;

	out[56] = ( in[84] & 0x1fffff ) >> ( 32 - 25 ) ;
	out[57] = ( in[85] & 0x1fffff ) >> ( 32 - 25 ) ;
	out[58] = ( in[86] & 0x1fffff ) >> ( 32 - 25 ) ;
	out[59] = ( in[87] & 0x1fffff ) >> ( 32 - 25 ) ;

	out[56] |= in[88] << 14 ;
	out[57] |= in[89] << 14 ;
	out[58] |= in[90] << 14 ;
	out[59] |= in[91] << 14 ;

	out[60] = ( in[88] & 0x1fffff ) >> ( 32 - 14 ) ;
	out[61] = ( in[89] & 0x1fffff ) >> ( 32 - 14 ) ;
	out[62] = ( in[90] & 0x1fffff ) >> ( 32 - 14 ) ;
	out[63] = ( in[91] & 0x1fffff ) >> ( 32 - 14 ) ;

	out[60] |= ( in[92] & 0x1fffff ) << 3 ;
	out[61] |= ( in[93] & 0x1fffff ) << 3 ;
	out[62] |= ( in[94] & 0x1fffff ) << 3 ;
	out[63] |= ( in[95] & 0x1fffff ) << 3 ;

	out[60] |= in[96] << 24 ;
	out[61] |= in[97] << 24 ;
	out[62] |= in[98] << 24 ;
	out[63] |= in[99] << 24 ;

	out[64] = ( in[96] & 0x1fffff ) >> ( 32 - 24 ) ;
	out[65] = ( in[97] & 0x1fffff ) >> ( 32 - 24 ) ;
	out[66] = ( in[98] & 0x1fffff ) >> ( 32 - 24 ) ;
	out[67] = ( in[99] & 0x1fffff ) >> ( 32 - 24 ) ;

	out[64] |= in[100] << 13 ;
	out[65] |= in[101] << 13 ;
	out[66] |= in[102] << 13 ;
	out[67] |= in[103] << 13 ;

	out[68] = ( in[100] & 0x1fffff ) >> ( 32 - 13 ) ;
	out[69] = ( in[101] & 0x1fffff ) >> ( 32 - 13 ) ;
	out[70] = ( in[102] & 0x1fffff ) >> ( 32 - 13 ) ;
	out[71] = ( in[103] & 0x1fffff ) >> ( 32 - 13 ) ;

	out[68] |= ( in[104] & 0x1fffff ) << 2 ;
	out[69] |= ( in[105] & 0x1fffff ) << 2 ;
	out[70] |= ( in[106] & 0x1fffff ) << 2 ;
	out[71] |= ( in[107] & 0x1fffff ) << 2 ;

	out[68] |= in[108] << 23 ;
	out[69] |= in[109] << 23 ;
	out[70] |= in[110] << 23 ;
	out[71] |= in[111] << 23 ;

	out[72] = ( in[108] & 0x1fffff ) >> ( 32 - 23 ) ;
	out[73] = ( in[109] & 0x1fffff ) >> ( 32 - 23 ) ;
	out[74] = ( in[110] & 0x1fffff ) >> ( 32 - 23 ) ;
	out[75] = ( in[111] & 0x1fffff ) >> ( 32 - 23 ) ;

	out[72] |= in[112] << 12 ;
	out[73] |= in[113] << 12 ;
	out[74] |= in[114] << 12 ;
	out[75] |= in[115] << 12 ;

	out[76] = ( in[112] & 0x1fffff ) >> ( 32 - 12 ) ;
	out[77] = ( in[113] & 0x1fffff ) >> ( 32 - 12 ) ;
	out[78] = ( in[114] & 0x1fffff ) >> ( 32 - 12 ) ;
	out[79] = ( in[115] & 0x1fffff ) >> ( 32 - 12 ) ;

	out[76] |= ( in[116] & 0x1fffff ) << 1 ;
	out[77] |= ( in[117] & 0x1fffff ) << 1 ;
	out[78] |= ( in[118] & 0x1fffff ) << 1 ;
	out[79] |= ( in[119] & 0x1fffff ) << 1 ;

	out[76] |= in[120] << 22 ;
	out[77] |= in[121] << 22 ;
	out[78] |= in[122] << 22 ;
	out[79] |= in[123] << 22 ;

	out[80] = ( in[120] & 0x1fffff ) >> ( 32 - 22 ) ;
	out[81] = ( in[121] & 0x1fffff ) >> ( 32 - 22 ) ;
	out[82] = ( in[122] & 0x1fffff ) >> ( 32 - 22 ) ;
	out[83] = ( in[123] & 0x1fffff ) >> ( 32 - 22 ) ;

	out[80] |= in[124] << 11 ;
	out[81] |= in[125] << 11 ;
	out[82] |= in[126] << 11 ;
	out[83] |= in[127] << 11 ;
}


// 22-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c22(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x3fffff ) << 0 ;
	out[1] = ( in[1] & 0x3fffff ) << 0 ;
	out[2] = ( in[2] & 0x3fffff ) << 0 ;
	out[3] = ( in[3] & 0x3fffff ) << 0 ;

	out[0] |= in[4] << 22 ;
	out[1] |= in[5] << 22 ;
	out[2] |= in[6] << 22 ;
	out[3] |= in[7] << 22 ;

	out[4] = ( in[4] & 0x3fffff ) >> ( 32 - 22 ) ;
	out[5] = ( in[5] & 0x3fffff ) >> ( 32 - 22 ) ;
	out[6] = ( in[6] & 0x3fffff ) >> ( 32 - 22 ) ;
	out[7] = ( in[7] & 0x3fffff ) >> ( 32 - 22 ) ;

	out[4] |= in[8] << 12 ;
	out[5] |= in[9] << 12 ;
	out[6] |= in[10] << 12 ;
	out[7] |= in[11] << 12 ;

	out[8] = ( in[8] & 0x3fffff ) >> ( 32 - 12 ) ;
	out[9] = ( in[9] & 0x3fffff ) >> ( 32 - 12 ) ;
	out[10] = ( in[10] & 0x3fffff ) >> ( 32 - 12 ) ;
	out[11] = ( in[11] & 0x3fffff ) >> ( 32 - 12 ) ;

	out[8] |= ( in[12] & 0x3fffff ) << 2 ;
	out[9] |= ( in[13] & 0x3fffff ) << 2 ;
	out[10] |= ( in[14] & 0x3fffff ) << 2 ;
	out[11] |= ( in[15] & 0x3fffff ) << 2 ;

	out[8] |= in[16] << 24 ;
	out[9] |= in[17] << 24 ;
	out[10] |= in[18] << 24 ;
	out[11] |= in[19] << 24 ;

	out[12] = ( in[16] & 0x3fffff ) >> ( 32 - 24 ) ;
	out[13] = ( in[17] & 0x3fffff ) >> ( 32 - 24 ) ;
	out[14] = ( in[18] & 0x3fffff ) >> ( 32 - 24 ) ;
	out[15] = ( in[19] & 0x3fffff ) >> ( 32 - 24 ) ;

	out[12] |= in[20] << 14 ;
	out[13] |= in[21] << 14 ;
	out[14] |= in[22] << 14 ;
	out[15] |= in[23] << 14 ;

	out[16] = ( in[20] & 0x3fffff ) >> ( 32 - 14 ) ;
	out[17] = ( in[21] & 0x3fffff ) >> ( 32 - 14 ) ;
	out[18] = ( in[22] & 0x3fffff ) >> ( 32 - 14 ) ;
	out[19] = ( in[23] & 0x3fffff ) >> ( 32 - 14 ) ;

	out[16] |= ( in[24] & 0x3fffff ) << 4 ;
	out[17] |= ( in[25] & 0x3fffff ) << 4 ;
	out[18] |= ( in[26] & 0x3fffff ) << 4 ;
	out[19] |= ( in[27] & 0x3fffff ) << 4 ;

	out[16] |= in[28] << 26 ;
	out[17] |= in[29] << 26 ;
	out[18] |= in[30] << 26 ;
	out[19] |= in[31] << 26 ;

	out[20] = ( in[28] & 0x3fffff ) >> ( 32 - 26 ) ;
	out[21] = ( in[29] & 0x3fffff ) >> ( 32 - 26 ) ;
	out[22] = ( in[30] & 0x3fffff ) >> ( 32 - 26 ) ;
	out[23] = ( in[31] & 0x3fffff ) >> ( 32 - 26 ) ;

	out[20] |= in[32] << 16 ;
	out[21] |= in[33] << 16 ;
	out[22] |= in[34] << 16 ;
	out[23] |= in[35] << 16 ;

	out[24] = ( in[32] & 0x3fffff ) >> ( 32 - 16 ) ;
	out[25] = ( in[33] & 0x3fffff ) >> ( 32 - 16 ) ;
	out[26] = ( in[34] & 0x3fffff ) >> ( 32 - 16 ) ;
	out[27] = ( in[35] & 0x3fffff ) >> ( 32 - 16 ) ;

	out[24] |= ( in[36] & 0x3fffff ) << 6 ;
	out[25] |= ( in[37] & 0x3fffff ) << 6 ;
	out[26] |= ( in[38] & 0x3fffff ) << 6 ;
	out[27] |= ( in[39] & 0x3fffff ) << 6 ;

	out[24] |= in[40] << 28 ;
	out[25] |= in[41] << 28 ;
	out[26] |= in[42] << 28 ;
	out[27] |= in[43] << 28 ;

	out[28] = ( in[40] & 0x3fffff ) >> ( 32 - 28 ) ;
	out[29] = ( in[41] & 0x3fffff ) >> ( 32 - 28 ) ;
	out[30] = ( in[42] & 0x3fffff ) >> ( 32 - 28 ) ;
	out[31] = ( in[43] & 0x3fffff ) >> ( 32 - 28 ) ;

	out[28] |= in[44] << 18 ;
	out[29] |= in[45] << 18 ;
	out[30] |= in[46] << 18 ;
	out[31] |= in[47] << 18 ;

	out[32] = ( in[44] & 0x3fffff ) >> ( 32 - 18 ) ;
	out[33] = ( in[45] & 0x3fffff ) >> ( 32 - 18 ) ;
	out[34] = ( in[46] & 0x3fffff ) >> ( 32 - 18 ) ;
	out[35] = ( in[47] & 0x3fffff ) >> ( 32 - 18 ) ;

	out[32] |= ( in[48] & 0x3fffff ) << 8 ;
	out[33] |= ( in[49] & 0x3fffff ) << 8 ;
	out[34] |= ( in[50] & 0x3fffff ) << 8 ;
	out[35] |= ( in[51] & 0x3fffff ) << 8 ;

	out[32] |= in[52] << 30 ;
	out[33] |= in[53] << 30 ;
	out[34] |= in[54] << 30 ;
	out[35] |= in[55] << 30 ;

	out[36] = ( in[52] & 0x3fffff ) >> ( 32 - 30 ) ;
	out[37] = ( in[53] & 0x3fffff ) >> ( 32 - 30 ) ;
	out[38] = ( in[54] & 0x3fffff ) >> ( 32 - 30 ) ;
	out[39] = ( in[55] & 0x3fffff ) >> ( 32 - 30 ) ;

	out[36] |= in[56] << 20 ;
	out[37] |= in[57] << 20 ;
	out[38] |= in[58] << 20 ;
	out[39] |= in[59] << 20 ;

	out[40] = ( in[56] & 0x3fffff ) >> ( 32 - 20 ) ;
	out[41] = ( in[57] & 0x3fffff ) >> ( 32 - 20 ) ;
	out[42] = ( in[58] & 0x3fffff ) >> ( 32 - 20 ) ;
	out[43] = ( in[59] & 0x3fffff ) >> ( 32 - 20 ) ;

	out[40] |= in[60] << 10 ;
	out[41] |= in[61] << 10 ;
	out[42] |= in[62] << 10 ;
	out[43] |= in[63] << 10 ;

	out[44] = ( in[64] & 0x3fffff ) << 0 ;
	out[45] = ( in[65] & 0x3fffff ) << 0 ;
	out[46] = ( in[66] & 0x3fffff ) << 0 ;
	out[47] = ( in[67] & 0x3fffff ) << 0 ;

	out[44] |= in[68] << 22 ;
	out[45] |= in[69] << 22 ;
	out[46] |= in[70] << 22 ;
	out[47] |= in[71] << 22 ;

	out[48] = ( in[68] & 0x3fffff ) >> ( 32 - 22 ) ;
	out[49] = ( in[69] & 0x3fffff ) >> ( 32 - 22 ) ;
	out[50] = ( in[70] & 0x3fffff ) >> ( 32 - 22 ) ;
	out[51] = ( in[71] & 0x3fffff ) >> ( 32 - 22 ) ;

	out[48] |= in[72] << 12 ;
	out[49] |= in[73] << 12 ;
	out[50] |= in[74] << 12 ;
	out[51] |= in[75] << 12 ;

	out[52] = ( in[72] & 0x3fffff ) >> ( 32 - 12 ) ;
	out[53] = ( in[73] & 0x3fffff ) >> ( 32 - 12 ) ;
	out[54] = ( in[74] & 0x3fffff ) >> ( 32 - 12 ) ;
	out[55] = ( in[75] & 0x3fffff ) >> ( 32 - 12 ) ;

	out[52] |= ( in[76] & 0x3fffff ) << 2 ;
	out[53] |= ( in[77] & 0x3fffff ) << 2 ;
	out[54] |= ( in[78] & 0x3fffff ) << 2 ;
	out[55] |= ( in[79] & 0x3fffff ) << 2 ;

	out[52] |= in[80] << 24 ;
	out[53] |= in[81] << 24 ;
	out[54] |= in[82] << 24 ;
	out[55] |= in[83] << 24 ;

	out[56] = ( in[80] & 0x3fffff ) >> ( 32 - 24 ) ;
	out[57] = ( in[81] & 0x3fffff ) >> ( 32 - 24 ) ;
	out[58] = ( in[82] & 0x3fffff ) >> ( 32 - 24 ) ;
	out[59] = ( in[83] & 0x3fffff ) >> ( 32 - 24 ) ;

	out[56] |= in[84] << 14 ;
	out[57] |= in[85] << 14 ;
	out[58] |= in[86] << 14 ;
	out[59] |= in[87] << 14 ;

	out[60] = ( in[84] & 0x3fffff ) >> ( 32 - 14 ) ;
	out[61] = ( in[85] & 0x3fffff ) >> ( 32 - 14 ) ;
	out[62] = ( in[86] & 0x3fffff ) >> ( 32 - 14 ) ;
	out[63] = ( in[87] & 0x3fffff ) >> ( 32 - 14 ) ;

	out[60] |= ( in[88] & 0x3fffff ) << 4 ;
	out[61] |= ( in[89] & 0x3fffff ) << 4 ;
	out[62] |= ( in[90] & 0x3fffff ) << 4 ;
	out[63] |= ( in[91] & 0x3fffff ) << 4 ;

	out[60] |= in[92] << 26 ;
	out[61] |= in[93] << 26 ;
	out[62] |= in[94] << 26 ;
	out[63] |= in[95] << 26 ;

	out[64] = ( in[92] & 0x3fffff ) >> ( 32 - 26 ) ;
	out[65] = ( in[93] & 0x3fffff ) >> ( 32 - 26 ) ;
	out[66] = ( in[94] & 0x3fffff ) >> ( 32 - 26 ) ;
	out[67] = ( in[95] & 0x3fffff ) >> ( 32 - 26 ) ;

	out[64] |= in[96] << 16 ;
	out[65] |= in[97] << 16 ;
	out[66] |= in[98] << 16 ;
	out[67] |= in[99] << 16 ;

	out[68] = ( in[96] & 0x3fffff ) >> ( 32 - 16 ) ;
	out[69] = ( in[97] & 0x3fffff ) >> ( 32 - 16 ) ;
	out[70] = ( in[98] & 0x3fffff ) >> ( 32 - 16 ) ;
	out[71] = ( in[99] & 0x3fffff ) >> ( 32 - 16 ) ;

	out[68] |= ( in[100] & 0x3fffff ) << 6 ;
	out[69] |= ( in[101] & 0x3fffff ) << 6 ;
	out[70] |= ( in[102] & 0x3fffff ) << 6 ;
	out[71] |= ( in[103] & 0x3fffff ) << 6 ;

	out[68] |= in[104] << 28 ;
	out[69] |= in[105] << 28 ;
	out[70] |= in[106] << 28 ;
	out[71] |= in[107] << 28 ;

	out[72] = ( in[104] & 0x3fffff ) >> ( 32 - 28 ) ;
	out[73] = ( in[105] & 0x3fffff ) >> ( 32 - 28 ) ;
	out[74] = ( in[106] & 0x3fffff ) >> ( 32 - 28 ) ;
	out[75] = ( in[107] & 0x3fffff ) >> ( 32 - 28 ) ;

	out[72] |= in[108] << 18 ;
	out[73] |= in[109] << 18 ;
	out[74] |= in[110] << 18 ;
	out[75] |= in[111] << 18 ;

	out[76] = ( in[108] & 0x3fffff ) >> ( 32 - 18 ) ;
	out[77] = ( in[109] & 0x3fffff ) >> ( 32 - 18 ) ;
	out[78] = ( in[110] & 0x3fffff ) >> ( 32 - 18 ) ;
	out[79] = ( in[111] & 0x3fffff ) >> ( 32 - 18 ) ;

	out[76] |= ( in[112] & 0x3fffff ) << 8 ;
	out[77] |= ( in[113] & 0x3fffff ) << 8 ;
	out[78] |= ( in[114] & 0x3fffff ) << 8 ;
	out[79] |= ( in[115] & 0x3fffff ) << 8 ;

	out[76] |= in[116] << 30 ;
	out[77] |= in[117] << 30 ;
	out[78] |= in[118] << 30 ;
	out[79] |= in[119] << 30 ;

	out[80] = ( in[116] & 0x3fffff ) >> ( 32 - 30 ) ;
	out[81] = ( in[117] & 0x3fffff ) >> ( 32 - 30 ) ;
	out[82] = ( in[118] & 0x3fffff ) >> ( 32 - 30 ) ;
	out[83] = ( in[119] & 0x3fffff ) >> ( 32 - 30 ) ;

	out[80] |= in[120] << 20 ;
	out[81] |= in[121] << 20 ;
	out[82] |= in[122] << 20 ;
	out[83] |= in[123] << 20 ;

	out[84] = ( in[120] & 0x3fffff ) >> ( 32 - 20 ) ;
	out[85] = ( in[121] & 0x3fffff ) >> ( 32 - 20 ) ;
	out[86] = ( in[122] & 0x3fffff ) >> ( 32 - 20 ) ;
	out[87] = ( in[123] & 0x3fffff ) >> ( 32 - 20 ) ;

	out[84] |= in[124] << 10 ;
	out[85] |= in[125] << 10 ;
	out[86] |= in[126] << 10 ;
	out[87] |= in[127] << 10 ;
}


// 23-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c23(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x7fffff ) << 0 ;
	out[1] = ( in[1] & 0x7fffff ) << 0 ;
	out[2] = ( in[2] & 0x7fffff ) << 0 ;
	out[3] = ( in[3] & 0x7fffff ) << 0 ;

	out[0] |= in[4] << 23 ;
	out[1] |= in[5] << 23 ;
	out[2] |= in[6] << 23 ;
	out[3] |= in[7] << 23 ;

	out[4] = ( in[4] & 0x7fffff ) >> ( 32 - 23 ) ;
	out[5] = ( in[5] & 0x7fffff ) >> ( 32 - 23 ) ;
	out[6] = ( in[6] & 0x7fffff ) >> ( 32 - 23 ) ;
	out[7] = ( in[7] & 0x7fffff ) >> ( 32 - 23 ) ;

	out[4] |= in[8] << 14 ;
	out[5] |= in[9] << 14 ;
	out[6] |= in[10] << 14 ;
	out[7] |= in[11] << 14 ;

	out[8] = ( in[8] & 0x7fffff ) >> ( 32 - 14 ) ;
	out[9] = ( in[9] & 0x7fffff ) >> ( 32 - 14 ) ;
	out[10] = ( in[10] & 0x7fffff ) >> ( 32 - 14 ) ;
	out[11] = ( in[11] & 0x7fffff ) >> ( 32 - 14 ) ;

	out[8] |= ( in[12] & 0x7fffff ) << 5 ;
	out[9] |= ( in[13] & 0x7fffff ) << 5 ;
	out[10] |= ( in[14] & 0x7fffff ) << 5 ;
	out[11] |= ( in[15] & 0x7fffff ) << 5 ;

	out[8] |= in[16] << 28 ;
	out[9] |= in[17] << 28 ;
	out[10] |= in[18] << 28 ;
	out[11] |= in[19] << 28 ;

	out[12] = ( in[16] & 0x7fffff ) >> ( 32 - 28 ) ;
	out[13] = ( in[17] & 0x7fffff ) >> ( 32 - 28 ) ;
	out[14] = ( in[18] & 0x7fffff ) >> ( 32 - 28 ) ;
	out[15] = ( in[19] & 0x7fffff ) >> ( 32 - 28 ) ;

	out[12] |= in[20] << 19 ;
	out[13] |= in[21] << 19 ;
	out[14] |= in[22] << 19 ;
	out[15] |= in[23] << 19 ;

	out[16] = ( in[20] & 0x7fffff ) >> ( 32 - 19 ) ;
	out[17] = ( in[21] & 0x7fffff ) >> ( 32 - 19 ) ;
	out[18] = ( in[22] & 0x7fffff ) >> ( 32 - 19 ) ;
	out[19] = ( in[23] & 0x7fffff ) >> ( 32 - 19 ) ;

	out[16] |= in[24] << 10 ;
	out[17] |= in[25] << 10 ;
	out[18] |= in[26] << 10 ;
	out[19] |= in[27] << 10 ;

	out[20] = ( in[24] & 0x7fffff ) >> ( 32 - 10 ) ;
	out[21] = ( in[25] & 0x7fffff ) >> ( 32 - 10 ) ;
	out[22] = ( in[26] & 0x7fffff ) >> ( 32 - 10 ) ;
	out[23] = ( in[27] & 0x7fffff ) >> ( 32 - 10 ) ;

	out[20] |= ( in[28] & 0x7fffff ) << 1 ;
	out[21] |= ( in[29] & 0x7fffff ) << 1 ;
	out[22] |= ( in[30] & 0x7fffff ) << 1 ;
	out[23] |= ( in[31] & 0x7fffff ) << 1 ;

	out[20] |= in[32] << 24 ;
	out[21] |= in[33] << 24 ;
	out[22] |= in[34] << 24 ;
	out[23] |= in[35] << 24 ;

	out[24] = ( in[32] & 0x7fffff ) >> ( 32 - 24 ) ;
	out[25] = ( in[33] & 0x7fffff ) >> ( 32 - 24 ) ;
	out[26] = ( in[34] & 0x7fffff ) >> ( 32 - 24 ) ;
	out[27] = ( in[35] & 0x7fffff ) >> ( 32 - 24 ) ;

	out[24] |= in[36] << 15 ;
	out[25] |= in[37] << 15 ;
	out[26] |= in[38] << 15 ;
	out[27] |= in[39] << 15 ;

	out[28] = ( in[36] & 0x7fffff ) >> ( 32 - 15 ) ;
	out[29] = ( in[37] & 0x7fffff ) >> ( 32 - 15 ) ;
	out[30] = ( in[38] & 0x7fffff ) >> ( 32 - 15 ) ;
	out[31] = ( in[39] & 0x7fffff ) >> ( 32 - 15 ) ;

	out[28] |= ( in[40] & 0x7fffff ) << 6 ;
	out[29] |= ( in[41] & 0x7fffff ) << 6 ;
	out[30] |= ( in[42] & 0x7fffff ) << 6 ;
	out[31] |= ( in[43] & 0x7fffff ) << 6 ;

	out[28] |= in[44] << 29 ;
	out[29] |= in[45] << 29 ;
	out[30] |= in[46] << 29 ;
	out[31] |= in[47] << 29 ;

	out[32] = ( in[44] & 0x7fffff ) >> ( 32 - 29 ) ;
	out[33] = ( in[45] & 0x7fffff ) >> ( 32 - 29 ) ;
	out[34] = ( in[46] & 0x7fffff ) >> ( 32 - 29 ) ;
	out[35] = ( in[47] & 0x7fffff ) >> ( 32 - 29 ) ;

	out[32] |= in[48] << 20 ;
	out[33] |= in[49] << 20 ;
	out[34] |= in[50] << 20 ;
	out[35] |= in[51] << 20 ;

	out[36] = ( in[48] & 0x7fffff ) >> ( 32 - 20 ) ;
	out[37] = ( in[49] & 0x7fffff ) >> ( 32 - 20 ) ;
	out[38] = ( in[50] & 0x7fffff ) >> ( 32 - 20 ) ;
	out[39] = ( in[51] & 0x7fffff ) >> ( 32 - 20 ) ;

	out[36] |= in[52] << 11 ;
	out[37] |= in[53] << 11 ;
	out[38] |= in[54] << 11 ;
	out[39] |= in[55] << 11 ;

	out[40] = ( in[52] & 0x7fffff ) >> ( 32 - 11 ) ;
	out[41] = ( in[53] & 0x7fffff ) >> ( 32 - 11 ) ;
	out[42] = ( in[54] & 0x7fffff ) >> ( 32 - 11 ) ;
	out[43] = ( in[55] & 0x7fffff ) >> ( 32 - 11 ) ;

	out[40] |= ( in[56] & 0x7fffff ) << 2 ;
	out[41] |= ( in[57] & 0x7fffff ) << 2 ;
	out[42] |= ( in[58] & 0x7fffff ) << 2 ;
	out[43] |= ( in[59] & 0x7fffff ) << 2 ;

	out[40] |= in[60] << 25 ;
	out[41] |= in[61] << 25 ;
	out[42] |= in[62] << 25 ;
	out[43] |= in[63] << 25 ;

	out[44] = ( in[60] & 0x7fffff ) >> ( 32 - 25 ) ;
	out[45] = ( in[61] & 0x7fffff ) >> ( 32 - 25 ) ;
	out[46] = ( in[62] & 0x7fffff ) >> ( 32 - 25 ) ;
	out[47] = ( in[63] & 0x7fffff ) >> ( 32 - 25 ) ;

	out[44] |= in[64] << 16 ;
	out[45] |= in[65] << 16 ;
	out[46] |= in[66] << 16 ;
	out[47] |= in[67] << 16 ;

	out[48] = ( in[64] & 0x7fffff ) >> ( 32 - 16 ) ;
	out[49] = ( in[65] & 0x7fffff ) >> ( 32 - 16 ) ;
	out[50] = ( in[66] & 0x7fffff ) >> ( 32 - 16 ) ;
	out[51] = ( in[67] & 0x7fffff ) >> ( 32 - 16 ) ;

	out[48] |= ( in[68] & 0x7fffff ) << 7 ;
	out[49] |= ( in[69] & 0x7fffff ) << 7 ;
	out[50] |= ( in[70] & 0x7fffff ) << 7 ;
	out[51] |= ( in[71] & 0x7fffff ) << 7 ;

	out[48] |= in[72] << 30 ;
	out[49] |= in[73] << 30 ;
	out[50] |= in[74] << 30 ;
	out[51] |= in[75] << 30 ;

	out[52] = ( in[72] & 0x7fffff ) >> ( 32 - 30 ) ;
	out[53] = ( in[73] & 0x7fffff ) >> ( 32 - 30 ) ;
	out[54] = ( in[74] & 0x7fffff ) >> ( 32 - 30 ) ;
	out[55] = ( in[75] & 0x7fffff ) >> ( 32 - 30 ) ;

	out[52] |= in[76] << 21 ;
	out[53] |= in[77] << 21 ;
	out[54] |= in[78] << 21 ;
	out[55] |= in[79] << 21 ;

	out[56] = ( in[76] & 0x7fffff ) >> ( 32 - 21 ) ;
	out[57] = ( in[77] & 0x7fffff ) >> ( 32 - 21 ) ;
	out[58] = ( in[78] & 0x7fffff ) >> ( 32 - 21 ) ;
	out[59] = ( in[79] & 0x7fffff ) >> ( 32 - 21 ) ;

	out[56] |= in[80] << 12 ;
	out[57] |= in[81] << 12 ;
	out[58] |= in[82] << 12 ;
	out[59] |= in[83] << 12 ;

	out[60] = ( in[80] & 0x7fffff ) >> ( 32 - 12 ) ;
	out[61] = ( in[81] & 0x7fffff ) >> ( 32 - 12 ) ;
	out[62] = ( in[82] & 0x7fffff ) >> ( 32 - 12 ) ;
	out[63] = ( in[83] & 0x7fffff ) >> ( 32 - 12 ) ;

	out[60] |= ( in[84] & 0x7fffff ) << 3 ;
	out[61] |= ( in[85] & 0x7fffff ) << 3 ;
	out[62] |= ( in[86] & 0x7fffff ) << 3 ;
	out[63] |= ( in[87] & 0x7fffff ) << 3 ;

	out[60] |= in[88] << 26 ;
	out[61] |= in[89] << 26 ;
	out[62] |= in[90] << 26 ;
	out[63] |= in[91] << 26 ;

	out[64] = ( in[88] & 0x7fffff ) >> ( 32 - 26 ) ;
	out[65] = ( in[89] & 0x7fffff ) >> ( 32 - 26 ) ;
	out[66] = ( in[90] & 0x7fffff ) >> ( 32 - 26 ) ;
	out[67] = ( in[91] & 0x7fffff ) >> ( 32 - 26 ) ;

	out[64] |= in[92] << 17 ;
	out[65] |= in[93] << 17 ;
	out[66] |= in[94] << 17 ;
	out[67] |= in[95] << 17 ;

	out[68] = ( in[92] & 0x7fffff ) >> ( 32 - 17 ) ;
	out[69] = ( in[93] & 0x7fffff ) >> ( 32 - 17 ) ;
	out[70] = ( in[94] & 0x7fffff ) >> ( 32 - 17 ) ;
	out[71] = ( in[95] & 0x7fffff ) >> ( 32 - 17 ) ;

	out[68] |= ( in[96] & 0x7fffff ) << 8 ;
	out[69] |= ( in[97] & 0x7fffff ) << 8 ;
	out[70] |= ( in[98] & 0x7fffff ) << 8 ;
	out[71] |= ( in[99] & 0x7fffff ) << 8 ;

	out[68] |= in[100] << 31 ;
	out[69] |= in[101] << 31 ;
	out[70] |= in[102] << 31 ;
	out[71] |= in[103] << 31 ;

	out[72] = ( in[100] & 0x7fffff ) >> ( 32 - 31 ) ;
	out[73] = ( in[101] & 0x7fffff ) >> ( 32 - 31 ) ;
	out[74] = ( in[102] & 0x7fffff ) >> ( 32 - 31 ) ;
	out[75] = ( in[103] & 0x7fffff ) >> ( 32 - 31 ) ;

	out[72] |= in[104] << 22 ;
	out[73] |= in[105] << 22 ;
	out[74] |= in[106] << 22 ;
	out[75] |= in[107] << 22 ;

	out[76] = ( in[104] & 0x7fffff ) >> ( 32 - 22 ) ;
	out[77] = ( in[105] & 0x7fffff ) >> ( 32 - 22 ) ;
	out[78] = ( in[106] & 0x7fffff ) >> ( 32 - 22 ) ;
	out[79] = ( in[107] & 0x7fffff ) >> ( 32 - 22 ) ;

	out[76] |= in[108] << 13 ;
	out[77] |= in[109] << 13 ;
	out[78] |= in[110] << 13 ;
	out[79] |= in[111] << 13 ;

	out[80] = ( in[108] & 0x7fffff ) >> ( 32 - 13 ) ;
	out[81] = ( in[109] & 0x7fffff ) >> ( 32 - 13 ) ;
	out[82] = ( in[110] & 0x7fffff ) >> ( 32 - 13 ) ;
	out[83] = ( in[111] & 0x7fffff ) >> ( 32 - 13 ) ;

	out[80] |= ( in[112] & 0x7fffff ) << 4 ;
	out[81] |= ( in[113] & 0x7fffff ) << 4 ;
	out[82] |= ( in[114] & 0x7fffff ) << 4 ;
	out[83] |= ( in[115] & 0x7fffff ) << 4 ;

	out[80] |= in[116] << 27 ;
	out[81] |= in[117] << 27 ;
	out[82] |= in[118] << 27 ;
	out[83] |= in[119] << 27 ;

	out[84] = ( in[116] & 0x7fffff ) >> ( 32 - 27 ) ;
	out[85] = ( in[117] & 0x7fffff ) >> ( 32 - 27 ) ;
	out[86] = ( in[118] & 0x7fffff ) >> ( 32 - 27 ) ;
	out[87] = ( in[119] & 0x7fffff ) >> ( 32 - 27 ) ;

	out[84] |= in[120] << 18 ;
	out[85] |= in[121] << 18 ;
	out[86] |= in[122] << 18 ;
	out[87] |= in[123] << 18 ;

	out[88] = ( in[120] & 0x7fffff ) >> ( 32 - 18 ) ;
	out[89] = ( in[121] & 0x7fffff ) >> ( 32 - 18 ) ;
	out[90] = ( in[122] & 0x7fffff ) >> ( 32 - 18 ) ;
	out[91] = ( in[123] & 0x7fffff ) >> ( 32 - 18 ) ;

	out[88] |= in[124] << 9 ;
	out[89] |= in[125] << 9 ;
	out[90] |= in[126] << 9 ;
	out[91] |= in[127] << 9 ;
}


// 24-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c24(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0xffffff ) << 0 ;
	out[1] = ( in[1] & 0xffffff ) << 0 ;
	out[2] = ( in[2] & 0xffffff ) << 0 ;
	out[3] = ( in[3] & 0xffffff ) << 0 ;

	out[0] |= in[4] << 24 ;
	out[1] |= in[5] << 24 ;
	out[2] |= in[6] << 24 ;
	out[3] |= in[7] << 24 ;

	out[4] = ( in[4] & 0xffffff ) >> ( 32 - 24 ) ;
	out[5] = ( in[5] & 0xffffff ) >> ( 32 - 24 ) ;
	out[6] = ( in[6] & 0xffffff ) >> ( 32 - 24 ) ;
	out[7] = ( in[7] & 0xffffff ) >> ( 32 - 24 ) ;

	out[4] |= in[8] << 16 ;
	out[5] |= in[9] << 16 ;
	out[6] |= in[10] << 16 ;
	out[7] |= in[11] << 16 ;

	out[8] = ( in[8] & 0xffffff ) >> ( 32 - 16 ) ;
	out[9] = ( in[9] & 0xffffff ) >> ( 32 - 16 ) ;
	out[10] = ( in[10] & 0xffffff ) >> ( 32 - 16 ) ;
	out[11] = ( in[11] & 0xffffff ) >> ( 32 - 16 ) ;

	out[8] |= in[12] << 8 ;
	out[9] |= in[13] << 8 ;
	out[10] |= in[14] << 8 ;
	out[11] |= in[15] << 8 ;

	out[12] = ( in[16] & 0xffffff ) << 0 ;
	out[13] = ( in[17] & 0xffffff ) << 0 ;
	out[14] = ( in[18] & 0xffffff ) << 0 ;
	out[15] = ( in[19] & 0xffffff ) << 0 ;

	out[12] |= in[20] << 24 ;
	out[13] |= in[21] << 24 ;
	out[14] |= in[22] << 24 ;
	out[15] |= in[23] << 24 ;

	out[16] = ( in[20] & 0xffffff ) >> ( 32 - 24 ) ;
	out[17] = ( in[21] & 0xffffff ) >> ( 32 - 24 ) ;
	out[18] = ( in[22] & 0xffffff ) >> ( 32 - 24 ) ;
	out[19] = ( in[23] & 0xffffff ) >> ( 32 - 24 ) ;

	out[16] |= in[24] << 16 ;
	out[17] |= in[25] << 16 ;
	out[18] |= in[26] << 16 ;
	out[19] |= in[27] << 16 ;

	out[20] = ( in[24] & 0xffffff ) >> ( 32 - 16 ) ;
	out[21] = ( in[25] & 0xffffff ) >> ( 32 - 16 ) ;
	out[22] = ( in[26] & 0xffffff ) >> ( 32 - 16 ) ;
	out[23] = ( in[27] & 0xffffff ) >> ( 32 - 16 ) ;

	out[20] |= in[28] << 8 ;
	out[21] |= in[29] << 8 ;
	out[22] |= in[30] << 8 ;
	out[23] |= in[31] << 8 ;

	out[24] = ( in[32] & 0xffffff ) << 0 ;
	out[25] = ( in[33] & 0xffffff ) << 0 ;
	out[26] = ( in[34] & 0xffffff ) << 0 ;
	out[27] = ( in[35] & 0xffffff ) << 0 ;

	out[24] |= in[36] << 24 ;
	out[25] |= in[37] << 24 ;
	out[26] |= in[38] << 24 ;
	out[27] |= in[39] << 24 ;

	out[28] = ( in[36] & 0xffffff ) >> ( 32 - 24 ) ;
	out[29] = ( in[37] & 0xffffff ) >> ( 32 - 24 ) ;
	out[30] = ( in[38] & 0xffffff ) >> ( 32 - 24 ) ;
	out[31] = ( in[39] & 0xffffff ) >> ( 32 - 24 ) ;

	out[28] |= in[40] << 16 ;
	out[29] |= in[41] << 16 ;
	out[30] |= in[42] << 16 ;
	out[31] |= in[43] << 16 ;

	out[32] = ( in[40] & 0xffffff ) >> ( 32 - 16 ) ;
	out[33] = ( in[41] & 0xffffff ) >> ( 32 - 16 ) ;
	out[34] = ( in[42] & 0xffffff ) >> ( 32 - 16 ) ;
	out[35] = ( in[43] & 0xffffff ) >> ( 32 - 16 ) ;

	out[32] |= in[44] << 8 ;
	out[33] |= in[45] << 8 ;
	out[34] |= in[46] << 8 ;
	out[35] |= in[47] << 8 ;

	out[36] = ( in[48] & 0xffffff ) << 0 ;
	out[37] = ( in[49] & 0xffffff ) << 0 ;
	out[38] = ( in[50] & 0xffffff ) << 0 ;
	out[39] = ( in[51] & 0xffffff ) << 0 ;

	out[36] |= in[52] << 24 ;
	out[37] |= in[53] << 24 ;
	out[38] |= in[54] << 24 ;
	out[39] |= in[55] << 24 ;

	out[40] = ( in[52] & 0xffffff ) >> ( 32 - 24 ) ;
	out[41] = ( in[53] & 0xffffff ) >> ( 32 - 24 ) ;
	out[42] = ( in[54] & 0xffffff ) >> ( 32 - 24 ) ;
	out[43] = ( in[55] & 0xffffff ) >> ( 32 - 24 ) ;

	out[40] |= in[56] << 16 ;
	out[41] |= in[57] << 16 ;
	out[42] |= in[58] << 16 ;
	out[43] |= in[59] << 16 ;

	out[44] = ( in[56] & 0xffffff ) >> ( 32 - 16 ) ;
	out[45] = ( in[57] & 0xffffff ) >> ( 32 - 16 ) ;
	out[46] = ( in[58] & 0xffffff ) >> ( 32 - 16 ) ;
	out[47] = ( in[59] & 0xffffff ) >> ( 32 - 16 ) ;

	out[44] |= in[60] << 8 ;
	out[45] |= in[61] << 8 ;
	out[46] |= in[62] << 8 ;
	out[47] |= in[63] << 8 ;

	out[48] = ( in[64] & 0xffffff ) << 0 ;
	out[49] = ( in[65] & 0xffffff ) << 0 ;
	out[50] = ( in[66] & 0xffffff ) << 0 ;
	out[51] = ( in[67] & 0xffffff ) << 0 ;

	out[48] |= in[68] << 24 ;
	out[49] |= in[69] << 24 ;
	out[50] |= in[70] << 24 ;
	out[51] |= in[71] << 24 ;

	out[52] = ( in[68] & 0xffffff ) >> ( 32 - 24 ) ;
	out[53] = ( in[69] & 0xffffff ) >> ( 32 - 24 ) ;
	out[54] = ( in[70] & 0xffffff ) >> ( 32 - 24 ) ;
	out[55] = ( in[71] & 0xffffff ) >> ( 32 - 24 ) ;

	out[52] |= in[72] << 16 ;
	out[53] |= in[73] << 16 ;
	out[54] |= in[74] << 16 ;
	out[55] |= in[75] << 16 ;

	out[56] = ( in[72] & 0xffffff ) >> ( 32 - 16 ) ;
	out[57] = ( in[73] & 0xffffff ) >> ( 32 - 16 ) ;
	out[58] = ( in[74] & 0xffffff ) >> ( 32 - 16 ) ;
	out[59] = ( in[75] & 0xffffff ) >> ( 32 - 16 ) ;

	out[56] |= in[76] << 8 ;
	out[57] |= in[77] << 8 ;
	out[58] |= in[78] << 8 ;
	out[59] |= in[79] << 8 ;

	out[60] = ( in[80] & 0xffffff ) << 0 ;
	out[61] = ( in[81] & 0xffffff ) << 0 ;
	out[62] = ( in[82] & 0xffffff ) << 0 ;
	out[63] = ( in[83] & 0xffffff ) << 0 ;

	out[60] |= in[84] << 24 ;
	out[61] |= in[85] << 24 ;
	out[62] |= in[86] << 24 ;
	out[63] |= in[87] << 24 ;

	out[64] = ( in[84] & 0xffffff ) >> ( 32 - 24 ) ;
	out[65] = ( in[85] & 0xffffff ) >> ( 32 - 24 ) ;
	out[66] = ( in[86] & 0xffffff ) >> ( 32 - 24 ) ;
	out[67] = ( in[87] & 0xffffff ) >> ( 32 - 24 ) ;

	out[64] |= in[88] << 16 ;
	out[65] |= in[89] << 16 ;
	out[66] |= in[90] << 16 ;
	out[67] |= in[91] << 16 ;

	out[68] = ( in[88] & 0xffffff ) >> ( 32 - 16 ) ;
	out[69] = ( in[89] & 0xffffff ) >> ( 32 - 16 ) ;
	out[70] = ( in[90] & 0xffffff ) >> ( 32 - 16 ) ;
	out[71] = ( in[91] & 0xffffff ) >> ( 32 - 16 ) ;

	out[68] |= in[92] << 8 ;
	out[69] |= in[93] << 8 ;
	out[70] |= in[94] << 8 ;
	out[71] |= in[95] << 8 ;

	out[72] = ( in[96] & 0xffffff ) << 0 ;
	out[73] = ( in[97] & 0xffffff ) << 0 ;
	out[74] = ( in[98] & 0xffffff ) << 0 ;
	out[75] = ( in[99] & 0xffffff ) << 0 ;

	out[72] |= in[100] << 24 ;
	out[73] |= in[101] << 24 ;
	out[74] |= in[102] << 24 ;
	out[75] |= in[103] << 24 ;

	out[76] = ( in[100] & 0xffffff ) >> ( 32 - 24 ) ;
	out[77] = ( in[101] & 0xffffff ) >> ( 32 - 24 ) ;
	out[78] = ( in[102] & 0xffffff ) >> ( 32 - 24 ) ;
	out[79] = ( in[103] & 0xffffff ) >> ( 32 - 24 ) ;

	out[76] |= in[104] << 16 ;
	out[77] |= in[105] << 16 ;
	out[78] |= in[106] << 16 ;
	out[79] |= in[107] << 16 ;

	out[80] = ( in[104] & 0xffffff ) >> ( 32 - 16 ) ;
	out[81] = ( in[105] & 0xffffff ) >> ( 32 - 16 ) ;
	out[82] = ( in[106] & 0xffffff ) >> ( 32 - 16 ) ;
	out[83] = ( in[107] & 0xffffff ) >> ( 32 - 16 ) ;

	out[80] |= in[108] << 8 ;
	out[81] |= in[109] << 8 ;
	out[82] |= in[110] << 8 ;
	out[83] |= in[111] << 8 ;

	out[84] = ( in[112] & 0xffffff ) << 0 ;
	out[85] = ( in[113] & 0xffffff ) << 0 ;
	out[86] = ( in[114] & 0xffffff ) << 0 ;
	out[87] = ( in[115] & 0xffffff ) << 0 ;

	out[84] |= in[116] << 24 ;
	out[85] |= in[117] << 24 ;
	out[86] |= in[118] << 24 ;
	out[87] |= in[119] << 24 ;

	out[88] = ( in[116] & 0xffffff ) >> ( 32 - 24 ) ;
	out[89] = ( in[117] & 0xffffff ) >> ( 32 - 24 ) ;
	out[90] = ( in[118] & 0xffffff ) >> ( 32 - 24 ) ;
	out[91] = ( in[119] & 0xffffff ) >> ( 32 - 24 ) ;

	out[88] |= in[120] << 16 ;
	out[89] |= in[121] << 16 ;
	out[90] |= in[122] << 16 ;
	out[91] |= in[123] << 16 ;

	out[92] = ( in[120] & 0xffffff ) >> ( 32 - 16 ) ;
	out[93] = ( in[121] & 0xffffff ) >> ( 32 - 16 ) ;
	out[94] = ( in[122] & 0xffffff ) >> ( 32 - 16 ) ;
	out[95] = ( in[123] & 0xffffff ) >> ( 32 - 16 ) ;

	out[92] |= in[124] << 8 ;
	out[93] |= in[125] << 8 ;
	out[94] |= in[126] << 8 ;
	out[95] |= in[127] << 8 ;
}


// 25-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c25(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x01ffffff ) << 0 ;
	out[1] = ( in[1] & 0x01ffffff ) << 0 ;
	out[2] = ( in[2] & 0x01ffffff ) << 0 ;
	out[3] = ( in[3] & 0x01ffffff ) << 0 ;

	out[0] |= in[4] << 25 ;
	out[1] |= in[5] << 25 ;
	out[2] |= in[6] << 25 ;
	out[3] |= in[7] << 25 ;

	out[4] = ( in[4] & 0x01ffffff ) >> ( 32 - 25 ) ;
	out[5] = ( in[5] & 0x01ffffff ) >> ( 32 - 25 ) ;
	out[6] = ( in[6] & 0x01ffffff ) >> ( 32 - 25 ) ;
	out[7] = ( in[7] & 0x01ffffff ) >> ( 32 - 25 ) ;

	out[4] |= in[8] << 18 ;
	out[5] |= in[9] << 18 ;
	out[6] |= in[10] << 18 ;
	out[7] |= in[11] << 18 ;

	out[8] = ( in[8] & 0x01ffffff ) >> ( 32 - 18 ) ;
	out[9] = ( in[9] & 0x01ffffff ) >> ( 32 - 18 ) ;
	out[10] = ( in[10] & 0x01ffffff ) >> ( 32 - 18 ) ;
	out[11] = ( in[11] & 0x01ffffff ) >> ( 32 - 18 ) ;

	out[8] |= in[12] << 11 ;
	out[9] |= in[13] << 11 ;
	out[10] |= in[14] << 11 ;
	out[11] |= in[15] << 11 ;

	out[12] = ( in[12] & 0x01ffffff ) >> ( 32 - 11 ) ;
	out[13] = ( in[13] & 0x01ffffff ) >> ( 32 - 11 ) ;
	out[14] = ( in[14] & 0x01ffffff ) >> ( 32 - 11 ) ;
	out[15] = ( in[15] & 0x01ffffff ) >> ( 32 - 11 ) ;

	out[12] |= ( in[16] & 0x01ffffff ) << 4 ;
	out[13] |= ( in[17] & 0x01ffffff ) << 4 ;
	out[14] |= ( in[18] & 0x01ffffff ) << 4 ;
	out[15] |= ( in[19] & 0x01ffffff ) << 4 ;

	out[12] |= in[20] << 29 ;
	out[13] |= in[21] << 29 ;
	out[14] |= in[22] << 29 ;
	out[15] |= in[23] << 29 ;

	out[16] = ( in[20] & 0x01ffffff ) >> ( 32 - 29 ) ;
	out[17] = ( in[21] & 0x01ffffff ) >> ( 32 - 29 ) ;
	out[18] = ( in[22] & 0x01ffffff ) >> ( 32 - 29 ) ;
	out[19] = ( in[23] & 0x01ffffff ) >> ( 32 - 29 ) ;

	out[16] |= in[24] << 22 ;
	out[17] |= in[25] << 22 ;
	out[18] |= in[26] << 22 ;
	out[19] |= in[27] << 22 ;

	out[20] = ( in[24] & 0x01ffffff ) >> ( 32 - 22 ) ;
	out[21] = ( in[25] & 0x01ffffff ) >> ( 32 - 22 ) ;
	out[22] = ( in[26] & 0x01ffffff ) >> ( 32 - 22 ) ;
	out[23] = ( in[27] & 0x01ffffff ) >> ( 32 - 22 ) ;

	out[20] |= in[28] << 15 ;
	out[21] |= in[29] << 15 ;
	out[22] |= in[30] << 15 ;
	out[23] |= in[31] << 15 ;

	out[24] = ( in[28] & 0x01ffffff ) >> ( 32 - 15 ) ;
	out[25] = ( in[29] & 0x01ffffff ) >> ( 32 - 15 ) ;
	out[26] = ( in[30] & 0x01ffffff ) >> ( 32 - 15 ) ;
	out[27] = ( in[31] & 0x01ffffff ) >> ( 32 - 15 ) ;

	out[24] |= in[32] << 8 ;
	out[25] |= in[33] << 8 ;
	out[26] |= in[34] << 8 ;
	out[27] |= in[35] << 8 ;

	out[28] = ( in[32] & 0x01ffffff ) >> ( 32 - 8 ) ;
	out[29] = ( in[33] & 0x01ffffff ) >> ( 32 - 8 ) ;
	out[30] = ( in[34] & 0x01ffffff ) >> ( 32 - 8 ) ;
	out[31] = ( in[35] & 0x01ffffff ) >> ( 32 - 8 ) ;

	out[28] |= ( in[36] & 0x01ffffff ) << 1 ;
	out[29] |= ( in[37] & 0x01ffffff ) << 1 ;
	out[30] |= ( in[38] & 0x01ffffff ) << 1 ;
	out[31] |= ( in[39] & 0x01ffffff ) << 1 ;

	out[28] |= in[40] << 26 ;
	out[29] |= in[41] << 26 ;
	out[30] |= in[42] << 26 ;
	out[31] |= in[43] << 26 ;

	out[32] = ( in[40] & 0x01ffffff ) >> ( 32 - 26 ) ;
	out[33] = ( in[41] & 0x01ffffff ) >> ( 32 - 26 ) ;
	out[34] = ( in[42] & 0x01ffffff ) >> ( 32 - 26 ) ;
	out[35] = ( in[43] & 0x01ffffff ) >> ( 32 - 26 ) ;

	out[32] |= in[44] << 19 ;
	out[33] |= in[45] << 19 ;
	out[34] |= in[46] << 19 ;
	out[35] |= in[47] << 19 ;

	out[36] = ( in[44] & 0x01ffffff ) >> ( 32 - 19 ) ;
	out[37] = ( in[45] & 0x01ffffff ) >> ( 32 - 19 ) ;
	out[38] = ( in[46] & 0x01ffffff ) >> ( 32 - 19 ) ;
	out[39] = ( in[47] & 0x01ffffff ) >> ( 32 - 19 ) ;

	out[36] |= in[48] << 12 ;
	out[37] |= in[49] << 12 ;
	out[38] |= in[50] << 12 ;
	out[39] |= in[51] << 12 ;

	out[40] = ( in[48] & 0x01ffffff ) >> ( 32 - 12 ) ;
	out[41] = ( in[49] & 0x01ffffff ) >> ( 32 - 12 ) ;
	out[42] = ( in[50] & 0x01ffffff ) >> ( 32 - 12 ) ;
	out[43] = ( in[51] & 0x01ffffff ) >> ( 32 - 12 ) ;

	out[40] |= ( in[52] & 0x01ffffff ) << 5 ;
	out[41] |= ( in[53] & 0x01ffffff ) << 5 ;
	out[42] |= ( in[54] & 0x01ffffff ) << 5 ;
	out[43] |= ( in[55] & 0x01ffffff ) << 5 ;

	out[40] |= in[56] << 30 ;
	out[41] |= in[57] << 30 ;
	out[42] |= in[58] << 30 ;
	out[43] |= in[59] << 30 ;

	out[44] = ( in[56] & 0x01ffffff ) >> ( 32 - 30 ) ;
	out[45] = ( in[57] & 0x01ffffff ) >> ( 32 - 30 ) ;
	out[46] = ( in[58] & 0x01ffffff ) >> ( 32 - 30 ) ;
	out[47] = ( in[59] & 0x01ffffff ) >> ( 32 - 30 ) ;

	out[44] |= in[60] << 23 ;
	out[45] |= in[61] << 23 ;
	out[46] |= in[62] << 23 ;
	out[47] |= in[63] << 23 ;

	out[48] = ( in[60] & 0x01ffffff ) >> ( 32 - 23 ) ;
	out[49] = ( in[61] & 0x01ffffff ) >> ( 32 - 23 ) ;
	out[50] = ( in[62] & 0x01ffffff ) >> ( 32 - 23 ) ;
	out[51] = ( in[63] & 0x01ffffff ) >> ( 32 - 23 ) ;

	out[48] |= in[64] << 16 ;
	out[49] |= in[65] << 16 ;
	out[50] |= in[66] << 16 ;
	out[51] |= in[67] << 16 ;

	out[52] = ( in[64] & 0x01ffffff ) >> ( 32 - 16 ) ;
	out[53] = ( in[65] & 0x01ffffff ) >> ( 32 - 16 ) ;
	out[54] = ( in[66] & 0x01ffffff ) >> ( 32 - 16 ) ;
	out[55] = ( in[67] & 0x01ffffff ) >> ( 32 - 16 ) ;

	out[52] |= in[68] << 9 ;
	out[53] |= in[69] << 9 ;
	out[54] |= in[70] << 9 ;
	out[55] |= in[71] << 9 ;

	out[56] = ( in[68] & 0x01ffffff ) >> ( 32 - 9 ) ;
	out[57] = ( in[69] & 0x01ffffff ) >> ( 32 - 9 ) ;
	out[58] = ( in[70] & 0x01ffffff ) >> ( 32 - 9 ) ;
	out[59] = ( in[71] & 0x01ffffff ) >> ( 32 - 9 ) ;

	out[56] |= ( in[72] & 0x01ffffff ) << 2 ;
	out[57] |= ( in[73] & 0x01ffffff ) << 2 ;
	out[58] |= ( in[74] & 0x01ffffff ) << 2 ;
	out[59] |= ( in[75] & 0x01ffffff ) << 2 ;

	out[56] |= in[76] << 27 ;
	out[57] |= in[77] << 27 ;
	out[58] |= in[78] << 27 ;
	out[59] |= in[79] << 27 ;

	out[60] = ( in[76] & 0x01ffffff ) >> ( 32 - 27 ) ;
	out[61] = ( in[77] & 0x01ffffff ) >> ( 32 - 27 ) ;
	out[62] = ( in[78] & 0x01ffffff ) >> ( 32 - 27 ) ;
	out[63] = ( in[79] & 0x01ffffff ) >> ( 32 - 27 ) ;

	out[60] |= in[80] << 20 ;
	out[61] |= in[81] << 20 ;
	out[62] |= in[82] << 20 ;
	out[63] |= in[83] << 20 ;

	out[64] = ( in[80] & 0x01ffffff ) >> ( 32 - 20 ) ;
	out[65] = ( in[81] & 0x01ffffff ) >> ( 32 - 20 ) ;
	out[66] = ( in[82] & 0x01ffffff ) >> ( 32 - 20 ) ;
	out[67] = ( in[83] & 0x01ffffff ) >> ( 32 - 20 ) ;

	out[64] |= in[84] << 13 ;
	out[65] |= in[85] << 13 ;
	out[66] |= in[86] << 13 ;
	out[67] |= in[87] << 13 ;

	out[68] = ( in[84] & 0x01ffffff ) >> ( 32 - 13 ) ;
	out[69] = ( in[85] & 0x01ffffff ) >> ( 32 - 13 ) ;
	out[70] = ( in[86] & 0x01ffffff ) >> ( 32 - 13 ) ;
	out[71] = ( in[87] & 0x01ffffff ) >> ( 32 - 13 ) ;

	out[68] |= ( in[88] & 0x01ffffff ) << 6 ;
	out[69] |= ( in[89] & 0x01ffffff ) << 6 ;
	out[70] |= ( in[90] & 0x01ffffff ) << 6 ;
	out[71] |= ( in[91] & 0x01ffffff ) << 6 ;

	out[68] |= in[92] << 31 ;
	out[69] |= in[93] << 31 ;
	out[70] |= in[94] << 31 ;
	out[71] |= in[95] << 31 ;

	out[72] = ( in[92] & 0x01ffffff ) >> ( 32 - 31 ) ;
	out[73] = ( in[93] & 0x01ffffff ) >> ( 32 - 31 ) ;
	out[74] = ( in[94] & 0x01ffffff ) >> ( 32 - 31 ) ;
	out[75] = ( in[95] & 0x01ffffff ) >> ( 32 - 31 ) ;

	out[72] |= in[96] << 24 ;
	out[73] |= in[97] << 24 ;
	out[74] |= in[98] << 24 ;
	out[75] |= in[99] << 24 ;

	out[76] = ( in[96] & 0x01ffffff ) >> ( 32 - 24 ) ;
	out[77] = ( in[97] & 0x01ffffff ) >> ( 32 - 24 ) ;
	out[78] = ( in[98] & 0x01ffffff ) >> ( 32 - 24 ) ;
	out[79] = ( in[99] & 0x01ffffff ) >> ( 32 - 24 ) ;

	out[76] |= in[100] << 17 ;
	out[77] |= in[101] << 17 ;
	out[78] |= in[102] << 17 ;
	out[79] |= in[103] << 17 ;

	out[80] = ( in[100] & 0x01ffffff ) >> ( 32 - 17 ) ;
	out[81] = ( in[101] & 0x01ffffff ) >> ( 32 - 17 ) ;
	out[82] = ( in[102] & 0x01ffffff ) >> ( 32 - 17 ) ;
	out[83] = ( in[103] & 0x01ffffff ) >> ( 32 - 17 ) ;

	out[80] |= in[104] << 10 ;
	out[81] |= in[105] << 10 ;
	out[82] |= in[106] << 10 ;
	out[83] |= in[107] << 10 ;

	out[84] = ( in[104] & 0x01ffffff ) >> ( 32 - 10 ) ;
	out[85] = ( in[105] & 0x01ffffff ) >> ( 32 - 10 ) ;
	out[86] = ( in[106] & 0x01ffffff ) >> ( 32 - 10 ) ;
	out[87] = ( in[107] & 0x01ffffff ) >> ( 32 - 10 ) ;

	out[84] |= ( in[108] & 0x01ffffff ) << 3 ;
	out[85] |= ( in[109] & 0x01ffffff ) << 3 ;
	out[86] |= ( in[110] & 0x01ffffff ) << 3 ;
	out[87] |= ( in[111] & 0x01ffffff ) << 3 ;

	out[84] |= in[112] << 28 ;
	out[85] |= in[113] << 28 ;
	out[86] |= in[114] << 28 ;
	out[87] |= in[115] << 28 ;

	out[88] = ( in[112] & 0x01ffffff ) >> ( 32 - 28 ) ;
	out[89] = ( in[113] & 0x01ffffff ) >> ( 32 - 28 ) ;
	out[90] = ( in[114] & 0x01ffffff ) >> ( 32 - 28 ) ;
	out[91] = ( in[115] & 0x01ffffff ) >> ( 32 - 28 ) ;

	out[88] |= in[116] << 21 ;
	out[89] |= in[117] << 21 ;
	out[90] |= in[118] << 21 ;
	out[91] |= in[119] << 21 ;

	out[92] = ( in[116] & 0x01ffffff ) >> ( 32 - 21 ) ;
	out[93] = ( in[117] & 0x01ffffff ) >> ( 32 - 21 ) ;
	out[94] = ( in[118] & 0x01ffffff ) >> ( 32 - 21 ) ;
	out[95] = ( in[119] & 0x01ffffff ) >> ( 32 - 21 ) ;

	out[92] |= in[120] << 14 ;
	out[93] |= in[121] << 14 ;
	out[94] |= in[122] << 14 ;
	out[95] |= in[123] << 14 ;

	out[96] = ( in[120] & 0x01ffffff ) >> ( 32 - 14 ) ;
	out[97] = ( in[121] & 0x01ffffff ) >> ( 32 - 14 ) ;
	out[98] = ( in[122] & 0x01ffffff ) >> ( 32 - 14 ) ;
	out[99] = ( in[123] & 0x01ffffff ) >> ( 32 - 14 ) ;

	out[96] |= in[124] << 7 ;
	out[97] |= in[125] << 7 ;
	out[98] |= in[126] << 7 ;
	out[99] |= in[127] << 7 ;
}


// 26-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c26(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x03ffffff ) << 0 ;
	out[1] = ( in[1] & 0x03ffffff ) << 0 ;
	out[2] = ( in[2] & 0x03ffffff ) << 0 ;
	out[3] = ( in[3] & 0x03ffffff ) << 0 ;

	out[0] |= in[4] << 26 ;
	out[1] |= in[5] << 26 ;
	out[2] |= in[6] << 26 ;
	out[3] |= in[7] << 26 ;

	out[4] = ( in[4] & 0x03ffffff ) >> ( 32 - 26 ) ;
	out[5] = ( in[5] & 0x03ffffff ) >> ( 32 - 26 ) ;
	out[6] = ( in[6] & 0x03ffffff ) >> ( 32 - 26 ) ;
	out[7] = ( in[7] & 0x03ffffff ) >> ( 32 - 26 ) ;

	out[4] |= in[8] << 20 ;
	out[5] |= in[9] << 20 ;
	out[6] |= in[10] << 20 ;
	out[7] |= in[11] << 20 ;

	out[8] = ( in[8] & 0x03ffffff ) >> ( 32 - 20 ) ;
	out[9] = ( in[9] & 0x03ffffff ) >> ( 32 - 20 ) ;
	out[10] = ( in[10] & 0x03ffffff ) >> ( 32 - 20 ) ;
	out[11] = ( in[11] & 0x03ffffff ) >> ( 32 - 20 ) ;

	out[8] |= in[12] << 14 ;
	out[9] |= in[13] << 14 ;
	out[10] |= in[14] << 14 ;
	out[11] |= in[15] << 14 ;

	out[12] = ( in[12] & 0x03ffffff ) >> ( 32 - 14 ) ;
	out[13] = ( in[13] & 0x03ffffff ) >> ( 32 - 14 ) ;
	out[14] = ( in[14] & 0x03ffffff ) >> ( 32 - 14 ) ;
	out[15] = ( in[15] & 0x03ffffff ) >> ( 32 - 14 ) ;

	out[12] |= in[16] << 8 ;
	out[13] |= in[17] << 8 ;
	out[14] |= in[18] << 8 ;
	out[15] |= in[19] << 8 ;

	out[16] = ( in[16] & 0x03ffffff ) >> ( 32 - 8 ) ;
	out[17] = ( in[17] & 0x03ffffff ) >> ( 32 - 8 ) ;
	out[18] = ( in[18] & 0x03ffffff ) >> ( 32 - 8 ) ;
	out[19] = ( in[19] & 0x03ffffff ) >> ( 32 - 8 ) ;

	out[16] |= ( in[20] & 0x03ffffff ) << 2 ;
	out[17] |= ( in[21] & 0x03ffffff ) << 2 ;
	out[18] |= ( in[22] & 0x03ffffff ) << 2 ;
	out[19] |= ( in[23] & 0x03ffffff ) << 2 ;

	out[16] |= in[24] << 28 ;
	out[17] |= in[25] << 28 ;
	out[18] |= in[26] << 28 ;
	out[19] |= in[27] << 28 ;

	out[20] = ( in[24] & 0x03ffffff ) >> ( 32 - 28 ) ;
	out[21] = ( in[25] & 0x03ffffff ) >> ( 32 - 28 ) ;
	out[22] = ( in[26] & 0x03ffffff ) >> ( 32 - 28 ) ;
	out[23] = ( in[27] & 0x03ffffff ) >> ( 32 - 28 ) ;

	out[20] |= in[28] << 22 ;
	out[21] |= in[29] << 22 ;
	out[22] |= in[30] << 22 ;
	out[23] |= in[31] << 22 ;

	out[24] = ( in[28] & 0x03ffffff ) >> ( 32 - 22 ) ;
	out[25] = ( in[29] & 0x03ffffff ) >> ( 32 - 22 ) ;
	out[26] = ( in[30] & 0x03ffffff ) >> ( 32 - 22 ) ;
	out[27] = ( in[31] & 0x03ffffff ) >> ( 32 - 22 ) ;

	out[24] |= in[32] << 16 ;
	out[25] |= in[33] << 16 ;
	out[26] |= in[34] << 16 ;
	out[27] |= in[35] << 16 ;

	out[28] = ( in[32] & 0x03ffffff ) >> ( 32 - 16 ) ;
	out[29] = ( in[33] & 0x03ffffff ) >> ( 32 - 16 ) ;
	out[30] = ( in[34] & 0x03ffffff ) >> ( 32 - 16 ) ;
	out[31] = ( in[35] & 0x03ffffff ) >> ( 32 - 16 ) ;

	out[28] |= in[36] << 10 ;
	out[29] |= in[37] << 10 ;
	out[30] |= in[38] << 10 ;
	out[31] |= in[39] << 10 ;

	out[32] = ( in[36] & 0x03ffffff ) >> ( 32 - 10 ) ;
	out[33] = ( in[37] & 0x03ffffff ) >> ( 32 - 10 ) ;
	out[34] = ( in[38] & 0x03ffffff ) >> ( 32 - 10 ) ;
	out[35] = ( in[39] & 0x03ffffff ) >> ( 32 - 10 ) ;

	out[32] |= ( in[40] & 0x03ffffff ) << 4 ;
	out[33] |= ( in[41] & 0x03ffffff ) << 4 ;
	out[34] |= ( in[42] & 0x03ffffff ) << 4 ;
	out[35] |= ( in[43] & 0x03ffffff ) << 4 ;

	out[32] |= in[44] << 30 ;
	out[33] |= in[45] << 30 ;
	out[34] |= in[46] << 30 ;
	out[35] |= in[47] << 30 ;

	out[36] = ( in[44] & 0x03ffffff ) >> ( 32 - 30 ) ;
	out[37] = ( in[45] & 0x03ffffff ) >> ( 32 - 30 ) ;
	out[38] = ( in[46] & 0x03ffffff ) >> ( 32 - 30 ) ;
	out[39] = ( in[47] & 0x03ffffff ) >> ( 32 - 30 ) ;

	out[36] |= in[48] << 24 ;
	out[37] |= in[49] << 24 ;
	out[38] |= in[50] << 24 ;
	out[39] |= in[51] << 24 ;

	out[40] = ( in[48] & 0x03ffffff ) >> ( 32 - 24 ) ;
	out[41] = ( in[49] & 0x03ffffff ) >> ( 32 - 24 ) ;
	out[42] = ( in[50] & 0x03ffffff ) >> ( 32 - 24 ) ;
	out[43] = ( in[51] & 0x03ffffff ) >> ( 32 - 24 ) ;

	out[40] |= in[52] << 18 ;
	out[41] |= in[53] << 18 ;
	out[42] |= in[54] << 18 ;
	out[43] |= in[55] << 18 ;

	out[44] = ( in[52] & 0x03ffffff ) >> ( 32 - 18 ) ;
	out[45] = ( in[53] & 0x03ffffff ) >> ( 32 - 18 ) ;
	out[46] = ( in[54] & 0x03ffffff ) >> ( 32 - 18 ) ;
	out[47] = ( in[55] & 0x03ffffff ) >> ( 32 - 18 ) ;

	out[44] |= in[56] << 12 ;
	out[45] |= in[57] << 12 ;
	out[46] |= in[58] << 12 ;
	out[47] |= in[59] << 12 ;

	out[48] = ( in[56] & 0x03ffffff ) >> ( 32 - 12 ) ;
	out[49] = ( in[57] & 0x03ffffff ) >> ( 32 - 12 ) ;
	out[50] = ( in[58] & 0x03ffffff ) >> ( 32 - 12 ) ;
	out[51] = ( in[59] & 0x03ffffff ) >> ( 32 - 12 ) ;

	out[48] |= in[60] << 6 ;
	out[49] |= in[61] << 6 ;
	out[50] |= in[62] << 6 ;
	out[51] |= in[63] << 6 ;

	out[52] = ( in[64] & 0x03ffffff ) << 0 ;
	out[53] = ( in[65] & 0x03ffffff ) << 0 ;
	out[54] = ( in[66] & 0x03ffffff ) << 0 ;
	out[55] = ( in[67] & 0x03ffffff ) << 0 ;

	out[52] |= in[68] << 26 ;
	out[53] |= in[69] << 26 ;
	out[54] |= in[70] << 26 ;
	out[55] |= in[71] << 26 ;

	out[56] = ( in[68] & 0x03ffffff ) >> ( 32 - 26 ) ;
	out[57] = ( in[69] & 0x03ffffff ) >> ( 32 - 26 ) ;
	out[58] = ( in[70] & 0x03ffffff ) >> ( 32 - 26 ) ;
	out[59] = ( in[71] & 0x03ffffff ) >> ( 32 - 26 ) ;

	out[56] |= in[72] << 20 ;
	out[57] |= in[73] << 20 ;
	out[58] |= in[74] << 20 ;
	out[59] |= in[75] << 20 ;

	out[60] = ( in[72] & 0x03ffffff ) >> ( 32 - 20 ) ;
	out[61] = ( in[73] & 0x03ffffff ) >> ( 32 - 20 ) ;
	out[62] = ( in[74] & 0x03ffffff ) >> ( 32 - 20 ) ;
	out[63] = ( in[75] & 0x03ffffff ) >> ( 32 - 20 ) ;

	out[60] |= in[76] << 14 ;
	out[61] |= in[77] << 14 ;
	out[62] |= in[78] << 14 ;
	out[63] |= in[79] << 14 ;

	out[64] = ( in[76] & 0x03ffffff ) >> ( 32 - 14 ) ;
	out[65] = ( in[77] & 0x03ffffff ) >> ( 32 - 14 ) ;
	out[66] = ( in[78] & 0x03ffffff ) >> ( 32 - 14 ) ;
	out[67] = ( in[79] & 0x03ffffff ) >> ( 32 - 14 ) ;

	out[64] |= in[80] << 8 ;
	out[65] |= in[81] << 8 ;
	out[66] |= in[82] << 8 ;
	out[67] |= in[83] << 8 ;

	out[68] = ( in[80] & 0x03ffffff ) >> ( 32 - 8 ) ;
	out[69] = ( in[81] & 0x03ffffff ) >> ( 32 - 8 ) ;
	out[70] = ( in[82] & 0x03ffffff ) >> ( 32 - 8 ) ;
	out[71] = ( in[83] & 0x03ffffff ) >> ( 32 - 8 ) ;

	out[68] |= ( in[84] & 0x03ffffff ) << 2 ;
	out[69] |= ( in[85] & 0x03ffffff ) << 2 ;
	out[70] |= ( in[86] & 0x03ffffff ) << 2 ;
	out[71] |= ( in[87] & 0x03ffffff ) << 2 ;

	out[68] |= in[88] << 28 ;
	out[69] |= in[89] << 28 ;
	out[70] |= in[90] << 28 ;
	out[71] |= in[91] << 28 ;

	out[72] = ( in[88] & 0x03ffffff ) >> ( 32 - 28 ) ;
	out[73] = ( in[89] & 0x03ffffff ) >> ( 32 - 28 ) ;
	out[74] = ( in[90] & 0x03ffffff ) >> ( 32 - 28 ) ;
	out[75] = ( in[91] & 0x03ffffff ) >> ( 32 - 28 ) ;

	out[72] |= in[92] << 22 ;
	out[73] |= in[93] << 22 ;
	out[74] |= in[94] << 22 ;
	out[75] |= in[95] << 22 ;

	out[76] = ( in[92] & 0x03ffffff ) >> ( 32 - 22 ) ;
	out[77] = ( in[93] & 0x03ffffff ) >> ( 32 - 22 ) ;
	out[78] = ( in[94] & 0x03ffffff ) >> ( 32 - 22 ) ;
	out[79] = ( in[95] & 0x03ffffff ) >> ( 32 - 22 ) ;

	out[76] |= in[96] << 16 ;
	out[77] |= in[97] << 16 ;
	out[78] |= in[98] << 16 ;
	out[79] |= in[99] << 16 ;

	out[80] = ( in[96] & 0x03ffffff ) >> ( 32 - 16 ) ;
	out[81] = ( in[97] & 0x03ffffff ) >> ( 32 - 16 ) ;
	out[82] = ( in[98] & 0x03ffffff ) >> ( 32 - 16 ) ;
	out[83] = ( in[99] & 0x03ffffff ) >> ( 32 - 16 ) ;

	out[80] |= in[100] << 10 ;
	out[81] |= in[101] << 10 ;
	out[82] |= in[102] << 10 ;
	out[83] |= in[103] << 10 ;

	out[84] = ( in[100] & 0x03ffffff ) >> ( 32 - 10 ) ;
	out[85] = ( in[101] & 0x03ffffff ) >> ( 32 - 10 ) ;
	out[86] = ( in[102] & 0x03ffffff ) >> ( 32 - 10 ) ;
	out[87] = ( in[103] & 0x03ffffff ) >> ( 32 - 10 ) ;

	out[84] |= ( in[104] & 0x03ffffff ) << 4 ;
	out[85] |= ( in[105] & 0x03ffffff ) << 4 ;
	out[86] |= ( in[106] & 0x03ffffff ) << 4 ;
	out[87] |= ( in[107] & 0x03ffffff ) << 4 ;

	out[84] |= in[108] << 30 ;
	out[85] |= in[109] << 30 ;
	out[86] |= in[110] << 30 ;
	out[87] |= in[111] << 30 ;

	out[88] = ( in[108] & 0x03ffffff ) >> ( 32 - 30 ) ;
	out[89] = ( in[109] & 0x03ffffff ) >> ( 32 - 30 ) ;
	out[90] = ( in[110] & 0x03ffffff ) >> ( 32 - 30 ) ;
	out[91] = ( in[111] & 0x03ffffff ) >> ( 32 - 30 ) ;

	out[88] |= in[112] << 24 ;
	out[89] |= in[113] << 24 ;
	out[90] |= in[114] << 24 ;
	out[91] |= in[115] << 24 ;

	out[92] = ( in[112] & 0x03ffffff ) >> ( 32 - 24 ) ;
	out[93] = ( in[113] & 0x03ffffff ) >> ( 32 - 24 ) ;
	out[94] = ( in[114] & 0x03ffffff ) >> ( 32 - 24 ) ;
	out[95] = ( in[115] & 0x03ffffff ) >> ( 32 - 24 ) ;

	out[92] |= in[116] << 18 ;
	out[93] |= in[117] << 18 ;
	out[94] |= in[118] << 18 ;
	out[95] |= in[119] << 18 ;

	out[96] = ( in[116] & 0x03ffffff ) >> ( 32 - 18 ) ;
	out[97] = ( in[117] & 0x03ffffff ) >> ( 32 - 18 ) ;
	out[98] = ( in[118] & 0x03ffffff ) >> ( 32 - 18 ) ;
	out[99] = ( in[119] & 0x03ffffff ) >> ( 32 - 18 ) ;

	out[96] |= in[120] << 12 ;
	out[97] |= in[121] << 12 ;
	out[98] |= in[122] << 12 ;
	out[99] |= in[123] << 12 ;

	out[100] = ( in[120] & 0x03ffffff ) >> ( 32 - 12 ) ;
	out[101] = ( in[121] & 0x03ffffff ) >> ( 32 - 12 ) ;
	out[102] = ( in[122] & 0x03ffffff ) >> ( 32 - 12 ) ;
	out[103] = ( in[123] & 0x03ffffff ) >> ( 32 - 12 ) ;

	out[100] |= in[124] << 6 ;
	out[101] |= in[125] << 6 ;
	out[102] |= in[126] << 6 ;
	out[103] |= in[127] << 6 ;
}


// 27-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c27(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x07ffffff ) << 0 ;
	out[1] = ( in[1] & 0x07ffffff ) << 0 ;
	out[2] = ( in[2] & 0x07ffffff ) << 0 ;
	out[3] = ( in[3] & 0x07ffffff ) << 0 ;

	out[0] |= in[4] << 27 ;
	out[1] |= in[5] << 27 ;
	out[2] |= in[6] << 27 ;
	out[3] |= in[7] << 27 ;

	out[4] = ( in[4] & 0x07ffffff ) >> ( 32 - 27 ) ;
	out[5] = ( in[5] & 0x07ffffff ) >> ( 32 - 27 ) ;
	out[6] = ( in[6] & 0x07ffffff ) >> ( 32 - 27 ) ;
	out[7] = ( in[7] & 0x07ffffff ) >> ( 32 - 27 ) ;

	out[4] |= in[8] << 22 ;
	out[5] |= in[9] << 22 ;
	out[6] |= in[10] << 22 ;
	out[7] |= in[11] << 22 ;

	out[8] = ( in[8] & 0x07ffffff ) >> ( 32 - 22 ) ;
	out[9] = ( in[9] & 0x07ffffff ) >> ( 32 - 22 ) ;
	out[10] = ( in[10] & 0x07ffffff ) >> ( 32 - 22 ) ;
	out[11] = ( in[11] & 0x07ffffff ) >> ( 32 - 22 ) ;

	out[8] |= in[12] << 17 ;
	out[9] |= in[13] << 17 ;
	out[10] |= in[14] << 17 ;
	out[11] |= in[15] << 17 ;

	out[12] = ( in[12] & 0x07ffffff ) >> ( 32 - 17 ) ;
	out[13] = ( in[13] & 0x07ffffff ) >> ( 32 - 17 ) ;
	out[14] = ( in[14] & 0x07ffffff ) >> ( 32 - 17 ) ;
	out[15] = ( in[15] & 0x07ffffff ) >> ( 32 - 17 ) ;

	out[12] |= in[16] << 12 ;
	out[13] |= in[17] << 12 ;
	out[14] |= in[18] << 12 ;
	out[15] |= in[19] << 12 ;

	out[16] = ( in[16] & 0x07ffffff ) >> ( 32 - 12 ) ;
	out[17] = ( in[17] & 0x07ffffff ) >> ( 32 - 12 ) ;
	out[18] = ( in[18] & 0x07ffffff ) >> ( 32 - 12 ) ;
	out[19] = ( in[19] & 0x07ffffff ) >> ( 32 - 12 ) ;

	out[16] |= in[20] << 7 ;
	out[17] |= in[21] << 7 ;
	out[18] |= in[22] << 7 ;
	out[19] |= in[23] << 7 ;

	out[20] = ( in[20] & 0x07ffffff ) >> ( 32 - 7 ) ;
	out[21] = ( in[21] & 0x07ffffff ) >> ( 32 - 7 ) ;
	out[22] = ( in[22] & 0x07ffffff ) >> ( 32 - 7 ) ;
	out[23] = ( in[23] & 0x07ffffff ) >> ( 32 - 7 ) ;

	out[20] |= ( in[24] & 0x07ffffff ) << 2 ;
	out[21] |= ( in[25] & 0x07ffffff ) << 2 ;
	out[22] |= ( in[26] & 0x07ffffff ) << 2 ;
	out[23] |= ( in[27] & 0x07ffffff ) << 2 ;

	out[20] |= in[28] << 29 ;
	out[21] |= in[29] << 29 ;
	out[22] |= in[30] << 29 ;
	out[23] |= in[31] << 29 ;

	out[24] = ( in[28] & 0x07ffffff ) >> ( 32 - 29 ) ;
	out[25] = ( in[29] & 0x07ffffff ) >> ( 32 - 29 ) ;
	out[26] = ( in[30] & 0x07ffffff ) >> ( 32 - 29 ) ;
	out[27] = ( in[31] & 0x07ffffff ) >> ( 32 - 29 ) ;

	out[24] |= in[32] << 24 ;
	out[25] |= in[33] << 24 ;
	out[26] |= in[34] << 24 ;
	out[27] |= in[35] << 24 ;

	out[28] = ( in[32] & 0x07ffffff ) >> ( 32 - 24 ) ;
	out[29] = ( in[33] & 0x07ffffff ) >> ( 32 - 24 ) ;
	out[30] = ( in[34] & 0x07ffffff ) >> ( 32 - 24 ) ;
	out[31] = ( in[35] & 0x07ffffff ) >> ( 32 - 24 ) ;

	out[28] |= in[36] << 19 ;
	out[29] |= in[37] << 19 ;
	out[30] |= in[38] << 19 ;
	out[31] |= in[39] << 19 ;

	out[32] = ( in[36] & 0x07ffffff ) >> ( 32 - 19 ) ;
	out[33] = ( in[37] & 0x07ffffff ) >> ( 32 - 19 ) ;
	out[34] = ( in[38] & 0x07ffffff ) >> ( 32 - 19 ) ;
	out[35] = ( in[39] & 0x07ffffff ) >> ( 32 - 19 ) ;

	out[32] |= in[40] << 14 ;
	out[33] |= in[41] << 14 ;
	out[34] |= in[42] << 14 ;
	out[35] |= in[43] << 14 ;

	out[36] = ( in[40] & 0x07ffffff ) >> ( 32 - 14 ) ;
	out[37] = ( in[41] & 0x07ffffff ) >> ( 32 - 14 ) ;
	out[38] = ( in[42] & 0x07ffffff ) >> ( 32 - 14 ) ;
	out[39] = ( in[43] & 0x07ffffff ) >> ( 32 - 14 ) ;

	out[36] |= in[44] << 9 ;
	out[37] |= in[45] << 9 ;
	out[38] |= in[46] << 9 ;
	out[39] |= in[47] << 9 ;

	out[40] = ( in[44] & 0x07ffffff ) >> ( 32 - 9 ) ;
	out[41] = ( in[45] & 0x07ffffff ) >> ( 32 - 9 ) ;
	out[42] = ( in[46] & 0x07ffffff ) >> ( 32 - 9 ) ;
	out[43] = ( in[47] & 0x07ffffff ) >> ( 32 - 9 ) ;

	out[40] |= ( in[48] & 0x07ffffff ) << 4 ;
	out[41] |= ( in[49] & 0x07ffffff ) << 4 ;
	out[42] |= ( in[50] & 0x07ffffff ) << 4 ;
	out[43] |= ( in[51] & 0x07ffffff ) << 4 ;

	out[40] |= in[52] << 31 ;
	out[41] |= in[53] << 31 ;
	out[42] |= in[54] << 31 ;
	out[43] |= in[55] << 31 ;

	out[44] = ( in[52] & 0x07ffffff ) >> ( 32 - 31 ) ;
	out[45] = ( in[53] & 0x07ffffff ) >> ( 32 - 31 ) ;
	out[46] = ( in[54] & 0x07ffffff ) >> ( 32 - 31 ) ;
	out[47] = ( in[55] & 0x07ffffff ) >> ( 32 - 31 ) ;

	out[44] |= in[56] << 26 ;
	out[45] |= in[57] << 26 ;
	out[46] |= in[58] << 26 ;
	out[47] |= in[59] << 26 ;

	out[48] = ( in[56] & 0x07ffffff ) >> ( 32 - 26 ) ;
	out[49] = ( in[57] & 0x07ffffff ) >> ( 32 - 26 ) ;
	out[50] = ( in[58] & 0x07ffffff ) >> ( 32 - 26 ) ;
	out[51] = ( in[59] & 0x07ffffff ) >> ( 32 - 26 ) ;

	out[48] |= in[60] << 21 ;
	out[49] |= in[61] << 21 ;
	out[50] |= in[62] << 21 ;
	out[51] |= in[63] << 21 ;

	out[52] = ( in[60] & 0x07ffffff ) >> ( 32 - 21 ) ;
	out[53] = ( in[61] & 0x07ffffff ) >> ( 32 - 21 ) ;
	out[54] = ( in[62] & 0x07ffffff ) >> ( 32 - 21 ) ;
	out[55] = ( in[63] & 0x07ffffff ) >> ( 32 - 21 ) ;

	out[52] |= in[64] << 16 ;
	out[53] |= in[65] << 16 ;
	out[54] |= in[66] << 16 ;
	out[55] |= in[67] << 16 ;

	out[56] = ( in[64] & 0x07ffffff ) >> ( 32 - 16 ) ;
	out[57] = ( in[65] & 0x07ffffff ) >> ( 32 - 16 ) ;
	out[58] = ( in[66] & 0x07ffffff ) >> ( 32 - 16 ) ;
	out[59] = ( in[67] & 0x07ffffff ) >> ( 32 - 16 ) ;

	out[56] |= in[68] << 11 ;
	out[57] |= in[69] << 11 ;
	out[58] |= in[70] << 11 ;
	out[59] |= in[71] << 11 ;

	out[60] = ( in[68] & 0x07ffffff ) >> ( 32 - 11 ) ;
	out[61] = ( in[69] & 0x07ffffff ) >> ( 32 - 11 ) ;
	out[62] = ( in[70] & 0x07ffffff ) >> ( 32 - 11 ) ;
	out[63] = ( in[71] & 0x07ffffff ) >> ( 32 - 11 ) ;

	out[60] |= in[72] << 6 ;
	out[61] |= in[73] << 6 ;
	out[62] |= in[74] << 6 ;
	out[63] |= in[75] << 6 ;

	out[64] = ( in[72] & 0x07ffffff ) >> ( 32 - 6 ) ;
	out[65] = ( in[73] & 0x07ffffff ) >> ( 32 - 6 ) ;
	out[66] = ( in[74] & 0x07ffffff ) >> ( 32 - 6 ) ;
	out[67] = ( in[75] & 0x07ffffff ) >> ( 32 - 6 ) ;

	out[64] |= ( in[76] & 0x07ffffff ) << 1 ;
	out[65] |= ( in[77] & 0x07ffffff ) << 1 ;
	out[66] |= ( in[78] & 0x07ffffff ) << 1 ;
	out[67] |= ( in[79] & 0x07ffffff ) << 1 ;

	out[64] |= in[80] << 28 ;
	out[65] |= in[81] << 28 ;
	out[66] |= in[82] << 28 ;
	out[67] |= in[83] << 28 ;

	out[68] = ( in[80] & 0x07ffffff ) >> ( 32 - 28 ) ;
	out[69] = ( in[81] & 0x07ffffff ) >> ( 32 - 28 ) ;
	out[70] = ( in[82] & 0x07ffffff ) >> ( 32 - 28 ) ;
	out[71] = ( in[83] & 0x07ffffff ) >> ( 32 - 28 ) ;

	out[68] |= in[84] << 23 ;
	out[69] |= in[85] << 23 ;
	out[70] |= in[86] << 23 ;
	out[71] |= in[87] << 23 ;

	out[72] = ( in[84] & 0x07ffffff ) >> ( 32 - 23 ) ;
	out[73] = ( in[85] & 0x07ffffff ) >> ( 32 - 23 ) ;
	out[74] = ( in[86] & 0x07ffffff ) >> ( 32 - 23 ) ;
	out[75] = ( in[87] & 0x07ffffff ) >> ( 32 - 23 ) ;

	out[72] |= in[88] << 18 ;
	out[73] |= in[89] << 18 ;
	out[74] |= in[90] << 18 ;
	out[75] |= in[91] << 18 ;

	out[76] = ( in[88] & 0x07ffffff ) >> ( 32 - 18 ) ;
	out[77] = ( in[89] & 0x07ffffff ) >> ( 32 - 18 ) ;
	out[78] = ( in[90] & 0x07ffffff ) >> ( 32 - 18 ) ;
	out[79] = ( in[91] & 0x07ffffff ) >> ( 32 - 18 ) ;

	out[76] |= in[92] << 13 ;
	out[77] |= in[93] << 13 ;
	out[78] |= in[94] << 13 ;
	out[79] |= in[95] << 13 ;

	out[80] = ( in[92] & 0x07ffffff ) >> ( 32 - 13 ) ;
	out[81] = ( in[93] & 0x07ffffff ) >> ( 32 - 13 ) ;
	out[82] = ( in[94] & 0x07ffffff ) >> ( 32 - 13 ) ;
	out[83] = ( in[95] & 0x07ffffff ) >> ( 32 - 13 ) ;

	out[80] |= in[96] << 8 ;
	out[81] |= in[97] << 8 ;
	out[82] |= in[98] << 8 ;
	out[83] |= in[99] << 8 ;

	out[84] = ( in[96] & 0x07ffffff ) >> ( 32 - 8 ) ;
	out[85] = ( in[97] & 0x07ffffff ) >> ( 32 - 8 ) ;
	out[86] = ( in[98] & 0x07ffffff ) >> ( 32 - 8 ) ;
	out[87] = ( in[99] & 0x07ffffff ) >> ( 32 - 8 ) ;

	out[84] |= ( in[100] & 0x07ffffff ) << 3 ;
	out[85] |= ( in[101] & 0x07ffffff ) << 3 ;
	out[86] |= ( in[102] & 0x07ffffff ) << 3 ;
	out[87] |= ( in[103] & 0x07ffffff ) << 3 ;

	out[84] |= in[104] << 30 ;
	out[85] |= in[105] << 30 ;
	out[86] |= in[106] << 30 ;
	out[87] |= in[107] << 30 ;

	out[88] = ( in[104] & 0x07ffffff ) >> ( 32 - 30 ) ;
	out[89] = ( in[105] & 0x07ffffff ) >> ( 32 - 30 ) ;
	out[90] = ( in[106] & 0x07ffffff ) >> ( 32 - 30 ) ;
	out[91] = ( in[107] & 0x07ffffff ) >> ( 32 - 30 ) ;

	out[88] |= in[108] << 25 ;
	out[89] |= in[109] << 25 ;
	out[90] |= in[110] << 25 ;
	out[91] |= in[111] << 25 ;

	out[92] = ( in[108] & 0x07ffffff ) >> ( 32 - 25 ) ;
	out[93] = ( in[109] & 0x07ffffff ) >> ( 32 - 25 ) ;
	out[94] = ( in[110] & 0x07ffffff ) >> ( 32 - 25 ) ;
	out[95] = ( in[111] & 0x07ffffff ) >> ( 32 - 25 ) ;

	out[92] |= in[112] << 20 ;
	out[93] |= in[113] << 20 ;
	out[94] |= in[114] << 20 ;
	out[95] |= in[115] << 20 ;

	out[96] = ( in[112] & 0x07ffffff ) >> ( 32 - 20 ) ;
	out[97] = ( in[113] & 0x07ffffff ) >> ( 32 - 20 ) ;
	out[98] = ( in[114] & 0x07ffffff ) >> ( 32 - 20 ) ;
	out[99] = ( in[115] & 0x07ffffff ) >> ( 32 - 20 ) ;

	out[96] |= in[116] << 15 ;
	out[97] |= in[117] << 15 ;
	out[98] |= in[118] << 15 ;
	out[99] |= in[119] << 15 ;

	out[100] = ( in[116] & 0x07ffffff ) >> ( 32 - 15 ) ;
	out[101] = ( in[117] & 0x07ffffff ) >> ( 32 - 15 ) ;
	out[102] = ( in[118] & 0x07ffffff ) >> ( 32 - 15 ) ;
	out[103] = ( in[119] & 0x07ffffff ) >> ( 32 - 15 ) ;

	out[100] |= in[120] << 10 ;
	out[101] |= in[121] << 10 ;
	out[102] |= in[122] << 10 ;
	out[103] |= in[123] << 10 ;

	out[104] = ( in[120] & 0x07ffffff ) >> ( 32 - 10 ) ;
	out[105] = ( in[121] & 0x07ffffff ) >> ( 32 - 10 ) ;
	out[106] = ( in[122] & 0x07ffffff ) >> ( 32 - 10 ) ;
	out[107] = ( in[123] & 0x07ffffff ) >> ( 32 - 10 ) ;

	out[104] |= in[124] << 5 ;
	out[105] |= in[125] << 5 ;
	out[106] |= in[126] << 5 ;
	out[107] |= in[127] << 5 ;
}


// 28-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c28(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x0fffffff ) << 0 ;
	out[1] = ( in[1] & 0x0fffffff ) << 0 ;
	out[2] = ( in[2] & 0x0fffffff ) << 0 ;
	out[3] = ( in[3] & 0x0fffffff ) << 0 ;

	out[0] |= in[4] << 28 ;
	out[1] |= in[5] << 28 ;
	out[2] |= in[6] << 28 ;
	out[3] |= in[7] << 28 ;

	out[4] = ( in[4] & 0x0fffffff ) >> ( 32 - 28 ) ;
	out[5] = ( in[5] & 0x0fffffff ) >> ( 32 - 28 ) ;
	out[6] = ( in[6] & 0x0fffffff ) >> ( 32 - 28 ) ;
	out[7] = ( in[7] & 0x0fffffff ) >> ( 32 - 28 ) ;

	out[4] |= in[8] << 24 ;
	out[5] |= in[9] << 24 ;
	out[6] |= in[10] << 24 ;
	out[7] |= in[11] << 24 ;

	out[8] = ( in[8] & 0x0fffffff ) >> ( 32 - 24 ) ;
	out[9] = ( in[9] & 0x0fffffff ) >> ( 32 - 24 ) ;
	out[10] = ( in[10] & 0x0fffffff ) >> ( 32 - 24 ) ;
	out[11] = ( in[11] & 0x0fffffff ) >> ( 32 - 24 ) ;

	out[8] |= in[12] << 20 ;
	out[9] |= in[13] << 20 ;
	out[10] |= in[14] << 20 ;
	out[11] |= in[15] << 20 ;

	out[12] = ( in[12] & 0x0fffffff ) >> ( 32 - 20 ) ;
	out[13] = ( in[13] & 0x0fffffff ) >> ( 32 - 20 ) ;
	out[14] = ( in[14] & 0x0fffffff ) >> ( 32 - 20 ) ;
	out[15] = ( in[15] & 0x0fffffff ) >> ( 32 - 20 ) ;

	out[12] |= in[16] << 16 ;
	out[13] |= in[17] << 16 ;
	out[14] |= in[18] << 16 ;
	out[15] |= in[19] << 16 ;

	out[16] = ( in[16] & 0x0fffffff ) >> ( 32 - 16 ) ;
	out[17] = ( in[17] & 0x0fffffff ) >> ( 32 - 16 ) ;
	out[18] = ( in[18] & 0x0fffffff ) >> ( 32 - 16 ) ;
	out[19] = ( in[19] & 0x0fffffff ) >> ( 32 - 16 ) ;

	out[16] |= in[20] << 12 ;
	out[17] |= in[21] << 12 ;
	out[18] |= in[22] << 12 ;
	out[19] |= in[23] << 12 ;

	out[20] = ( in[20] & 0x0fffffff ) >> ( 32 - 12 ) ;
	out[21] = ( in[21] & 0x0fffffff ) >> ( 32 - 12 ) ;
	out[22] = ( in[22] & 0x0fffffff ) >> ( 32 - 12 ) ;
	out[23] = ( in[23] & 0x0fffffff ) >> ( 32 - 12 ) ;

	out[20] |= in[24] << 8 ;
	out[21] |= in[25] << 8 ;
	out[22] |= in[26] << 8 ;
	out[23] |= in[27] << 8 ;

	out[24] = ( in[24] & 0x0fffffff ) >> ( 32 - 8 ) ;
	out[25] = ( in[25] & 0x0fffffff ) >> ( 32 - 8 ) ;
	out[26] = ( in[26] & 0x0fffffff ) >> ( 32 - 8 ) ;
	out[27] = ( in[27] & 0x0fffffff ) >> ( 32 - 8 ) ;

	out[24] |= in[28] << 4 ;
	out[25] |= in[29] << 4 ;
	out[26] |= in[30] << 4 ;
	out[27] |= in[31] << 4 ;

	out[28] = ( in[32] & 0x0fffffff ) << 0 ;
	out[29] = ( in[33] & 0x0fffffff ) << 0 ;
	out[30] = ( in[34] & 0x0fffffff ) << 0 ;
	out[31] = ( in[35] & 0x0fffffff ) << 0 ;

	out[28] |= in[36] << 28 ;
	out[29] |= in[37] << 28 ;
	out[30] |= in[38] << 28 ;
	out[31] |= in[39] << 28 ;

	out[32] = ( in[36] & 0x0fffffff ) >> ( 32 - 28 ) ;
	out[33] = ( in[37] & 0x0fffffff ) >> ( 32 - 28 ) ;
	out[34] = ( in[38] & 0x0fffffff ) >> ( 32 - 28 ) ;
	out[35] = ( in[39] & 0x0fffffff ) >> ( 32 - 28 ) ;

	out[32] |= in[40] << 24 ;
	out[33] |= in[41] << 24 ;
	out[34] |= in[42] << 24 ;
	out[35] |= in[43] << 24 ;

	out[36] = ( in[40] & 0x0fffffff ) >> ( 32 - 24 ) ;
	out[37] = ( in[41] & 0x0fffffff ) >> ( 32 - 24 ) ;
	out[38] = ( in[42] & 0x0fffffff ) >> ( 32 - 24 ) ;
	out[39] = ( in[43] & 0x0fffffff ) >> ( 32 - 24 ) ;

	out[36] |= in[44] << 20 ;
	out[37] |= in[45] << 20 ;
	out[38] |= in[46] << 20 ;
	out[39] |= in[47] << 20 ;

	out[40] = ( in[44] & 0x0fffffff ) >> ( 32 - 20 ) ;
	out[41] = ( in[45] & 0x0fffffff ) >> ( 32 - 20 ) ;
	out[42] = ( in[46] & 0x0fffffff ) >> ( 32 - 20 ) ;
	out[43] = ( in[47] & 0x0fffffff ) >> ( 32 - 20 ) ;

	out[40] |= in[48] << 16 ;
	out[41] |= in[49] << 16 ;
	out[42] |= in[50] << 16 ;
	out[43] |= in[51] << 16 ;

	out[44] = ( in[48] & 0x0fffffff ) >> ( 32 - 16 ) ;
	out[45] = ( in[49] & 0x0fffffff ) >> ( 32 - 16 ) ;
	out[46] = ( in[50] & 0x0fffffff ) >> ( 32 - 16 ) ;
	out[47] = ( in[51] & 0x0fffffff ) >> ( 32 - 16 ) ;

	out[44] |= in[52] << 12 ;
	out[45] |= in[53] << 12 ;
	out[46] |= in[54] << 12 ;
	out[47] |= in[55] << 12 ;

	out[48] = ( in[52] & 0x0fffffff ) >> ( 32 - 12 ) ;
	out[49] = ( in[53] & 0x0fffffff ) >> ( 32 - 12 ) ;
	out[50] = ( in[54] & 0x0fffffff ) >> ( 32 - 12 ) ;
	out[51] = ( in[55] & 0x0fffffff ) >> ( 32 - 12 ) ;

	out[48] |= in[56] << 8 ;
	out[49] |= in[57] << 8 ;
	out[50] |= in[58] << 8 ;
	out[51] |= in[59] << 8 ;

	out[52] = ( in[56] & 0x0fffffff ) >> ( 32 - 8 ) ;
	out[53] = ( in[57] & 0x0fffffff ) >> ( 32 - 8 ) ;
	out[54] = ( in[58] & 0x0fffffff ) >> ( 32 - 8 ) ;
	out[55] = ( in[59] & 0x0fffffff ) >> ( 32 - 8 ) ;

	out[52] |= in[60] << 4 ;
	out[53] |= in[61] << 4 ;
	out[54] |= in[62] << 4 ;
	out[55] |= in[63] << 4 ;

	out[56] = ( in[64] & 0x0fffffff ) << 0 ;
	out[57] = ( in[65] & 0x0fffffff ) << 0 ;
	out[58] = ( in[66] & 0x0fffffff ) << 0 ;
	out[59] = ( in[67] & 0x0fffffff ) << 0 ;

	out[56] |= in[68] << 28 ;
	out[57] |= in[69] << 28 ;
	out[58] |= in[70] << 28 ;
	out[59] |= in[71] << 28 ;

	out[60] = ( in[68] & 0x0fffffff ) >> ( 32 - 28 ) ;
	out[61] = ( in[69] & 0x0fffffff ) >> ( 32 - 28 ) ;
	out[62] = ( in[70] & 0x0fffffff ) >> ( 32 - 28 ) ;
	out[63] = ( in[71] & 0x0fffffff ) >> ( 32 - 28 ) ;

	out[60] |= in[72] << 24 ;
	out[61] |= in[73] << 24 ;
	out[62] |= in[74] << 24 ;
	out[63] |= in[75] << 24 ;

	out[64] = ( in[72] & 0x0fffffff ) >> ( 32 - 24 ) ;
	out[65] = ( in[73] & 0x0fffffff ) >> ( 32 - 24 ) ;
	out[66] = ( in[74] & 0x0fffffff ) >> ( 32 - 24 ) ;
	out[67] = ( in[75] & 0x0fffffff ) >> ( 32 - 24 ) ;

	out[64] |= in[76] << 20 ;
	out[65] |= in[77] << 20 ;
	out[66] |= in[78] << 20 ;
	out[67] |= in[79] << 20 ;

	out[68] = ( in[76] & 0x0fffffff ) >> ( 32 - 20 ) ;
	out[69] = ( in[77] & 0x0fffffff ) >> ( 32 - 20 ) ;
	out[70] = ( in[78] & 0x0fffffff ) >> ( 32 - 20 ) ;
	out[71] = ( in[79] & 0x0fffffff ) >> ( 32 - 20 ) ;

	out[68] |= in[80] << 16 ;
	out[69] |= in[81] << 16 ;
	out[70] |= in[82] << 16 ;
	out[71] |= in[83] << 16 ;

	out[72] = ( in[80] & 0x0fffffff ) >> ( 32 - 16 ) ;
	out[73] = ( in[81] & 0x0fffffff ) >> ( 32 - 16 ) ;
	out[74] = ( in[82] & 0x0fffffff ) >> ( 32 - 16 ) ;
	out[75] = ( in[83] & 0x0fffffff ) >> ( 32 - 16 ) ;

	out[72] |= in[84] << 12 ;
	out[73] |= in[85] << 12 ;
	out[74] |= in[86] << 12 ;
	out[75] |= in[87] << 12 ;

	out[76] = ( in[84] & 0x0fffffff ) >> ( 32 - 12 ) ;
	out[77] = ( in[85] & 0x0fffffff ) >> ( 32 - 12 ) ;
	out[78] = ( in[86] & 0x0fffffff ) >> ( 32 - 12 ) ;
	out[79] = ( in[87] & 0x0fffffff ) >> ( 32 - 12 ) ;

	out[76] |= in[88] << 8 ;
	out[77] |= in[89] << 8 ;
	out[78] |= in[90] << 8 ;
	out[79] |= in[91] << 8 ;

	out[80] = ( in[88] & 0x0fffffff ) >> ( 32 - 8 ) ;
	out[81] = ( in[89] & 0x0fffffff ) >> ( 32 - 8 ) ;
	out[82] = ( in[90] & 0x0fffffff ) >> ( 32 - 8 ) ;
	out[83] = ( in[91] & 0x0fffffff ) >> ( 32 - 8 ) ;

	out[80] |= in[92] << 4 ;
	out[81] |= in[93] << 4 ;
	out[82] |= in[94] << 4 ;
	out[83] |= in[95] << 4 ;

	out[84] = ( in[96] & 0x0fffffff ) << 0 ;
	out[85] = ( in[97] & 0x0fffffff ) << 0 ;
	out[86] = ( in[98] & 0x0fffffff ) << 0 ;
	out[87] = ( in[99] & 0x0fffffff ) << 0 ;

	out[84] |= in[100] << 28 ;
	out[85] |= in[101] << 28 ;
	out[86] |= in[102] << 28 ;
	out[87] |= in[103] << 28 ;

	out[88] = ( in[100] & 0x0fffffff ) >> ( 32 - 28 ) ;
	out[89] = ( in[101] & 0x0fffffff ) >> ( 32 - 28 ) ;
	out[90] = ( in[102] & 0x0fffffff ) >> ( 32 - 28 ) ;
	out[91] = ( in[103] & 0x0fffffff ) >> ( 32 - 28 ) ;

	out[88] |= in[104] << 24 ;
	out[89] |= in[105] << 24 ;
	out[90] |= in[106] << 24 ;
	out[91] |= in[107] << 24 ;

	out[92] = ( in[104] & 0x0fffffff ) >> ( 32 - 24 ) ;
	out[93] = ( in[105] & 0x0fffffff ) >> ( 32 - 24 ) ;
	out[94] = ( in[106] & 0x0fffffff ) >> ( 32 - 24 ) ;
	out[95] = ( in[107] & 0x0fffffff ) >> ( 32 - 24 ) ;

	out[92] |= in[108] << 20 ;
	out[93] |= in[109] << 20 ;
	out[94] |= in[110] << 20 ;
	out[95] |= in[111] << 20 ;

	out[96] = ( in[108] & 0x0fffffff ) >> ( 32 - 20 ) ;
	out[97] = ( in[109] & 0x0fffffff ) >> ( 32 - 20 ) ;
	out[98] = ( in[110] & 0x0fffffff ) >> ( 32 - 20 ) ;
	out[99] = ( in[111] & 0x0fffffff ) >> ( 32 - 20 ) ;

	out[96] |= in[112] << 16 ;
	out[97] |= in[113] << 16 ;
	out[98] |= in[114] << 16 ;
	out[99] |= in[115] << 16 ;

	out[100] = ( in[112] & 0x0fffffff ) >> ( 32 - 16 ) ;
	out[101] = ( in[113] & 0x0fffffff ) >> ( 32 - 16 ) ;
	out[102] = ( in[114] & 0x0fffffff ) >> ( 32 - 16 ) ;
	out[103] = ( in[115] & 0x0fffffff ) >> ( 32 - 16 ) ;

	out[100] |= in[116] << 12 ;
	out[101] |= in[117] << 12 ;
	out[102] |= in[118] << 12 ;
	out[103] |= in[119] << 12 ;

	out[104] = ( in[116] & 0x0fffffff ) >> ( 32 - 12 ) ;
	out[105] = ( in[117] & 0x0fffffff ) >> ( 32 - 12 ) ;
	out[106] = ( in[118] & 0x0fffffff ) >> ( 32 - 12 ) ;
	out[107] = ( in[119] & 0x0fffffff ) >> ( 32 - 12 ) ;

	out[104] |= in[120] << 8 ;
	out[105] |= in[121] << 8 ;
	out[106] |= in[122] << 8 ;
	out[107] |= in[123] << 8 ;

	out[108] = ( in[120] & 0x0fffffff ) >> ( 32 - 8 ) ;
	out[109] = ( in[121] & 0x0fffffff ) >> ( 32 - 8 ) ;
	out[110] = ( in[122] & 0x0fffffff ) >> ( 32 - 8 ) ;
	out[111] = ( in[123] & 0x0fffffff ) >> ( 32 - 8 ) ;

	out[108] |= in[124] << 4 ;
	out[109] |= in[125] << 4 ;
	out[110] |= in[126] << 4 ;
	out[111] |= in[127] << 4 ;
}


// 29-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c29(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x1fffffff ) << 0 ;
	out[1] = ( in[1] & 0x1fffffff ) << 0 ;
	out[2] = ( in[2] & 0x1fffffff ) << 0 ;
	out[3] = ( in[3] & 0x1fffffff ) << 0 ;

	out[0] |= in[4] << 29 ;
	out[1] |= in[5] << 29 ;
	out[2] |= in[6] << 29 ;
	out[3] |= in[7] << 29 ;

	out[4] = ( in[4] & 0x1fffffff ) >> ( 32 - 29 ) ;
	out[5] = ( in[5] & 0x1fffffff ) >> ( 32 - 29 ) ;
	out[6] = ( in[6] & 0x1fffffff ) >> ( 32 - 29 ) ;
	out[7] = ( in[7] & 0x1fffffff ) >> ( 32 - 29 ) ;

	out[4] |= in[8] << 26 ;
	out[5] |= in[9] << 26 ;
	out[6] |= in[10] << 26 ;
	out[7] |= in[11] << 26 ;

	out[8] = ( in[8] & 0x1fffffff ) >> ( 32 - 26 ) ;
	out[9] = ( in[9] & 0x1fffffff ) >> ( 32 - 26 ) ;
	out[10] = ( in[10] & 0x1fffffff ) >> ( 32 - 26 ) ;
	out[11] = ( in[11] & 0x1fffffff ) >> ( 32 - 26 ) ;

	out[8] |= in[12] << 23 ;
	out[9] |= in[13] << 23 ;
	out[10] |= in[14] << 23 ;
	out[11] |= in[15] << 23 ;

	out[12] = ( in[12] & 0x1fffffff ) >> ( 32 - 23 ) ;
	out[13] = ( in[13] & 0x1fffffff ) >> ( 32 - 23 ) ;
	out[14] = ( in[14] & 0x1fffffff ) >> ( 32 - 23 ) ;
	out[15] = ( in[15] & 0x1fffffff ) >> ( 32 - 23 ) ;

	out[12] |= in[16] << 20 ;
	out[13] |= in[17] << 20 ;
	out[14] |= in[18] << 20 ;
	out[15] |= in[19] << 20 ;

	out[16] = ( in[16] & 0x1fffffff ) >> ( 32 - 20 ) ;
	out[17] = ( in[17] & 0x1fffffff ) >> ( 32 - 20 ) ;
	out[18] = ( in[18] & 0x1fffffff ) >> ( 32 - 20 ) ;
	out[19] = ( in[19] & 0x1fffffff ) >> ( 32 - 20 ) ;

	out[16] |= in[20] << 17 ;
	out[17] |= in[21] << 17 ;
	out[18] |= in[22] << 17 ;
	out[19] |= in[23] << 17 ;

	out[20] = ( in[20] & 0x1fffffff ) >> ( 32 - 17 ) ;
	out[21] = ( in[21] & 0x1fffffff ) >> ( 32 - 17 ) ;
	out[22] = ( in[22] & 0x1fffffff ) >> ( 32 - 17 ) ;
	out[23] = ( in[23] & 0x1fffffff ) >> ( 32 - 17 ) ;

	out[20] |= in[24] << 14 ;
	out[21] |= in[25] << 14 ;
	out[22] |= in[26] << 14 ;
	out[23] |= in[27] << 14 ;

	out[24] = ( in[24] & 0x1fffffff ) >> ( 32 - 14 ) ;
	out[25] = ( in[25] & 0x1fffffff ) >> ( 32 - 14 ) ;
	out[26] = ( in[26] & 0x1fffffff ) >> ( 32 - 14 ) ;
	out[27] = ( in[27] & 0x1fffffff ) >> ( 32 - 14 ) ;

	out[24] |= in[28] << 11 ;
	out[25] |= in[29] << 11 ;
	out[26] |= in[30] << 11 ;
	out[27] |= in[31] << 11 ;

	out[28] = ( in[28] & 0x1fffffff ) >> ( 32 - 11 ) ;
	out[29] = ( in[29] & 0x1fffffff ) >> ( 32 - 11 ) ;
	out[30] = ( in[30] & 0x1fffffff ) >> ( 32 - 11 ) ;
	out[31] = ( in[31] & 0x1fffffff ) >> ( 32 - 11 ) ;

	out[28] |= in[32] << 8 ;
	out[29] |= in[33] << 8 ;
	out[30] |= in[34] << 8 ;
	out[31] |= in[35] << 8 ;

	out[32] = ( in[32] & 0x1fffffff ) >> ( 32 - 8 ) ;
	out[33] = ( in[33] & 0x1fffffff ) >> ( 32 - 8 ) ;
	out[34] = ( in[34] & 0x1fffffff ) >> ( 32 - 8 ) ;
	out[35] = ( in[35] & 0x1fffffff ) >> ( 32 - 8 ) ;

	out[32] |= in[36] << 5 ;
	out[33] |= in[37] << 5 ;
	out[34] |= in[38] << 5 ;
	out[35] |= in[39] << 5 ;

	out[36] = ( in[36] & 0x1fffffff ) >> ( 32 - 5 ) ;
	out[37] = ( in[37] & 0x1fffffff ) >> ( 32 - 5 ) ;
	out[38] = ( in[38] & 0x1fffffff ) >> ( 32 - 5 ) ;
	out[39] = ( in[39] & 0x1fffffff ) >> ( 32 - 5 ) ;

	out[36] |= ( in[40] & 0x1fffffff ) << 2 ;
	out[37] |= ( in[41] & 0x1fffffff ) << 2 ;
	out[38] |= ( in[42] & 0x1fffffff ) << 2 ;
	out[39] |= ( in[43] & 0x1fffffff ) << 2 ;

	out[36] |= in[44] << 31 ;
	out[37] |= in[45] << 31 ;
	out[38] |= in[46] << 31 ;
	out[39] |= in[47] << 31 ;

	out[40] = ( in[44] & 0x1fffffff ) >> ( 32 - 31 ) ;
	out[41] = ( in[45] & 0x1fffffff ) >> ( 32 - 31 ) ;
	out[42] = ( in[46] & 0x1fffffff ) >> ( 32 - 31 ) ;
	out[43] = ( in[47] & 0x1fffffff ) >> ( 32 - 31 ) ;

	out[40] |= in[48] << 28 ;
	out[41] |= in[49] << 28 ;
	out[42] |= in[50] << 28 ;
	out[43] |= in[51] << 28 ;

	out[44] = ( in[48] & 0x1fffffff ) >> ( 32 - 28 ) ;
	out[45] = ( in[49] & 0x1fffffff ) >> ( 32 - 28 ) ;
	out[46] = ( in[50] & 0x1fffffff ) >> ( 32 - 28 ) ;
	out[47] = ( in[51] & 0x1fffffff ) >> ( 32 - 28 ) ;

	out[44] |= in[52] << 25 ;
	out[45] |= in[53] << 25 ;
	out[46] |= in[54] << 25 ;
	out[47] |= in[55] << 25 ;

	out[48] = ( in[52] & 0x1fffffff ) >> ( 32 - 25 ) ;
	out[49] = ( in[53] & 0x1fffffff ) >> ( 32 - 25 ) ;
	out[50] = ( in[54] & 0x1fffffff ) >> ( 32 - 25 ) ;
	out[51] = ( in[55] & 0x1fffffff ) >> ( 32 - 25 ) ;

	out[48] |= in[56] << 22 ;
	out[49] |= in[57] << 22 ;
	out[50] |= in[58] << 22 ;
	out[51] |= in[59] << 22 ;

	out[52] = ( in[56] & 0x1fffffff ) >> ( 32 - 22 ) ;
	out[53] = ( in[57] & 0x1fffffff ) >> ( 32 - 22 ) ;
	out[54] = ( in[58] & 0x1fffffff ) >> ( 32 - 22 ) ;
	out[55] = ( in[59] & 0x1fffffff ) >> ( 32 - 22 ) ;

	out[52] |= in[60] << 19 ;
	out[53] |= in[61] << 19 ;
	out[54] |= in[62] << 19 ;
	out[55] |= in[63] << 19 ;

	out[56] = ( in[60] & 0x1fffffff ) >> ( 32 - 19 ) ;
	out[57] = ( in[61] & 0x1fffffff ) >> ( 32 - 19 ) ;
	out[58] = ( in[62] & 0x1fffffff ) >> ( 32 - 19 ) ;
	out[59] = ( in[63] & 0x1fffffff ) >> ( 32 - 19 ) ;

	out[56] |= in[64] << 16 ;
	out[57] |= in[65] << 16 ;
	out[58] |= in[66] << 16 ;
	out[59] |= in[67] << 16 ;

	out[60] = ( in[64] & 0x1fffffff ) >> ( 32 - 16 ) ;
	out[61] = ( in[65] & 0x1fffffff ) >> ( 32 - 16 ) ;
	out[62] = ( in[66] & 0x1fffffff ) >> ( 32 - 16 ) ;
	out[63] = ( in[67] & 0x1fffffff ) >> ( 32 - 16 ) ;

	out[60] |= in[68] << 13 ;
	out[61] |= in[69] << 13 ;
	out[62] |= in[70] << 13 ;
	out[63] |= in[71] << 13 ;

	out[64] = ( in[68] & 0x1fffffff ) >> ( 32 - 13 ) ;
	out[65] = ( in[69] & 0x1fffffff ) >> ( 32 - 13 ) ;
	out[66] = ( in[70] & 0x1fffffff ) >> ( 32 - 13 ) ;
	out[67] = ( in[71] & 0x1fffffff ) >> ( 32 - 13 ) ;

	out[64] |= in[72] << 10 ;
	out[65] |= in[73] << 10 ;
	out[66] |= in[74] << 10 ;
	out[67] |= in[75] << 10 ;

	out[68] = ( in[72] & 0x1fffffff ) >> ( 32 - 10 ) ;
	out[69] = ( in[73] & 0x1fffffff ) >> ( 32 - 10 ) ;
	out[70] = ( in[74] & 0x1fffffff ) >> ( 32 - 10 ) ;
	out[71] = ( in[75] & 0x1fffffff ) >> ( 32 - 10 ) ;

	out[68] |= in[76] << 7 ;
	out[69] |= in[77] << 7 ;
	out[70] |= in[78] << 7 ;
	out[71] |= in[79] << 7 ;

	out[72] = ( in[76] & 0x1fffffff ) >> ( 32 - 7 ) ;
	out[73] = ( in[77] & 0x1fffffff ) >> ( 32 - 7 ) ;
	out[74] = ( in[78] & 0x1fffffff ) >> ( 32 - 7 ) ;
	out[75] = ( in[79] & 0x1fffffff ) >> ( 32 - 7 ) ;

	out[72] |= in[80] << 4 ;
	out[73] |= in[81] << 4 ;
	out[74] |= in[82] << 4 ;
	out[75] |= in[83] << 4 ;

	out[76] = ( in[80] & 0x1fffffff ) >> ( 32 - 4 ) ;
	out[77] = ( in[81] & 0x1fffffff ) >> ( 32 - 4 ) ;
	out[78] = ( in[82] & 0x1fffffff ) >> ( 32 - 4 ) ;
	out[79] = ( in[83] & 0x1fffffff ) >> ( 32 - 4 ) ;

	out[76] |= ( in[84] & 0x1fffffff ) << 1 ;
	out[77] |= ( in[85] & 0x1fffffff ) << 1 ;
	out[78] |= ( in[86] & 0x1fffffff ) << 1 ;
	out[79] |= ( in[87] & 0x1fffffff ) << 1 ;

	out[76] |= in[88] << 30 ;
	out[77] |= in[89] << 30 ;
	out[78] |= in[90] << 30 ;
	out[79] |= in[91] << 30 ;

	out[80] = ( in[88] & 0x1fffffff ) >> ( 32 - 30 ) ;
	out[81] = ( in[89] & 0x1fffffff ) >> ( 32 - 30 ) ;
	out[82] = ( in[90] & 0x1fffffff ) >> ( 32 - 30 ) ;
	out[83] = ( in[91] & 0x1fffffff ) >> ( 32 - 30 ) ;

	out[80] |= in[92] << 27 ;
	out[81] |= in[93] << 27 ;
	out[82] |= in[94] << 27 ;
	out[83] |= in[95] << 27 ;

	out[84] = ( in[92] & 0x1fffffff ) >> ( 32 - 27 ) ;
	out[85] = ( in[93] & 0x1fffffff ) >> ( 32 - 27 ) ;
	out[86] = ( in[94] & 0x1fffffff ) >> ( 32 - 27 ) ;
	out[87] = ( in[95] & 0x1fffffff ) >> ( 32 - 27 ) ;

	out[84] |= in[96] << 24 ;
	out[85] |= in[97] << 24 ;
	out[86] |= in[98] << 24 ;
	out[87] |= in[99] << 24 ;

	out[88] = ( in[96] & 0x1fffffff ) >> ( 32 - 24 ) ;
	out[89] = ( in[97] & 0x1fffffff ) >> ( 32 - 24 ) ;
	out[90] = ( in[98] & 0x1fffffff ) >> ( 32 - 24 ) ;
	out[91] = ( in[99] & 0x1fffffff ) >> ( 32 - 24 ) ;

	out[88] |= in[100] << 21 ;
	out[89] |= in[101] << 21 ;
	out[90] |= in[102] << 21 ;
	out[91] |= in[103] << 21 ;

	out[92] = ( in[100] & 0x1fffffff ) >> ( 32 - 21 ) ;
	out[93] = ( in[101] & 0x1fffffff ) >> ( 32 - 21 ) ;
	out[94] = ( in[102] & 0x1fffffff ) >> ( 32 - 21 ) ;
	out[95] = ( in[103] & 0x1fffffff ) >> ( 32 - 21 ) ;

	out[92] |= in[104] << 18 ;
	out[93] |= in[105] << 18 ;
	out[94] |= in[106] << 18 ;
	out[95] |= in[107] << 18 ;

	out[96] = ( in[104] & 0x1fffffff ) >> ( 32 - 18 ) ;
	out[97] = ( in[105] & 0x1fffffff ) >> ( 32 - 18 ) ;
	out[98] = ( in[106] & 0x1fffffff ) >> ( 32 - 18 ) ;
	out[99] = ( in[107] & 0x1fffffff ) >> ( 32 - 18 ) ;

	out[96] |= in[108] << 15 ;
	out[97] |= in[109] << 15 ;
	out[98] |= in[110] << 15 ;
	out[99] |= in[111] << 15 ;

	out[100] = ( in[108] & 0x1fffffff ) >> ( 32 - 15 ) ;
	out[101] = ( in[109] & 0x1fffffff ) >> ( 32 - 15 ) ;
	out[102] = ( in[110] & 0x1fffffff ) >> ( 32 - 15 ) ;
	out[103] = ( in[111] & 0x1fffffff ) >> ( 32 - 15 ) ;

	out[100] |= in[112] << 12 ;
	out[101] |= in[113] << 12 ;
	out[102] |= in[114] << 12 ;
	out[103] |= in[115] << 12 ;

	out[104] = ( in[112] & 0x1fffffff ) >> ( 32 - 12 ) ;
	out[105] = ( in[113] & 0x1fffffff ) >> ( 32 - 12 ) ;
	out[106] = ( in[114] & 0x1fffffff ) >> ( 32 - 12 ) ;
	out[107] = ( in[115] & 0x1fffffff ) >> ( 32 - 12 ) ;

	out[104] |= in[116] << 9 ;
	out[105] |= in[117] << 9 ;
	out[106] |= in[118] << 9 ;
	out[107] |= in[119] << 9 ;

	out[108] = ( in[116] & 0x1fffffff ) >> ( 32 - 9 ) ;
	out[109] = ( in[117] & 0x1fffffff ) >> ( 32 - 9 ) ;
	out[110] = ( in[118] & 0x1fffffff ) >> ( 32 - 9 ) ;
	out[111] = ( in[119] & 0x1fffffff ) >> ( 32 - 9 ) ;

	out[108] |= in[120] << 6 ;
	out[109] |= in[121] << 6 ;
	out[110] |= in[122] << 6 ;
	out[111] |= in[123] << 6 ;

	out[112] = ( in[120] & 0x1fffffff ) >> ( 32 - 6 ) ;
	out[113] = ( in[121] & 0x1fffffff ) >> ( 32 - 6 ) ;
	out[114] = ( in[122] & 0x1fffffff ) >> ( 32 - 6 ) ;
	out[115] = ( in[123] & 0x1fffffff ) >> ( 32 - 6 ) ;

	out[112] |= in[124] << 3 ;
	out[113] |= in[125] << 3 ;
	out[114] |= in[126] << 3 ;
	out[115] |= in[127] << 3 ;
}


// 30-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c30(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x3fffffff ) << 0 ;
	out[1] = ( in[1] & 0x3fffffff ) << 0 ;
	out[2] = ( in[2] & 0x3fffffff ) << 0 ;
	out[3] = ( in[3] & 0x3fffffff ) << 0 ;

	out[0] |= in[4] << 30 ;
	out[1] |= in[5] << 30 ;
	out[2] |= in[6] << 30 ;
	out[3] |= in[7] << 30 ;

	out[4] = ( in[4] & 0x3fffffff ) >> ( 32 - 30 ) ;
	out[5] = ( in[5] & 0x3fffffff ) >> ( 32 - 30 ) ;
	out[6] = ( in[6] & 0x3fffffff ) >> ( 32 - 30 ) ;
	out[7] = ( in[7] & 0x3fffffff ) >> ( 32 - 30 ) ;

	out[4] |= in[8] << 28 ;
	out[5] |= in[9] << 28 ;
	out[6] |= in[10] << 28 ;
	out[7] |= in[11] << 28 ;

	out[8] = ( in[8] & 0x3fffffff ) >> ( 32 - 28 ) ;
	out[9] = ( in[9] & 0x3fffffff ) >> ( 32 - 28 ) ;
	out[10] = ( in[10] & 0x3fffffff ) >> ( 32 - 28 ) ;
	out[11] = ( in[11] & 0x3fffffff ) >> ( 32 - 28 ) ;

	out[8] |= in[12] << 26 ;
	out[9] |= in[13] << 26 ;
	out[10] |= in[14] << 26 ;
	out[11] |= in[15] << 26 ;

	out[12] = ( in[12] & 0x3fffffff ) >> ( 32 - 26 ) ;
	out[13] = ( in[13] & 0x3fffffff ) >> ( 32 - 26 ) ;
	out[14] = ( in[14] & 0x3fffffff ) >> ( 32 - 26 ) ;
	out[15] = ( in[15] & 0x3fffffff ) >> ( 32 - 26 ) ;

	out[12] |= in[16] << 24 ;
	out[13] |= in[17] << 24 ;
	out[14] |= in[18] << 24 ;
	out[15] |= in[19] << 24 ;

	out[16] = ( in[16] & 0x3fffffff ) >> ( 32 - 24 ) ;
	out[17] = ( in[17] & 0x3fffffff ) >> ( 32 - 24 ) ;
	out[18] = ( in[18] & 0x3fffffff ) >> ( 32 - 24 ) ;
	out[19] = ( in[19] & 0x3fffffff ) >> ( 32 - 24 ) ;

	out[16] |= in[20] << 22 ;
	out[17] |= in[21] << 22 ;
	out[18] |= in[22] << 22 ;
	out[19] |= in[23] << 22 ;

	out[20] = ( in[20] & 0x3fffffff ) >> ( 32 - 22 ) ;
	out[21] = ( in[21] & 0x3fffffff ) >> ( 32 - 22 ) ;
	out[22] = ( in[22] & 0x3fffffff ) >> ( 32 - 22 ) ;
	out[23] = ( in[23] & 0x3fffffff ) >> ( 32 - 22 ) ;

	out[20] |= in[24] << 20 ;
	out[21] |= in[25] << 20 ;
	out[22] |= in[26] << 20 ;
	out[23] |= in[27] << 20 ;

	out[24] = ( in[24] & 0x3fffffff ) >> ( 32 - 20 ) ;
	out[25] = ( in[25] & 0x3fffffff ) >> ( 32 - 20 ) ;
	out[26] = ( in[26] & 0x3fffffff ) >> ( 32 - 20 ) ;
	out[27] = ( in[27] & 0x3fffffff ) >> ( 32 - 20 ) ;

	out[24] |= in[28] << 18 ;
	out[25] |= in[29] << 18 ;
	out[26] |= in[30] << 18 ;
	out[27] |= in[31] << 18 ;

	out[28] = ( in[28] & 0x3fffffff ) >> ( 32 - 18 ) ;
	out[29] = ( in[29] & 0x3fffffff ) >> ( 32 - 18 ) ;
	out[30] = ( in[30] & 0x3fffffff ) >> ( 32 - 18 ) ;
	out[31] = ( in[31] & 0x3fffffff ) >> ( 32 - 18 ) ;

	out[28] |= in[32] << 16 ;
	out[29] |= in[33] << 16 ;
	out[30] |= in[34] << 16 ;
	out[31] |= in[35] << 16 ;

	out[32] = ( in[32] & 0x3fffffff ) >> ( 32 - 16 ) ;
	out[33] = ( in[33] & 0x3fffffff ) >> ( 32 - 16 ) ;
	out[34] = ( in[34] & 0x3fffffff ) >> ( 32 - 16 ) ;
	out[35] = ( in[35] & 0x3fffffff ) >> ( 32 - 16 ) ;

	out[32] |= in[36] << 14 ;
	out[33] |= in[37] << 14 ;
	out[34] |= in[38] << 14 ;
	out[35] |= in[39] << 14 ;

	out[36] = ( in[36] & 0x3fffffff ) >> ( 32 - 14 ) ;
	out[37] = ( in[37] & 0x3fffffff ) >> ( 32 - 14 ) ;
	out[38] = ( in[38] & 0x3fffffff ) >> ( 32 - 14 ) ;
	out[39] = ( in[39] & 0x3fffffff ) >> ( 32 - 14 ) ;

	out[36] |= in[40] << 12 ;
	out[37] |= in[41] << 12 ;
	out[38] |= in[42] << 12 ;
	out[39] |= in[43] << 12 ;

	out[40] = ( in[40] & 0x3fffffff ) >> ( 32 - 12 ) ;
	out[41] = ( in[41] & 0x3fffffff ) >> ( 32 - 12 ) ;
	out[42] = ( in[42] & 0x3fffffff ) >> ( 32 - 12 ) ;
	out[43] = ( in[43] & 0x3fffffff ) >> ( 32 - 12 ) ;

	out[40] |= in[44] << 10 ;
	out[41] |= in[45] << 10 ;
	out[42] |= in[46] << 10 ;
	out[43] |= in[47] << 10 ;

	out[44] = ( in[44] & 0x3fffffff ) >> ( 32 - 10 ) ;
	out[45] = ( in[45] & 0x3fffffff ) >> ( 32 - 10 ) ;
	out[46] = ( in[46] & 0x3fffffff ) >> ( 32 - 10 ) ;
	out[47] = ( in[47] & 0x3fffffff ) >> ( 32 - 10 ) ;

	out[44] |= in[48] << 8 ;
	out[45] |= in[49] << 8 ;
	out[46] |= in[50] << 8 ;
	out[47] |= in[51] << 8 ;

	out[48] = ( in[48] & 0x3fffffff ) >> ( 32 - 8 ) ;
	out[49] = ( in[49] & 0x3fffffff ) >> ( 32 - 8 ) ;
	out[50] = ( in[50] & 0x3fffffff ) >> ( 32 - 8 ) ;
	out[51] = ( in[51] & 0x3fffffff ) >> ( 32 - 8 ) ;

	out[48] |= in[52] << 6 ;
	out[49] |= in[53] << 6 ;
	out[50] |= in[54] << 6 ;
	out[51] |= in[55] << 6 ;

	out[52] = ( in[52] & 0x3fffffff ) >> ( 32 - 6 ) ;
	out[53] = ( in[53] & 0x3fffffff ) >> ( 32 - 6 ) ;
	out[54] = ( in[54] & 0x3fffffff ) >> ( 32 - 6 ) ;
	out[55] = ( in[55] & 0x3fffffff ) >> ( 32 - 6 ) ;

	out[52] |= in[56] << 4 ;
	out[53] |= in[57] << 4 ;
	out[54] |= in[58] << 4 ;
	out[55] |= in[59] << 4 ;

	out[56] = ( in[56] & 0x3fffffff ) >> ( 32 - 4 ) ;
	out[57] = ( in[57] & 0x3fffffff ) >> ( 32 - 4 ) ;
	out[58] = ( in[58] & 0x3fffffff ) >> ( 32 - 4 ) ;
	out[59] = ( in[59] & 0x3fffffff ) >> ( 32 - 4 ) ;

	out[56] |= in[60] << 2 ;
	out[57] |= in[61] << 2 ;
	out[58] |= in[62] << 2 ;
	out[59] |= in[63] << 2 ;

	out[60] = ( in[64] & 0x3fffffff ) << 0 ;
	out[61] = ( in[65] & 0x3fffffff ) << 0 ;
	out[62] = ( in[66] & 0x3fffffff ) << 0 ;
	out[63] = ( in[67] & 0x3fffffff ) << 0 ;

	out[60] |= in[68] << 30 ;
	out[61] |= in[69] << 30 ;
	out[62] |= in[70] << 30 ;
	out[63] |= in[71] << 30 ;

	out[64] = ( in[68] & 0x3fffffff ) >> ( 32 - 30 ) ;
	out[65] = ( in[69] & 0x3fffffff ) >> ( 32 - 30 ) ;
	out[66] = ( in[70] & 0x3fffffff ) >> ( 32 - 30 ) ;
	out[67] = ( in[71] & 0x3fffffff ) >> ( 32 - 30 ) ;

	out[64] |= in[72] << 28 ;
	out[65] |= in[73] << 28 ;
	out[66] |= in[74] << 28 ;
	out[67] |= in[75] << 28 ;

	out[68] = ( in[72] & 0x3fffffff ) >> ( 32 - 28 ) ;
	out[69] = ( in[73] & 0x3fffffff ) >> ( 32 - 28 ) ;
	out[70] = ( in[74] & 0x3fffffff ) >> ( 32 - 28 ) ;
	out[71] = ( in[75] & 0x3fffffff ) >> ( 32 - 28 ) ;

	out[68] |= in[76] << 26 ;
	out[69] |= in[77] << 26 ;
	out[70] |= in[78] << 26 ;
	out[71] |= in[79] << 26 ;

	out[72] = ( in[76] & 0x3fffffff ) >> ( 32 - 26 ) ;
	out[73] = ( in[77] & 0x3fffffff ) >> ( 32 - 26 ) ;
	out[74] = ( in[78] & 0x3fffffff ) >> ( 32 - 26 ) ;
	out[75] = ( in[79] & 0x3fffffff ) >> ( 32 - 26 ) ;

	out[72] |= in[80] << 24 ;
	out[73] |= in[81] << 24 ;
	out[74] |= in[82] << 24 ;
	out[75] |= in[83] << 24 ;

	out[76] = ( in[80] & 0x3fffffff ) >> ( 32 - 24 ) ;
	out[77] = ( in[81] & 0x3fffffff ) >> ( 32 - 24 ) ;
	out[78] = ( in[82] & 0x3fffffff ) >> ( 32 - 24 ) ;
	out[79] = ( in[83] & 0x3fffffff ) >> ( 32 - 24 ) ;

	out[76] |= in[84] << 22 ;
	out[77] |= in[85] << 22 ;
	out[78] |= in[86] << 22 ;
	out[79] |= in[87] << 22 ;

	out[80] = ( in[84] & 0x3fffffff ) >> ( 32 - 22 ) ;
	out[81] = ( in[85] & 0x3fffffff ) >> ( 32 - 22 ) ;
	out[82] = ( in[86] & 0x3fffffff ) >> ( 32 - 22 ) ;
	out[83] = ( in[87] & 0x3fffffff ) >> ( 32 - 22 ) ;

	out[80] |= in[88] << 20 ;
	out[81] |= in[89] << 20 ;
	out[82] |= in[90] << 20 ;
	out[83] |= in[91] << 20 ;

	out[84] = ( in[88] & 0x3fffffff ) >> ( 32 - 20 ) ;
	out[85] = ( in[89] & 0x3fffffff ) >> ( 32 - 20 ) ;
	out[86] = ( in[90] & 0x3fffffff ) >> ( 32 - 20 ) ;
	out[87] = ( in[91] & 0x3fffffff ) >> ( 32 - 20 ) ;

	out[84] |= in[92] << 18 ;
	out[85] |= in[93] << 18 ;
	out[86] |= in[94] << 18 ;
	out[87] |= in[95] << 18 ;

	out[88] = ( in[92] & 0x3fffffff ) >> ( 32 - 18 ) ;
	out[89] = ( in[93] & 0x3fffffff ) >> ( 32 - 18 ) ;
	out[90] = ( in[94] & 0x3fffffff ) >> ( 32 - 18 ) ;
	out[91] = ( in[95] & 0x3fffffff ) >> ( 32 - 18 ) ;

	out[88] |= in[96] << 16 ;
	out[89] |= in[97] << 16 ;
	out[90] |= in[98] << 16 ;
	out[91] |= in[99] << 16 ;

	out[92] = ( in[96] & 0x3fffffff ) >> ( 32 - 16 ) ;
	out[93] = ( in[97] & 0x3fffffff ) >> ( 32 - 16 ) ;
	out[94] = ( in[98] & 0x3fffffff ) >> ( 32 - 16 ) ;
	out[95] = ( in[99] & 0x3fffffff ) >> ( 32 - 16 ) ;

	out[92] |= in[100] << 14 ;
	out[93] |= in[101] << 14 ;
	out[94] |= in[102] << 14 ;
	out[95] |= in[103] << 14 ;

	out[96] = ( in[100] & 0x3fffffff ) >> ( 32 - 14 ) ;
	out[97] = ( in[101] & 0x3fffffff ) >> ( 32 - 14 ) ;
	out[98] = ( in[102] & 0x3fffffff ) >> ( 32 - 14 ) ;
	out[99] = ( in[103] & 0x3fffffff ) >> ( 32 - 14 ) ;

	out[96] |= in[104] << 12 ;
	out[97] |= in[105] << 12 ;
	out[98] |= in[106] << 12 ;
	out[99] |= in[107] << 12 ;

	out[100] = ( in[104] & 0x3fffffff ) >> ( 32 - 12 ) ;
	out[101] = ( in[105] & 0x3fffffff ) >> ( 32 - 12 ) ;
	out[102] = ( in[106] & 0x3fffffff ) >> ( 32 - 12 ) ;
	out[103] = ( in[107] & 0x3fffffff ) >> ( 32 - 12 ) ;

	out[100] |= in[108] << 10 ;
	out[101] |= in[109] << 10 ;
	out[102] |= in[110] << 10 ;
	out[103] |= in[111] << 10 ;

	out[104] = ( in[108] & 0x3fffffff ) >> ( 32 - 10 ) ;
	out[105] = ( in[109] & 0x3fffffff ) >> ( 32 - 10 ) ;
	out[106] = ( in[110] & 0x3fffffff ) >> ( 32 - 10 ) ;
	out[107] = ( in[111] & 0x3fffffff ) >> ( 32 - 10 ) ;

	out[104] |= in[112] << 8 ;
	out[105] |= in[113] << 8 ;
	out[106] |= in[114] << 8 ;
	out[107] |= in[115] << 8 ;

	out[108] = ( in[112] & 0x3fffffff ) >> ( 32 - 8 ) ;
	out[109] = ( in[113] & 0x3fffffff ) >> ( 32 - 8 ) ;
	out[110] = ( in[114] & 0x3fffffff ) >> ( 32 - 8 ) ;
	out[111] = ( in[115] & 0x3fffffff ) >> ( 32 - 8 ) ;

	out[108] |= in[116] << 6 ;
	out[109] |= in[117] << 6 ;
	out[110] |= in[118] << 6 ;
	out[111] |= in[119] << 6 ;

	out[112] = ( in[116] & 0x3fffffff ) >> ( 32 - 6 ) ;
	out[113] = ( in[117] & 0x3fffffff ) >> ( 32 - 6 ) ;
	out[114] = ( in[118] & 0x3fffffff ) >> ( 32 - 6 ) ;
	out[115] = ( in[119] & 0x3fffffff ) >> ( 32 - 6 ) ;

	out[112] |= in[120] << 4 ;
	out[113] |= in[121] << 4 ;
	out[114] |= in[122] << 4 ;
	out[115] |= in[123] << 4 ;

	out[116] = ( in[120] & 0x3fffffff ) >> ( 32 - 4 ) ;
	out[117] = ( in[121] & 0x3fffffff ) >> ( 32 - 4 ) ;
	out[118] = ( in[122] & 0x3fffffff ) >> ( 32 - 4 ) ;
	out[119] = ( in[123] & 0x3fffffff ) >> ( 32 - 4 ) ;

	out[116] |= in[124] << 2 ;
	out[117] |= in[125] << 2 ;
	out[118] |= in[126] << 2 ;
	out[119] |= in[127] << 2 ;
}


// 31-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c31(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	out[0] = ( in[0] & 0x7fffffff ) << 0 ;
	out[1] = ( in[1] & 0x7fffffff ) << 0 ;
	out[2] = ( in[2] & 0x7fffffff ) << 0 ;
	out[3] = ( in[3] & 0x7fffffff ) << 0 ;

	out[0] |= in[4] << 31 ;
	out[1] |= in[5] << 31 ;
	out[2] |= in[6] << 31 ;
	out[3] |= in[7] << 31 ;

	out[4] = ( in[4] & 0x7fffffff ) >> ( 32 - 31 ) ;
	out[5] = ( in[5] & 0x7fffffff ) >> ( 32 - 31 ) ;
	out[6] = ( in[6] & 0x7fffffff ) >> ( 32 - 31 ) ;
	out[7] = ( in[7] & 0x7fffffff ) >> ( 32 - 31 ) ;

	out[4] |= in[8] << 30 ;
	out[5] |= in[9] << 30 ;
	out[6] |= in[10] << 30 ;
	out[7] |= in[11] << 30 ;

	out[8] = ( in[8] & 0x7fffffff ) >> ( 32 - 30 ) ;
	out[9] = ( in[9] & 0x7fffffff ) >> ( 32 - 30 ) ;
	out[10] = ( in[10] & 0x7fffffff ) >> ( 32 - 30 ) ;
	out[11] = ( in[11] & 0x7fffffff ) >> ( 32 - 30 ) ;

	out[8] |= in[12] << 29 ;
	out[9] |= in[13] << 29 ;
	out[10] |= in[14] << 29 ;
	out[11] |= in[15] << 29 ;

	out[12] = ( in[12] & 0x7fffffff ) >> ( 32 - 29 ) ;
	out[13] = ( in[13] & 0x7fffffff ) >> ( 32 - 29 ) ;
	out[14] = ( in[14] & 0x7fffffff ) >> ( 32 - 29 ) ;
	out[15] = ( in[15] & 0x7fffffff ) >> ( 32 - 29 ) ;

	out[12] |= in[16] << 28 ;
	out[13] |= in[17] << 28 ;
	out[14] |= in[18] << 28 ;
	out[15] |= in[19] << 28 ;

	out[16] = ( in[16] & 0x7fffffff ) >> ( 32 - 28 ) ;
	out[17] = ( in[17] & 0x7fffffff ) >> ( 32 - 28 ) ;
	out[18] = ( in[18] & 0x7fffffff ) >> ( 32 - 28 ) ;
	out[19] = ( in[19] & 0x7fffffff ) >> ( 32 - 28 ) ;

	out[16] |= in[20] << 27 ;
	out[17] |= in[21] << 27 ;
	out[18] |= in[22] << 27 ;
	out[19] |= in[23] << 27 ;

	out[20] = ( in[20] & 0x7fffffff ) >> ( 32 - 27 ) ;
	out[21] = ( in[21] & 0x7fffffff ) >> ( 32 - 27 ) ;
	out[22] = ( in[22] & 0x7fffffff ) >> ( 32 - 27 ) ;
	out[23] = ( in[23] & 0x7fffffff ) >> ( 32 - 27 ) ;

	out[20] |= in[24] << 26 ;
	out[21] |= in[25] << 26 ;
	out[22] |= in[26] << 26 ;
	out[23] |= in[27] << 26 ;

	out[24] = ( in[24] & 0x7fffffff ) >> ( 32 - 26 ) ;
	out[25] = ( in[25] & 0x7fffffff ) >> ( 32 - 26 ) ;
	out[26] = ( in[26] & 0x7fffffff ) >> ( 32 - 26 ) ;
	out[27] = ( in[27] & 0x7fffffff ) >> ( 32 - 26 ) ;

	out[24] |= in[28] << 25 ;
	out[25] |= in[29] << 25 ;
	out[26] |= in[30] << 25 ;
	out[27] |= in[31] << 25 ;

	out[28] = ( in[28] & 0x7fffffff ) >> ( 32 - 25 ) ;
	out[29] = ( in[29] & 0x7fffffff ) >> ( 32 - 25 ) ;
	out[30] = ( in[30] & 0x7fffffff ) >> ( 32 - 25 ) ;
	out[31] = ( in[31] & 0x7fffffff ) >> ( 32 - 25 ) ;

	out[28] |= in[32] << 24 ;
	out[29] |= in[33] << 24 ;
	out[30] |= in[34] << 24 ;
	out[31] |= in[35] << 24 ;

	out[32] = ( in[32] & 0x7fffffff ) >> ( 32 - 24 ) ;
	out[33] = ( in[33] & 0x7fffffff ) >> ( 32 - 24 ) ;
	out[34] = ( in[34] & 0x7fffffff ) >> ( 32 - 24 ) ;
	out[35] = ( in[35] & 0x7fffffff ) >> ( 32 - 24 ) ;

	out[32] |= in[36] << 23 ;
	out[33] |= in[37] << 23 ;
	out[34] |= in[38] << 23 ;
	out[35] |= in[39] << 23 ;

	out[36] = ( in[36] & 0x7fffffff ) >> ( 32 - 23 ) ;
	out[37] = ( in[37] & 0x7fffffff ) >> ( 32 - 23 ) ;
	out[38] = ( in[38] & 0x7fffffff ) >> ( 32 - 23 ) ;
	out[39] = ( in[39] & 0x7fffffff ) >> ( 32 - 23 ) ;

	out[36] |= in[40] << 22 ;
	out[37] |= in[41] << 22 ;
	out[38] |= in[42] << 22 ;
	out[39] |= in[43] << 22 ;

	out[40] = ( in[40] & 0x7fffffff ) >> ( 32 - 22 ) ;
	out[41] = ( in[41] & 0x7fffffff ) >> ( 32 - 22 ) ;
	out[42] = ( in[42] & 0x7fffffff ) >> ( 32 - 22 ) ;
	out[43] = ( in[43] & 0x7fffffff ) >> ( 32 - 22 ) ;

	out[40] |= in[44] << 21 ;
	out[41] |= in[45] << 21 ;
	out[42] |= in[46] << 21 ;
	out[43] |= in[47] << 21 ;

	out[44] = ( in[44] & 0x7fffffff ) >> ( 32 - 21 ) ;
	out[45] = ( in[45] & 0x7fffffff ) >> ( 32 - 21 ) ;
	out[46] = ( in[46] & 0x7fffffff ) >> ( 32 - 21 ) ;
	out[47] = ( in[47] & 0x7fffffff ) >> ( 32 - 21 ) ;

	out[44] |= in[48] << 20 ;
	out[45] |= in[49] << 20 ;
	out[46] |= in[50] << 20 ;
	out[47] |= in[51] << 20 ;

	out[48] = ( in[48] & 0x7fffffff ) >> ( 32 - 20 ) ;
	out[49] = ( in[49] & 0x7fffffff ) >> ( 32 - 20 ) ;
	out[50] = ( in[50] & 0x7fffffff ) >> ( 32 - 20 ) ;
	out[51] = ( in[51] & 0x7fffffff ) >> ( 32 - 20 ) ;

	out[48] |= in[52] << 19 ;
	out[49] |= in[53] << 19 ;
	out[50] |= in[54] << 19 ;
	out[51] |= in[55] << 19 ;

	out[52] = ( in[52] & 0x7fffffff ) >> ( 32 - 19 ) ;
	out[53] = ( in[53] & 0x7fffffff ) >> ( 32 - 19 ) ;
	out[54] = ( in[54] & 0x7fffffff ) >> ( 32 - 19 ) ;
	out[55] = ( in[55] & 0x7fffffff ) >> ( 32 - 19 ) ;

	out[52] |= in[56] << 18 ;
	out[53] |= in[57] << 18 ;
	out[54] |= in[58] << 18 ;
	out[55] |= in[59] << 18 ;

	out[56] = ( in[56] & 0x7fffffff ) >> ( 32 - 18 ) ;
	out[57] = ( in[57] & 0x7fffffff ) >> ( 32 - 18 ) ;
	out[58] = ( in[58] & 0x7fffffff ) >> ( 32 - 18 ) ;
	out[59] = ( in[59] & 0x7fffffff ) >> ( 32 - 18 ) ;

	out[56] |= in[60] << 17 ;
	out[57] |= in[61] << 17 ;
	out[58] |= in[62] << 17 ;
	out[59] |= in[63] << 17 ;

	out[60] = ( in[60] & 0x7fffffff ) >> ( 32 - 17 ) ;
	out[61] = ( in[61] & 0x7fffffff ) >> ( 32 - 17 ) ;
	out[62] = ( in[62] & 0x7fffffff ) >> ( 32 - 17 ) ;
	out[63] = ( in[63] & 0x7fffffff ) >> ( 32 - 17 ) ;

	out[60] |= in[64] << 16 ;
	out[61] |= in[65] << 16 ;
	out[62] |= in[66] << 16 ;
	out[63] |= in[67] << 16 ;

	out[64] = ( in[64] & 0x7fffffff ) >> ( 32 - 16 ) ;
	out[65] = ( in[65] & 0x7fffffff ) >> ( 32 - 16 ) ;
	out[66] = ( in[66] & 0x7fffffff ) >> ( 32 - 16 ) ;
	out[67] = ( in[67] & 0x7fffffff ) >> ( 32 - 16 ) ;

	out[64] |= in[68] << 15 ;
	out[65] |= in[69] << 15 ;
	out[66] |= in[70] << 15 ;
	out[67] |= in[71] << 15 ;

	out[68] = ( in[68] & 0x7fffffff ) >> ( 32 - 15 ) ;
	out[69] = ( in[69] & 0x7fffffff ) >> ( 32 - 15 ) ;
	out[70] = ( in[70] & 0x7fffffff ) >> ( 32 - 15 ) ;
	out[71] = ( in[71] & 0x7fffffff ) >> ( 32 - 15 ) ;

	out[68] |= in[72] << 14 ;
	out[69] |= in[73] << 14 ;
	out[70] |= in[74] << 14 ;
	out[71] |= in[75] << 14 ;

	out[72] = ( in[72] & 0x7fffffff ) >> ( 32 - 14 ) ;
	out[73] = ( in[73] & 0x7fffffff ) >> ( 32 - 14 ) ;
	out[74] = ( in[74] & 0x7fffffff ) >> ( 32 - 14 ) ;
	out[75] = ( in[75] & 0x7fffffff ) >> ( 32 - 14 ) ;

	out[72] |= in[76] << 13 ;
	out[73] |= in[77] << 13 ;
	out[74] |= in[78] << 13 ;
	out[75] |= in[79] << 13 ;

	out[76] = ( in[76] & 0x7fffffff ) >> ( 32 - 13 ) ;
	out[77] = ( in[77] & 0x7fffffff ) >> ( 32 - 13 ) ;
	out[78] = ( in[78] & 0x7fffffff ) >> ( 32 - 13 ) ;
	out[79] = ( in[79] & 0x7fffffff ) >> ( 32 - 13 ) ;

	out[76] |= in[80] << 12 ;
	out[77] |= in[81] << 12 ;
	out[78] |= in[82] << 12 ;
	out[79] |= in[83] << 12 ;

	out[80] = ( in[80] & 0x7fffffff ) >> ( 32 - 12 ) ;
	out[81] = ( in[81] & 0x7fffffff ) >> ( 32 - 12 ) ;
	out[82] = ( in[82] & 0x7fffffff ) >> ( 32 - 12 ) ;
	out[83] = ( in[83] & 0x7fffffff ) >> ( 32 - 12 ) ;

	out[80] |= in[84] << 11 ;
	out[81] |= in[85] << 11 ;
	out[82] |= in[86] << 11 ;
	out[83] |= in[87] << 11 ;

	out[84] = ( in[84] & 0x7fffffff ) >> ( 32 - 11 ) ;
	out[85] = ( in[85] & 0x7fffffff ) >> ( 32 - 11 ) ;
	out[86] = ( in[86] & 0x7fffffff ) >> ( 32 - 11 ) ;
	out[87] = ( in[87] & 0x7fffffff ) >> ( 32 - 11 ) ;

	out[84] |= in[88] << 10 ;
	out[85] |= in[89] << 10 ;
	out[86] |= in[90] << 10 ;
	out[87] |= in[91] << 10 ;

	out[88] = ( in[88] & 0x7fffffff ) >> ( 32 - 10 ) ;
	out[89] = ( in[89] & 0x7fffffff ) >> ( 32 - 10 ) ;
	out[90] = ( in[90] & 0x7fffffff ) >> ( 32 - 10 ) ;
	out[91] = ( in[91] & 0x7fffffff ) >> ( 32 - 10 ) ;

	out[88] |= in[92] << 9 ;
	out[89] |= in[93] << 9 ;
	out[90] |= in[94] << 9 ;
	out[91] |= in[95] << 9 ;

	out[92] = ( in[92] & 0x7fffffff ) >> ( 32 - 9 ) ;
	out[93] = ( in[93] & 0x7fffffff ) >> ( 32 - 9 ) ;
	out[94] = ( in[94] & 0x7fffffff ) >> ( 32 - 9 ) ;
	out[95] = ( in[95] & 0x7fffffff ) >> ( 32 - 9 ) ;

	out[92] |= in[96] << 8 ;
	out[93] |= in[97] << 8 ;
	out[94] |= in[98] << 8 ;
	out[95] |= in[99] << 8 ;

	out[96] = ( in[96] & 0x7fffffff ) >> ( 32 - 8 ) ;
	out[97] = ( in[97] & 0x7fffffff ) >> ( 32 - 8 ) ;
	out[98] = ( in[98] & 0x7fffffff ) >> ( 32 - 8 ) ;
	out[99] = ( in[99] & 0x7fffffff ) >> ( 32 - 8 ) ;

	out[96] |= in[100] << 7 ;
	out[97] |= in[101] << 7 ;
	out[98] |= in[102] << 7 ;
	out[99] |= in[103] << 7 ;

	out[100] = ( in[100] & 0x7fffffff ) >> ( 32 - 7 ) ;
	out[101] = ( in[101] & 0x7fffffff ) >> ( 32 - 7 ) ;
	out[102] = ( in[102] & 0x7fffffff ) >> ( 32 - 7 ) ;
	out[103] = ( in[103] & 0x7fffffff ) >> ( 32 - 7 ) ;

	out[100] |= in[104] << 6 ;
	out[101] |= in[105] << 6 ;
	out[102] |= in[106] << 6 ;
	out[103] |= in[107] << 6 ;

	out[104] = ( in[104] & 0x7fffffff ) >> ( 32 - 6 ) ;
	out[105] = ( in[105] & 0x7fffffff ) >> ( 32 - 6 ) ;
	out[106] = ( in[106] & 0x7fffffff ) >> ( 32 - 6 ) ;
	out[107] = ( in[107] & 0x7fffffff ) >> ( 32 - 6 ) ;

	out[104] |= in[108] << 5 ;
	out[105] |= in[109] << 5 ;
	out[106] |= in[110] << 5 ;
	out[107] |= in[111] << 5 ;

	out[108] = ( in[108] & 0x7fffffff ) >> ( 32 - 5 ) ;
	out[109] = ( in[109] & 0x7fffffff ) >> ( 32 - 5 ) ;
	out[110] = ( in[110] & 0x7fffffff ) >> ( 32 - 5 ) ;
	out[111] = ( in[111] & 0x7fffffff ) >> ( 32 - 5 ) ;

	out[108] |= in[112] << 4 ;
	out[109] |= in[113] << 4 ;
	out[110] |= in[114] << 4 ;
	out[111] |= in[115] << 4 ;

	out[112] = ( in[112] & 0x7fffffff ) >> ( 32 - 4 ) ;
	out[113] = ( in[113] & 0x7fffffff ) >> ( 32 - 4 ) ;
	out[114] = ( in[114] & 0x7fffffff ) >> ( 32 - 4 ) ;
	out[115] = ( in[115] & 0x7fffffff ) >> ( 32 - 4 ) ;

	out[112] |= in[116] << 3 ;
	out[113] |= in[117] << 3 ;
	out[114] |= in[118] << 3 ;
	out[115] |= in[119] << 3 ;

	out[116] = ( in[116] & 0x7fffffff ) >> ( 32 - 3 ) ;
	out[117] = ( in[117] & 0x7fffffff ) >> ( 32 - 3 ) ;
	out[118] = ( in[118] & 0x7fffffff ) >> ( 32 - 3 ) ;
	out[119] = ( in[119] & 0x7fffffff ) >> ( 32 - 3 ) ;

	out[116] |= in[120] << 2 ;
	out[117] |= in[121] << 2 ;
	out[118] |= in[122] << 2 ;
	out[119] |= in[123] << 2 ;

	out[120] = ( in[120] & 0x7fffffff ) >> ( 32 - 2 ) ;
	out[121] = ( in[121] & 0x7fffffff ) >> ( 32 - 2 ) ;
	out[122] = ( in[122] & 0x7fffffff ) >> ( 32 - 2 ) ;
	out[123] = ( in[123] & 0x7fffffff ) >> ( 32 - 2 ) ;

	out[120] |= in[124] << 1 ;
	out[121] |= in[125] << 1 ;
	out[122] |= in[126] << 1 ;
	out[123] |= in[127] << 1 ;
}


// 32-bit
template <bool IsRiceCoding>
void VerticalScalarUnpacker<IsRiceCoding>::__vertical_scalar_pack128_c32(const uint32_t * __restrict__  in,
		uint32_t *  __restrict__  out) {
	memcpy(out, in, 128 * sizeof(uint32_t));
}


#endif /* VERTICALSCALARUNPACKERIMP_H_ */
